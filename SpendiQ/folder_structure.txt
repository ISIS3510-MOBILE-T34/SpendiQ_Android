# Folder structure for `app`

- proguard-rules.pro
    ```
    # Add project specific ProGuard rules here.
    # You can control the set of applied configuration files using the
    # proguardFiles setting in build.gradle.
    #
    # For more details, see
    #   http://developer.android.com/guide/developing/tools/proguard.html
    
    # If your project uses WebView with JS, uncomment the following
    # and specify the fully qualified class name to the JavaScript interface
    # class:
    #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
    #   public *;
    #}
    
    # Uncomment this to preserve the line number information for
    # debugging stack traces.
    #-keepattributes SourceFile,LineNumberTable
    
    # If you keep the line number information, uncomment this to
    # hide the original source file name.
    #-renamesourcefileattribute SourceFile    ```
- .gitignore
    ```
    /build    ```
- build.gradle.kts
    ```
    plugins {
        alias(libs.plugins.android.application)
        alias(libs.plugins.kotlin.android)
        id("com.google.gms.google-services")
        id("com.google.firebase.crashlytics")
    }
    
    android {
        namespace = "com.isis3510.spendiq"
        compileSdk = 34
    
        defaultConfig {
            applicationId = "com.isis3510.spendiq"
            minSdk = 24
            targetSdk = 34
            versionCode = 1
            versionName = "1.0"
    
            testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables {
                useSupportLibrary = true
            }
        }
    
        buildTypes {
            release {
                isMinifyEnabled = false
                proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
                )
            }
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = "1.8"
        }
        buildFeatures {
            compose = true
            viewBinding = true
        }
        composeOptions {
            kotlinCompilerExtensionVersion = "1.5.1"
        }
        packaging {
            resources {
                excludes += "/META-INF/{AL2.0,LGPL2.1}"
            }
        }
    }
    
    dependencies {
        // Firebase
        implementation(platform("com.google.firebase:firebase-bom:32.7.0"))
        implementation("com.google.firebase:firebase-crashlytics-ktx")
        implementation("com.google.firebase:firebase-analytics-ktx")
        implementation("com.google.firebase:firebase-auth-ktx")
        implementation("com.google.firebase:firebase-firestore-ktx")
        implementation("com.google.firebase:firebase-storage-ktx")
        implementation("com.google.firebase:firebase-analytics-ktx")
        implementation("com.google.maps.android:maps-compose:2.4.0")
    
        // Coil for image loading
        implementation("io.coil-kt:coil-compose:2.4.0")
    
        // AndroidX and Compose
        implementation(libs.androidx.core.ktx)
        implementation(libs.androidx.lifecycle.runtime.ktx)
        implementation(libs.androidx.activity.compose)
        implementation(platform(libs.androidx.compose.bom))
        implementation(libs.androidx.ui)
        implementation(libs.androidx.ui.graphics)
        implementation(libs.androidx.ui.tooling.preview)
        implementation(libs.androidx.material3)
        implementation(libs.androidx.biometric)
        implementation(libs.androidx.security.crypto)
    
        // Navigation and ViewModel
        implementation("androidx.navigation:navigation-compose:2.7.6")
        implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2")
        implementation("androidx.compose.runtime:runtime-livedata:1.5.4")
    
        // Image Loading
        implementation("io.coil-kt:coil-compose:2.4.0")
        implementation("io.coil-kt.coil3:coil-compose:3.0.0-rc01")
    
        // Location Services
        implementation("com.google.android.gms:play-services-location:21.0.1")
        implementation("com.google.android.gms:play-services-auth:20.5.0")
        implementation(libs.firebase.crashlytics.buildtools)
        implementation(libs.play.services.maps)
        implementation(libs.androidx.espresso.core)
    
        // Testing
        testImplementation(libs.junit)
        androidTestImplementation(libs.androidx.junit)
        androidTestImplementation(libs.androidx.espresso.core)
        androidTestImplementation(platform(libs.androidx.compose.bom))
        androidTestImplementation(libs.androidx.ui.test.junit4)
        debugImplementation(libs.androidx.ui.tooling)
        debugImplementation(libs.androidx.ui.test.manifest)
    
        // Retrofit and OkHttp
        implementation("com.squareup.retrofit2:retrofit:2.9.0") // Retrofit library
        implementation("com.squareup.retrofit2:converter-gson:2.9.0") // Gson converter for Retrofit
        implementation("com.squareup.okhttp3:okhttp:4.11.0") // OkHttp for networking
    
        // Graphs
        implementation("io.github.ehsannarmani:compose-charts:0.0.14")
    }    ```
- google-services.json
    ```
    {
      "project_info": {
        "project_number": "684669295151",
        "firebase_url": "https://spendiq-e31f0-default-rtdb.firebaseio.com",
        "project_id": "spendiq-e31f0",
        "storage_bucket": "spendiq-e31f0.appspot.com"
      },
      "client": [
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:a71dd269e2bffd470d84da",
            "android_client_info": {
              "package_name": "com.isis3510.spendiq"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        },
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:72976c99dbc376780d84da",
            "android_client_info": {
              "package_name": "s.s.s"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        },
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:d89eda12c69a8c740d84da",
            "android_client_info": {
              "package_name": "sdf.sdf.sdf"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        }
      ],
      "configuration_version": "1"
    }    ```
- **.idea/**
    - migrations.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="ProjectMigrations">
            <option name="MigrateToGradleLocalJavaHome">
              <set>
                <option value="$PROJECT_DIR$" />
              </set>
            </option>
          </component>
        </project>        ```
    - gradle.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="GradleSettings">
            <option name="linkedExternalProjectsSettings">
              <GradleProjectSettings>
                <option name="externalProjectPath" value="$PROJECT_DIR$" />
                <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
                <option name="resolveExternalAnnotations" value="false" />
              </GradleProjectSettings>
            </option>
          </component>
        </project>        ```
    - vcs.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="VcsDirectoryMappings">
            <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
          </component>
        </project>        ```
    - workspace.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="AutoImportSettings">
            <option name="autoReloadType" value="NONE" />
          </component>
          <component name="ChangeListManager">
            <list default="true" id="227b5e8e-4964-4551-a9b7-59996885aab5" name="Changes" comment="">
              <change afterPath="$PROJECT_DIR$/google-services.json" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/gradle.xml" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/misc.xml" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/../build.gradle.kts" afterDir="false" />
            </list>
            <option name="SHOW_DIALOG" value="false" />
            <option name="HIGHLIGHT_CONFLICTS" value="true" />
            <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
            <option name="LAST_RESOLUTION" value="IGNORE" />
          </component>
          <component name="ClangdSettings">
            <option name="formatViaClangd" value="false" />
          </component>
          <component name="ProjectColorInfo"><![CDATA[{
          "associatedIndex": 2
        }]]></component>
          <component name="ProjectId" id="2mqTTVy9FZepOiYTbhXlJLRmJfs" />
          <component name="ProjectViewState">
            <option name="hideEmptyMiddlePackages" value="true" />
            <option name="showLibraryContents" value="true" />
          </component>
          <component name="PropertiesComponent"><![CDATA[{
          "keyToString": {
            "RunOnceActivity.ShowReadmeOnStart": "true",
            "RunOnceActivity.cidr.known.project.marker": "true",
            "RunOnceActivity.readMode.enableVisualFormatting": "true",
            "android.gradle.sync.needed": "true",
            "cf.first.check.clang-format": "false",
            "cidr.known.project.marker": "true",
            "kotlin-language-version-configured": "true"
          }
        }]]></component>
          <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
          <component name="TaskManager">
            <task active="true" id="Default" summary="Default task">
              <changelist id="227b5e8e-4964-4551-a9b7-59996885aab5" name="Changes" comment="" />
              <created>1727803114577</created>
              <option name="number" value="Default" />
              <option name="presentableId" value="Default" />
              <updated>1727803114577</updated>
            </task>
            <servers />
          </component>
        </project>        ```
    - misc.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="ExternalStorageConfigurationManager" enabled="true" />
          <component name="ProjectRootManager">
            <output url="file://$PROJECT_DIR$/build/classes" />
          </component>
          <component name="ProjectType">
            <option name="id" value="Android" />
          </component>
        </project>        ```
    - **caches/**
        - deviceStreaming.xml
            ```
            <?xml version="1.0" encoding="UTF-8"?>
            <project version="4">
              <component name="DeviceStreaming">
                <option name="deviceSelectionList">
                  <list>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="27" />
                      <option name="brand" value="DOCOMO" />
                      <option name="codename" value="F01L" />
                      <option name="id" value="F01L" />
                      <option name="manufacturer" value="FUJITSU" />
                      <option name="name" value="F-01L" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="720" />
                      <option name="screenY" value="1280" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="28" />
                      <option name="brand" value="DOCOMO" />
                      <option name="codename" value="SH-01L" />
                      <option name="id" value="SH-01L" />
                      <option name="manufacturer" value="SHARP" />
                      <option name="name" value="AQUOS sense2 SH-01L" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2160" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="Lenovo" />
                      <option name="codename" value="TB370FU" />
                      <option name="id" value="TB370FU" />
                      <option name="manufacturer" value="Lenovo" />
                      <option name="name" value="Tab P12" />
                      <option name="screenDensity" value="340" />
                      <option name="screenX" value="1840" />
                      <option name="screenY" value="2944" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="31" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="a51" />
                      <option name="id" value="a51" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy A51" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="akita" />
                      <option name="id" value="akita" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="b0q" />
                      <option name="id" value="b0q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S22 Ultra" />
                      <option name="screenDensity" value="600" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3088" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="32" />
                      <option name="brand" value="google" />
                      <option name="codename" value="bluejay" />
                      <option name="id" value="bluejay" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 6a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="caiman" />
                      <option name="id" value="caiman" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="960" />
                      <option name="screenY" value="2142" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="comet" />
                      <option name="id" value="comet" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro Fold" />
                      <option name="screenDensity" value="390" />
                      <option name="screenX" value="2076" />
                      <option name="screenY" value="2152" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="29" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="crownqlteue" />
                      <option name="id" value="crownqlteue" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Note9" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2220" />
                      <option name="screenY" value="1080" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="dm3q" />
                      <option name="id" value="dm3q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S23 Ultra" />
                      <option name="screenDensity" value="600" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3088" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="e1q" />
                      <option name="id" value="e1q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S24" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2340" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix" />
                      <option name="id" value="felix" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix" />
                      <option name="id" value="felix" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix_camera" />
                      <option name="id" value="felix_camera" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold (Camera-enabled)" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="gts8uwifi" />
                      <option name="id" value="gts8uwifi" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Tab S8 Ultra" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="1848" />
                      <option name="screenY" value="2960" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="husky" />
                      <option name="id" value="husky" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8 Pro" />
                      <option name="screenDensity" value="390" />
                      <option name="screenX" value="1008" />
                      <option name="screenY" value="2244" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="motorola" />
                      <option name="codename" value="java" />
                      <option name="id" value="java" />
                      <option name="manufacturer" value="Motorola" />
                      <option name="name" value="G20" />
                      <option name="screenDensity" value="280" />
                      <option name="screenX" value="720" />
                      <option name="screenY" value="1600" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="komodo" />
                      <option name="id" value="komodo" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro XL" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="1008" />
                      <option name="screenY" value="2244" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="lynx" />
                      <option name="id" value="lynx" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 7a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="31" />
                      <option name="brand" value="google" />
                      <option name="codename" value="oriole" />
                      <option name="id" value="oriole" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 6" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="panther" />
                      <option name="id" value="panther" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 7" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="q5q" />
                      <option name="id" value="q5q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Z Fold5" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1812" />
                      <option name="screenY" value="2176" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="google" />
                      <option name="codename" value="r11" />
                      <option name="id" value="r11" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Watch" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="384" />
                      <option name="screenY" value="384" />
                      <option name="type" value="WEAR_OS" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="google" />
                      <option name="codename" value="redfin" />
                      <option name="id" value="redfin" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 5" />
                      <option name="screenDensity" value="440" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2340" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="shiba" />
                      <option name="id" value="shiba" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="tangorpro" />
                      <option name="id" value="tangorpro" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Tablet" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="1600" />
                      <option name="screenY" value="2560" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="tokay" />
                      <option name="id" value="tokay" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2424" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="29" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="x1q" />
                      <option name="id" value="x1q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S20" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3200" />
                    </PersistentDeviceSelectionData>
                  </list>
                </option>
              </component>
            </project>            ```
- **src/**
    - **androidTest/**
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - ExampleInstrumentedTest.kt
                            ```
                            package com.isis3510.spendiq
                            
                            import androidx.test.platform.app.InstrumentationRegistry
                            import androidx.test.ext.junit.runners.AndroidJUnit4
                            
                            import org.junit.Test
                            import org.junit.runner.RunWith
                            
                            import org.junit.Assert.*
                            
                            /**
                             * Instrumented test, which will execute on an Android device.
                             *
                             * See [testing documentation](http://d.android.com/tools/testing).
                             */
                            @RunWith(AndroidJUnit4::class)
                            class ExampleInstrumentedTest {
                                @Test
                                fun useAppContext() {
                                    // Context of the app under test.
                                    val appContext = InstrumentationRegistry.getInstrumentation().targetContext
                                    assertEquals("com.isis3510.spendiq", appContext.packageName)
                                }
                            }                            ```
    - **test/**
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - ExampleUnitTest.kt
                            ```
                            package com.isis3510.spendiq
                            
                            import org.junit.Test
                            
                            import org.junit.Assert.*
                            
                            /**
                             * Example local unit test, which will execute on the development machine (host).
                             *
                             * See [testing documentation](http://d.android.com/tools/testing).
                             */
                            class ExampleUnitTest {
                                @Test
                                fun addition_isCorrect() {
                                    assertEquals(4, 2 + 2)
                                }
                            }                            ```
    - **main/**
        - **res/**
            - **mipmap-mdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xc0 in position 22: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xaa in position 4: invalid start byte
                - ic_launcher_foreground.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xfa in position 4: invalid start byte
            - **mipmap-hdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xc0 in position 22: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xb2 in position 4: invalid start byte
                - ic_launcher_foreground.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xa1 in position 21: invalid start byte
            - **drawable/**
                - arrowup24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M7,14l5,-5 5,5z"/>
                        
                    </vector>
                    ```
                - round_star_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M19.65,9.04l-4.84,-0.42 -1.89,-4.45c-0.34,-0.81 -1.5,-0.81 -1.84,0L9.19,8.63l-4.83,0.41c-0.88,0.07 -1.24,1.17 -0.57,1.75l3.67,3.18 -1.1,4.72c-0.2,0.86 0.73,1.54 1.49,1.08l4.15,-2.5 4.15,2.51c0.76,0.46 1.69,-0.22 1.49,-1.08l-1.1,-4.73 3.67,-3.18c0.67,-0.58 0.32,-1.68 -0.56,-1.75zM12,15.4l-3.76,2.27 1,-4.28 -3.32,-2.88 4.38,-0.38L12,6.1l1.71,4.04 4.38,0.38 -3.32,2.88 1,4.28L12,15.4z"/>
                        
                    </vector>
                    ```
                - round_equalizer_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,20c1.1,0 2,-0.9 2,-2L14,6c0,-1.1 -0.9,-2 -2,-2s-2,0.9 -2,2v12c0,1.1 0.9,2 2,2zM6,20c1.1,0 2,-0.9 2,-2v-4c0,-1.1 -0.9,-2 -2,-2s-2,0.9 -2,2v4c0,1.1 0.9,2 2,2zM16,11v7c0,1.1 0.9,2 2,2s2,-0.9 2,-2v-7c0,-1.1 -0.9,-2 -2,-2s-2,0.9 -2,2z"/>
                        
                    </vector>
                    ```
                - baseline_notifications_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z"/>
                        
                    </vector>
                    ```
                - logogroupstart.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - calendar24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M19,4h-1V2h-2v2H8V2H6v2H5C3.89,4 3.01,4.9 3.01,6L3,20c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2V6C21,4.9 20.1,4 19,4zM19,20H5V10h14V20zM9,14H7v-2h2V14zM13,14h-2v-2h2V14zM17,14h-2v-2h2V14zM9,18H7v-2h2V18zM13,18h-2v-2h2V18zM17,18h-2v-2h2V18z"/>
                        
                    </vector>
                    ```
                - round_money_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M11.8,10.9c-2.27,-0.59 -3,-1.2 -3,-2.15 0,-1.09 1.01,-1.85 2.7,-1.85 1.42,0 2.13,0.54 2.39,1.4 0.12,0.4 0.45,0.7 0.87,0.7h0.3c0.66,0 1.13,-0.65 0.9,-1.27 -0.42,-1.18 -1.4,-2.16 -2.96,-2.54V4.5c0,-0.83 -0.67,-1.5 -1.5,-1.5S10,3.67 10,4.5v0.66c-1.94,0.42 -3.5,1.68 -3.5,3.61 0,2.31 1.91,3.46 4.7,4.13 2.5,0.6 3,1.48 3,2.41 0,0.69 -0.49,1.79 -2.7,1.79 -1.65,0 -2.5,-0.59 -2.83,-1.43 -0.15,-0.39 -0.49,-0.67 -0.9,-0.67h-0.28c-0.67,0 -1.14,0.68 -0.89,1.3 0.57,1.39 1.9,2.21 3.4,2.53v0.67c0,0.83 0.67,1.5 1.5,1.5s1.5,-0.67 1.5,-1.5v-0.65c1.95,-0.37 3.5,-1.5 3.5,-3.55 0,-2.84 -2.43,-3.81 -4.7,-4.4z"/>
                        
                    </vector>
                    ```
                - round_arrow_forward_ios_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M7.38,21.01c0.49,0.49 1.28,0.49 1.77,0l8.31,-8.31c0.39,-0.39 0.39,-1.02 0,-1.41L9.15,2.98c-0.49,-0.49 -1.28,-0.49 -1.77,0s-0.49,1.28 0,1.77L14.62,12l-7.25,7.25c-0.48,0.48 -0.48,1.28 0.01,1.76z"/>
                        
                    </vector>
                    ```
                - phone24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M6.62,10.79c1.44,2.83 3.76,5.14 6.59,6.59l2.2,-2.2c0.27,-0.27 0.67,-0.36 1.02,-0.24 1.12,0.37 2.33,0.57 3.57,0.57 0.55,0 1,0.45 1,1V20c0,0.55 -0.45,1 -1,1 -9.39,0 -17,-7.61 -17,-17 0,-0.55 0.45,-1 1,-1h3.5c0.55,0 1,0.45 1,1 0,1.25 0.2,2.45 0.57,3.57 0.11,0.35 0.03,0.74 -0.25,1.02l-2.2,2.2z"/>
                        
                    </vector>
                    ```
                - email24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,4L4,4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,6c0,-1.1 -0.9,-2 -2,-2zM20,8l-8,5 -8,-5L4,6l8,5 8,-5v2z"/>
                        
                    </vector>
                    ```
                - leftactionable.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - outline_question_mark_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M11.07,12.85c0.77,-1.39 2.25,-2.21 3.11,-3.44c0.91,-1.29 0.4,-3.7 -2.18,-3.7c-1.69,0 -2.52,1.28 -2.87,2.34L6.54,6.96C7.25,4.83 9.18,3 11.99,3c2.35,0 3.96,1.07 4.78,2.41c0.7,1.15 1.11,3.3 0.03,4.9c-1.2,1.77 -2.35,2.31 -2.97,3.45c-0.25,0.46 -0.35,0.76 -0.35,2.24h-2.89C10.58,15.22 10.46,13.95 11.07,12.85zM14,20c0,1.1 -0.9,2 -2,2s-2,-0.9 -2,-2c0,-1.1 0.9,-2 2,-2S14,18.9 14,20z"/>
                        
                    </vector>
                    ```
                - rounded_gifts_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M160,800L160,440L160,440Q127,440 103.5,416.5Q80,393 80,360L80,280Q80,247 103.5,223.5Q127,200 160,200L288,200Q283,191 281.5,181Q280,171 280,160Q280,110 315,75Q350,40 400,40Q423,40 443,48.5Q463,57 480,72Q497,56 517,48Q537,40 560,40Q610,40 645,75Q680,110 680,160Q680,171 678,180.5Q676,190 672,200L800,200Q833,200 856.5,223.5Q880,247 880,280L880,360Q880,393 856.5,416.5Q833,440 800,440L800,440L800,800Q800,833 776.5,856.5Q753,880 720,880L240,880Q207,880 183.5,856.5Q160,833 160,800ZM560,120Q543,120 531.5,131.5Q520,143 520,160Q520,177 531.5,188.5Q543,200 560,200Q577,200 588.5,188.5Q600,177 600,160Q600,143 588.5,131.5Q577,120 560,120ZM360,160Q360,177 371.5,188.5Q383,200 400,200Q417,200 428.5,188.5Q440,177 440,160Q440,143 428.5,131.5Q417,120 400,120Q383,120 371.5,131.5Q360,143 360,160ZM160,280L160,360L440,360L440,280L160,280ZM440,800L440,440L240,440L240,800Q240,800 240,800Q240,800 240,800L440,800ZM520,800L720,800Q720,800 720,800Q720,800 720,800L720,440L520,440L520,800ZM800,360L800,280L520,280L520,360L800,360Z"/>
                        
                    </vector>
                    ```
                - round_lightbulb_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M9,21c0,0.55 0.45,1 1,1h4c0.55,0 1,-0.45 1,-1v-1L9,20v1zM12,2C8.14,2 5,5.14 5,9c0,2.38 1.19,4.47 3,5.74L8,17c0,0.55 0.45,1 1,1h6c0.55,0 1,-0.45 1,-1v-2.26c1.81,-1.27 3,-3.36 3,-5.74 0,-3.86 -3.14,-7 -7,-7zM14.85,13.1l-0.85,0.6L14,16h-4v-2.3l-0.85,-0.6C7.8,12.16 7,10.63 7,9c0,-2.76 2.24,-5 5,-5s5,2.24 5,5c0,1.63 -0.8,3.16 -2.15,4.1z"/>
                        
                    </vector>
                    ```
                - ic_launcher_foreground.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android"
                        xmlns:aapt="http://schemas.android.com/aapt"
                        android:width="108dp"
                        android:height="108dp"
                        android:viewportWidth="108"
                        android:viewportHeight="108">
                        <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
                            <aapt:attr name="android:fillColor">
                                <gradient
                                    android:endX="85.84757"
                                    android:endY="92.4963"
                                    android:startX="42.9492"
                                    android:startY="49.59793"
                                    android:type="linear">
                                    <item
                                        android:color="#44000000"
                                        android:offset="0.0" />
                                    <item
                                        android:color="#00000000"
                                        android:offset="1.0" />
                                </gradient>
                            </aapt:attr>
                        </path>
                        <path
                            android:fillColor="#FFFFFF"
                            android:fillType="nonZero"
                            android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
                            android:strokeWidth="1"
                            android:strokeColor="#00000000" />
                    </vector>                    ```
                - round_visibility_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,4C7,4 2.73,7.11 1,11.5 2.73,15.89 7,19 12,19s9.27,-3.11 11,-7.5C21.27,7.11 17,4 12,4zM12,16.5c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5zM12,8.5c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3z"/>
                        
                    </vector>
                    ```
                - arrowdown24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M7,10l5,5 5,-5z"/>
                        
                    </vector>
                    ```
                - logoup.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - logo_log_in.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - fingerprint.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - logodown.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - baseline_edit_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z"/>
                        
                    </vector>
                    ```
                - baseline_shield_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,1L3,5v6c0,5.55 3.84,10.74 9,12 5.16,-1.26 9,-6.45 9,-12V5l-9,-4z"/>
                        
                    </vector>
                    ```
                - person24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
                        
                    </vector>
                    ```
                - round_arrow_back_ios_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M16.62,2.99c-0.49,-0.49 -1.28,-0.49 -1.77,0L6.54,11.3c-0.39,0.39 -0.39,1.02 0,1.41l8.31,8.31c0.49,0.49 1.28,0.49 1.77,0s0.49,-1.28 0,-1.77L9.38,12l7.25,-7.25c0.48,-0.48 0.48,-1.28 -0.01,-1.76z"/>
                        
                    </vector>
                    ```
                - baseline_adjust_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,2C6.49,2 2,6.49 2,12s4.49,10 10,10 10,-4.49 10,-10S17.51,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM15,12c0,1.66 -1.34,3 -3,3s-3,-1.34 -3,-3 1.34,-3 3,-3 3,1.34 3,3z"/>
                        
                    </vector>
                    ```
                - baseline_add_a_photo_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="64dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="64dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M3,4V1h2v3h3v2H5v3H3V6H0V4H3zM6,10V7h3V4h7l1.83,2H21c1.1,0 2,0.9 2,2v12c0,1.1 -0.9,2 -2,2H5c-1.1,0 -2,-0.9 -2,-2V10H6zM13,19c2.76,0 5,-2.24 5,-5s-2.24,-5 -5,-5s-5,2.24 -5,5S10.24,19 13,19zM9.8,14c0,1.77 1.43,3.2 3.2,3.2s3.2,-1.43 3.2,-3.2s-1.43,-3.2 -3.2,-3.2S9.8,12.23 9.8,14z"/>
                        
                    </vector>
                    ```
                - outline_giftcard_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,6h-2.18c0.11,-0.31 0.18,-0.65 0.18,-1 0,-1.66 -1.34,-3 -3,-3 -1.05,0 -1.96,0.54 -2.5,1.35l-0.5,0.67 -0.5,-0.68C10.96,2.54 10.05,2 9,2 7.34,2 6,3.34 6,5c0,0.35 0.07,0.69 0.18,1L4,6c-1.11,0 -1.99,0.89 -1.99,2L2,19c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,8c0,-1.11 -0.89,-2 -2,-2zM15,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM9,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM20,19L4,19v-2h16v2zM20,14L4,14L4,8h5.08L7,10.83 8.62,12 12,7.4l3.38,4.6L17,10.83 14.92,8L20,8v6z"/>
                        
                    </vector>
                    ```
                - location.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <selector xmlns:android="http://schemas.android.com/apk/res/android">
                        <svg width="14" height="19" viewBox="0 0 14 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M6.2806 18.2901C0.983281 10.6105 0 9.82235 0 7C0 3.134 3.13399 0 7 0C10.866 0 14 3.134 14 7C14 9.82235 13.0167 10.6105 7.7194 18.2901C7.37177 18.7922 6.6282 18.7922 6.2806 18.2901ZM7 9.91667C8.61084 9.91667 9.91667 8.61084 9.91667 7C9.91667 5.38916 8.61084 4.08333 7 4.08333C5.38916 4.08333 4.08333 5.38916 4.08333 7C4.08333 8.61084 5.38916 9.91667 7 9.91667Z" fill="#868686"/>
                        </svg>
                    
                    </selector>                    ```
                - home24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z"/>
                        
                    </vector>
                    ```
                - add24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        
                    </vector>
                    ```
                - baseline_location_pin_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#868686" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,2L12,2C8.13,2 5,5.13 5,9c0,1.74 0.5,3.37 1.41,4.84c0.95,1.54 2.2,2.86 3.16,4.4c0.47,0.75 0.81,1.45 1.17,2.26C11,21.05 11.21,22 12,22h0c0.79,0 1,-0.95 1.25,-1.5c0.37,-0.81 0.7,-1.51 1.17,-2.26c0.96,-1.53 2.21,-2.85 3.16,-4.4C18.5,12.37 19,10.74 19,9C19,5.13 15.87,2 12,2zM12,11.75c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5s2.5,1.12 2.5,2.5S13.38,11.75 12,11.75z"/>
                        
                    </vector>
                    ```
                - baseline_map_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20.5,3l-0.16,0.03L15,5.1 9,3 3.36,4.9c-0.21,0.07 -0.36,0.25 -0.36,0.48V20.5c0,0.28 0.22,0.5 0.5,0.5l0.16,-0.03L9,18.9l6,2.1 5.64,-1.9c0.21,-0.07 0.36,-0.25 0.36,-0.48V3.5c0,-0.28 -0.22,-0.5 -0.5,-0.5zM15,19l-6,-2.11V5l6,2.11V19z"/>
                        
                    </vector>
                    ```
                - gift24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,6h-2.18c0.11,-0.31 0.18,-0.65 0.18,-1 0,-1.66 -1.34,-3 -3,-3 -1.05,0 -1.96,0.54 -2.5,1.35l-0.5,0.67 -0.5,-0.68C10.96,2.54 10.05,2 9,2 7.34,2 6,3.34 6,5c0,0.35 0.07,0.69 0.18,1L4,6c-1.11,0 -1.99,0.89 -1.99,2L2,19c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,8c0,-1.11 -0.89,-2 -2,-2zM15,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM9,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM20,19L4,19v-2h16v2zM20,14L4,14L4,8h5.08L7,10.83 8.62,12 11,8.76l1,-1.36 1,1.36L15.38,12 17,10.83 14.92,8L20,8v6z"/>
                        
                    </vector>
                    ```
                - rounded_home_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M240,760L360,760L360,560Q360,543 371.5,531.5Q383,520 400,520L560,520Q577,520 588.5,531.5Q600,543 600,560L600,760L720,760L720,400Q720,400 720,400Q720,400 720,400L480,220Q480,220 480,220Q480,220 480,220L240,400Q240,400 240,400Q240,400 240,400L240,760ZM160,760L160,400Q160,381 168.5,364Q177,347 192,336L432,156Q453,140 480,140Q507,140 528,156L768,336Q783,347 791.5,364Q800,381 800,400L800,760Q800,793 776.5,816.5Q753,840 720,840L560,840Q543,840 531.5,828.5Q520,817 520,800L520,600Q520,600 520,600Q520,600 520,600L440,600Q440,600 440,600Q440,600 440,600L440,800Q440,817 428.5,828.5Q417,840 400,840L240,840Q207,840 183.5,816.5Q160,793 160,760ZM480,490L480,490L480,490Q480,490 480,490Q480,490 480,490L480,490L480,490L480,490L480,490Q480,490 480,490Q480,490 480,490L480,490Q480,490 480,490Q480,490 480,490L480,490Z"/>
                        
                    </vector>
                    ```
                - notification.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z"/>
                        
                    </vector>
                    ```
                - round_calendar_today_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,3h-1L19,2c0,-0.55 -0.45,-1 -1,-1s-1,0.45 -1,1v1L7,3L7,2c0,-0.55 -0.45,-1 -1,-1s-1,0.45 -1,1v1L4,3c-1.1,0 -2,0.9 -2,2v16c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,5c0,-1.1 -0.9,-2 -2,-2zM19,21L5,21c-0.55,0 -1,-0.45 -1,-1L4,8h16v12c0,0.55 -0.45,1 -1,1z"/>
                        
                    </vector>
                    ```
                - sharp_info_outline_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M11,17h2v-6h-2v6zM12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM11,9h2L13,7h-2v2z"/>
                          
                        <path android:fillColor="@android:color/white" android:pathData="M11,7h2v2h-2zM11,11h2v6h-2z"/>
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8z"/>
                        
                    </vector>
                    ```
                - round_clock_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                    
                        <path android:fillColor="@android:color/white" android:pathData="M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8zM11.78,7h-0.06c-0.4,0 -0.72,0.32 -0.72,0.72v4.72c0,0.35 0.18,0.68 0.49,0.86l4.15,2.49c0.34,0.2 0.78,0.1 0.98,-0.24 0.21,-0.34 0.1,-0.79 -0.25,-0.99l-3.87,-2.3L12.5,7.72c0,-0.4 -0.32,-0.72 -0.72,-0.72z"/>
                    
                    </vector>
                    ```
                - ic_launcher_background.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <vector
                        android:height="108dp"
                        android:width="108dp"
                        android:viewportHeight="108"
                        android:viewportWidth="108"
                        xmlns:android="http://schemas.android.com/apk/res/android">
                        <path android:fillColor="#3DDC84"
                              android:pathData="M0,0h108v108h-108z"/>
                        <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                        <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
                              android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
                    </vector>
                    ```
                - creditcard24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,4L4,4c-1.11,0 -1.99,0.89 -1.99,2L2,18c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,6c0,-1.11 -0.89,-2 -2,-2zM20,18L4,18v-6h16v6zM20,8L4,8L4,6h16v2z"/>
                        
                    </vector>
                    ```
                - baseline_visibility_off_24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,7c2.76,0 5,2.24 5,5 0,0.65 -0.13,1.26 -0.36,1.83l2.92,2.92c1.51,-1.26 2.7,-2.89 3.43,-4.75 -1.73,-4.39 -6,-7.5 -11,-7.5 -1.4,0 -2.74,0.25 -3.98,0.7l2.16,2.16C10.74,7.13 11.35,7 12,7zM2,4.27l2.28,2.28 0.46,0.46C3.08,8.3 1.78,10.02 1,12c1.73,4.39 6,7.5 11,7.5 1.55,0 3.03,-0.3 4.38,-0.84l0.42,0.42L19.73,22 21,20.73 3.27,3 2,4.27zM7.53,9.8l1.55,1.55c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.66 1.34,3 3,3 0.22,0 0.44,-0.03 0.65,-0.08l1.55,1.55c-0.67,0.33 -1.41,0.53 -2.2,0.53 -2.76,0 -5,-2.24 -5,-5 0,-0.79 0.2,-1.53 0.53,-2.2zM11.84,9.02l3.15,3.15 0.02,-0.16c0,-1.66 -1.34,-3 -3,-3l-0.17,0.01z"/>
                        
                    </vector>
                    ```
            - **mipmap-xxxhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xbf in position 21: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xec in position 4: invalid continuation byte
                - ic_launcher_foreground.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x82 in position 4: invalid start byte
            - **mipmap-xxhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xfa in position 16: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xff in position 16: invalid start byte
                - ic_launcher_foreground.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xc1 in position 22: invalid start byte
            - **values/**
                - colors.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <resources>
                        <color name="purple_200">#FFBB86FC</color>
                        <color name="purple_500">#FF6200EE</color>
                        <color name="purple_700">#FF3700B3</color>
                        <color name="teal_200">#FF03DAC5</color>
                        <color name="teal_700">#FF018786</color>
                        <color name="black">#FF000000</color>
                        <color name="white">#FFFFFFFF</color>
                        <color name="lavender">#8692f7</color>
                        <color name="grey">#ff424242</color>
                        <color name="greenSpendiQ">#B3CB54</color>
                        <color name="pinkSpendiQ">#C33BA5</color>
                    </resources>                    ```
                - themes.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <resources>
                    
                        <style name="Theme.SpendiQ" parent="android:Theme.Material.Light.NoActionBar" />
                    </resources>                    ```
                - strings.xml
                    ```
                    <resources>
                        <string name="app_name">SpendiQ</string>
                    </resources>                    ```
            - **xml/**
                - backup_rules.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?><!--
                       Sample backup rules file; uncomment and customize as necessary.
                       See https://developer.android.com/guide/topics/data/autobackup
                       for details.
                       Note: This file is ignored for devices older that API 31
                       See https://developer.android.com/about/versions/12/backup-restore
                    -->
                    <full-backup-content>
                        <!--
                       <include domain="sharedpref" path="."/>
                       <exclude domain="sharedpref" path="device.xml"/>
                    -->
                    </full-backup-content>                    ```
                - network_security_config.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <network-security-config>
                        <domain-config cleartextTrafficPermitted="true">
                            <domain includeSubdomains="true">148.113.204.223</domain>
                        </domain-config>
                    </network-security-config>
                    ```
                - data_extraction_rules.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?><!--
                       Sample data extraction rules file; uncomment and customize as necessary.
                       See https://developer.android.com/about/versions/12/backup-restore#xml-changes
                       for details.
                    -->
                    <data-extraction-rules>
                        <cloud-backup>
                            <!-- TODO: Use <include> and <exclude> to control what is backed up.
                            <include .../>
                            <exclude .../>
                            -->
                        </cloud-backup>
                        <!--
                        <device-transfer>
                            <include .../>
                            <exclude .../>
                        </device-transfer>
                        -->
                    </data-extraction-rules>                    ```
            - **mipmap-xhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xec in position 4: invalid continuation byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x9a in position 4: invalid start byte
                - ic_launcher_foreground.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xcc in position 4: invalid continuation byte
            - **mipmap-anydpi-v26/**
                - ic_launcher.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
                        <background android:drawable="@drawable/ic_launcher_background"/>
                        <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
                    </adaptive-icon>                    ```
                - ic_launcher_round.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
                        <background android:drawable="@drawable/ic_launcher_background"/>
                        <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
                    </adaptive-icon>                    ```
        - AndroidManifest.xml
            ```
            <?xml version="1.0" encoding="utf-8"?>
            <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                xmlns:tools="http://schemas.android.com/tools"
                package="com.isis3510.spendiq">
            
                <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
                <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
                <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
                <uses-permission android:name="android.permission.USE_BIOMETRIC" />
            
                <application
                    android:allowBackup="true"
                    android:dataExtractionRules="@xml/data_extraction_rules"
                    android:fullBackupContent="@xml/backup_rules"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:roundIcon="@mipmap/ic_launcher_round"
                    android:supportsRtl="true"
                    android:theme="@style/Theme.SpendiQ"
                    tools:targetApi="31"
                    android:networkSecurityConfig="@xml/network_security_config"> <!-- Added line -->
            
                    <!-- Google Maps API Key -->
                    <meta-data
                        android:name="com.google.android.geo.API_KEY"
                        android:value="AIzaSyAknJmX2ZYLzwoddFByZnpGXyDmmcqS8cI"/>
            
                    <!-- MainActivity -->
                    <activity
                        android:name=".views.MainActivity"
                        android:exported="true"
                        android:label="@string/app_name"
                        android:theme="@style/Theme.SpendiQ"
                        android:screenOrientation="portrait"
                        android:windowSoftInputMode="adjustResize">
                        <intent-filter>
                            <action android:name="android.intent.action.MAIN" />
                            <category android:name="android.intent.category.LAUNCHER" />
                        </intent-filter>
                    </activity>
            
                    <!-- Registering NotificationListenerService -->
                    <service
                        android:name=".services.NotificationListener"
                        android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"
                        android:exported="false">
                        <intent-filter>
                            <action android:name="android.service.notification.NotificationListenerService" />
                        </intent-filter>
                    </service>
            
                </application>
            
            </manifest>
            ```
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - **viewmodel/**
                            - ConnectivityViewModel.kt
                                ```
                                import android.app.Application
                                import android.content.Context
                                import android.net.ConnectivityManager
                                import android.net.Network
                                import android.net.NetworkCapabilities
                                import androidx.lifecycle.AndroidViewModel
                                import androidx.lifecycle.LiveData
                                import androidx.lifecycle.MutableLiveData
                                
                                class ConnectivityViewModel(application: Application) : AndroidViewModel(application) {
                                    private val _isConnected = MutableLiveData<Boolean>()
                                    val isConnected: LiveData<Boolean> get() = _isConnected
                                
                                    private val connectivityManager =
                                        application.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
                                
                                    init {
                                        // Verificar el estado inicial de la conectividad
                                        _isConnected.value = isNetworkAvailable()
                                
                                        // Registrar el NetworkCallback
                                        connectivityManager.registerDefaultNetworkCallback(object : ConnectivityManager.NetworkCallback() {
                                            override fun onAvailable(network: Network) {
                                                _isConnected.postValue(true) // Conexión disponible
                                            }
                                
                                            override fun onLost(network: Network) {
                                                _isConnected.postValue(false) // Conexión perdida
                                            }
                                        })
                                    }
                                
                                    private fun isNetworkAvailable(): Boolean {
                                        val networkCapabilities = connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork)
                                        return networkCapabilities?.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET) == true
                                    }
                                }                                ```
                            - AuthViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.app.Application
                                import android.net.Uri
                                import androidx.lifecycle.AndroidViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.User
                                import com.isis3510.spendiq.model.repository.AuthRepository
                                import com.isis3510.spendiq.utils.BiometricHelper
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                import java.util.Date
                                import android.content.SharedPreferences
                                import android.util.Base64
                                import android.util.Log
                                import androidx.fragment.app.FragmentActivity
                                import androidx.security.crypto.EncryptedSharedPreferences
                                import androidx.security.crypto.MasterKey
                                import kotlinx.coroutines.flow.MutableSharedFlow
                                import kotlinx.coroutines.flow.asSharedFlow
                                
                                sealed class AuthState {
                                    data object Idle : AuthState()
                                    data object Loading : AuthState()
                                    data object Authenticated : AuthState()
                                    data object BiometricEnabled : AuthState() // Re-added this state
                                    data object PasswordResetEmailSent : AuthState() // Fixed the missing reference
                                    data object EmailVerificationSent : AuthState()
                                    data object EmailVerified : AuthState()
                                    data object EmailNotVerified : AuthState()
                                    data class Error(val message: String) : AuthState()
                                    data object BiometricAlreadyEnabled : AuthState()
                                }
                                
                                class AuthViewModel(application: Application) : AndroidViewModel(application) {
                                    private val authRepository = AuthRepository(application)
                                
                                    private val _authState = MutableStateFlow<AuthState>(AuthState.Idle)
                                    val authState: StateFlow<AuthState> = _authState
                                
                                    private val _user = MutableStateFlow<User?>(null)
                                    val user: StateFlow<User?> = _user
                                
                                    private val _userData = MutableStateFlow<UserDataState>(UserDataState.Idle)
                                    val userData: StateFlow<UserDataState> = _userData
                                
                                    private val biometricHelper = BiometricHelper(application)
                                
                                    private val _biometricLoginEvent = MutableSharedFlow<String>() // Evento para manejar el resultado de la habilitación de biometría
                                    val biometricLoginEvent = _biometricLoginEvent.asSharedFlow() // Exponer como SharedFlow
                                
                                    init {
                                        _user.value = authRepository.getCurrentUser()
                                        if (_user.value != null) {
                                            _authState.value = AuthState.Authenticated
                                        }
                                    }
                                
                                    fun register(email: String, password: String, fullName: String, phoneNumber: String, birthDate: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            val userData = mapOf(
                                                "fullName" to fullName,
                                                "email" to email,
                                                "phoneNumber" to phoneNumber,
                                                "birthDate" to birthDate,
                                                "registrationDate" to Date()
                                            )
                                            authRepository.register(email, password, userData).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> {
                                                        _user.value = result.getOrNull()
                                                        AuthState.Authenticated
                                                    }
                                                    result.isFailure -> {
                                                        val error = result.exceptionOrNull()
                                                        AuthState.Error(error?.message ?: "Registration failed")
                                                    }
                                                    else -> AuthState.Error("Unexpected error during registration")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun login(email: String, password: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            authRepository.login(email, password).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> {
                                                        _user.value = result.getOrNull()
                                                        AuthState.Authenticated
                                                    }
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Unknown error")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun logout() {
                                        authRepository.logout()
                                        _user.value = null
                                        _authState.value = AuthState.Idle
                                    }
                                
                                    fun saveUserData(data: Map<String, Any>) {
                                        viewModelScope.launch {
                                            _user.value?.let { user ->
                                                authRepository.saveUserData(user.id, data).collect { result ->
                                                    if (result.isFailure) {
                                                        _authState.value = AuthState.Error("Failed to save user data")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getUserData() {
                                        viewModelScope.launch {
                                            _userData.value = UserDataState.Loading
                                            _user.value?.let { user ->
                                                authRepository.getUserData(user.id).collect { result ->
                                                    _userData.value = if (result.isSuccess) {
                                                        UserDataState.Success(result.getOrNull() ?: emptyMap())
                                                    } else {
                                                        UserDataState.Error(result.exceptionOrNull()?.message ?: "Failed to get user data")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun uploadProfileImage(uri: Uri) {
                                        viewModelScope.launch {
                                            _userData.value = UserDataState.Loading
                                            authRepository.uploadProfileImage(uri).collect { result ->
                                                if (result.isSuccess) {
                                                    getUserData() // Refresh user data after successful upload
                                                } else {
                                                    _userData.value = UserDataState.Error(result.exceptionOrNull()?.message ?: "Failed to upload profile image")
                                                }
                                            }
                                        }
                                    }
                                
                                    sealed class UserDataState {
                                        data object Idle : UserDataState()
                                        data object Loading : UserDataState()
                                        data class Success(val data: Map<String, Any>) : UserDataState()
                                        data class Error(val message: String) : UserDataState()
                                    }
                                
                                    // Send email verification
                                    fun sendEmailVerification() {
                                        viewModelScope.launch {
                                            authRepository.sendEmailVerification().collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> AuthState.EmailVerificationSent
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Failed to send verification email")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Check if the user's email is verified
                                    fun checkEmailVerification() {
                                        viewModelScope.launch {
                                            authRepository.reloadUser().collect { result ->
                                                if (result.isSuccess) {
                                                    if (authRepository.isEmailVerified()) {
                                                        _authState.value = AuthState.EmailVerified
                                                    } else {
                                                        _authState.value = AuthState.EmailNotVerified
                                                    }
                                                } else {
                                                    _authState.value = AuthState.Error(result.exceptionOrNull()?.message ?: "Failed to check email verification")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Send password reset email
                                    fun sendPasswordResetEmail(email: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            authRepository.sendPasswordResetEmail(email).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> AuthState.PasswordResetEmailSent
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Unknown error")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Biometric login setup
                                    fun setupBiometricPrompt(
                                        activity: FragmentActivity,
                                        onSuccess: () -> Unit,
                                        onError: (String) -> Unit
                                    ) {
                                        biometricHelper.setupBiometricPrompt(activity, onSuccess, onError)
                                    }
                                
                                    // Show biometric login prompt
                                    fun showBiometricPrompt() {
                                        biometricHelper.showBiometricPrompt()
                                    }
                                
                                    // Enable biometric login by saving credentials
                                    fun enableBiometricLogin(email: String, password: String) {
                                        viewModelScope.launch {
                                            // Verificar si la biometría ya está habilitada
                                            if (biometricHelper.isBiometricEnabled()) {
                                                _authState.value = AuthState.BiometricAlreadyEnabled // Cambiar el estado
                                                return@launch // Salir de la función
                                            }
                                
                                            _authState.value = AuthState.Loading
                                            authRepository.login(email, password).collect { result ->
                                                when {
                                                    result.isSuccess -> {
                                                        val user = result.getOrNull()
                                                        user?.let {
                                                            Log.d("AuthViewModel", "Login successful, storing credentials")
                                                            biometricHelper.storeCredentials(email, password)
                                                            _authState.value = AuthState.BiometricEnabled // Cambiar el estado a habilitado
                                                        }
                                                    }
                                                    result.isFailure -> {
                                                        _authState.value = AuthState.Error("Failed to enable biometric login")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    // Perform login using stored biometric credentials
                                    fun loginWithBiometrics() {
                                        val (encryptedEmail, encryptedPassword) = biometricHelper.getStoredCredentials()
                                
                                        if (encryptedEmail == null || encryptedPassword == null) {
                                            _authState.value = AuthState.Error("No stored credentials found")
                                            return
                                        }
                                
                                        try {
                                            val email = String(Base64.decode(encryptedEmail, Base64.DEFAULT))
                                            val password = String(Base64.decode(encryptedPassword, Base64.DEFAULT))
                                            login(email, password)
                                        } catch (e: Exception) {
                                            _authState.value = AuthState.Error("Error processing credentials: ${e.message}")
                                        }
                                    }
                                
                                
                                    // Reset authentication state
                                    fun resetAuthState() {
                                        _authState.value = AuthState.Idle
                                    }
                                }                                ```
                            - TransactionViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.util.Log
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.Transaction
                                import com.isis3510.spendiq.model.repository.TransactionRepository
                                import com.isis3510.spendiq.viewmodel.AccountViewModel.UiState
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                
                                class TransactionViewModel(
                                    private val transactionRepository: TransactionRepository = TransactionRepository()
                                ) : ViewModel() {
                                    private val _transactions = MutableStateFlow<List<Transaction>>(emptyList())
                                    val transactions: StateFlow<List<Transaction>> = _transactions
                                
                                    private val _selectedTransaction = MutableStateFlow<Transaction?>(null)
                                    val selectedTransaction: StateFlow<Transaction?> = _selectedTransaction
                                
                                    private val _uiState = MutableStateFlow<UiState>(UiState.Idle)
                                    val uiState: StateFlow<UiState> = _uiState
                                
                                    fun fetchTransactions(accountName: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.getTransactions(accountName).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        _transactions.value = result.getOrNull() ?: emptyList()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch transactions")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getTransaction(accountId: String, transactionId: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.getTransaction(accountId, transactionId).collect { result ->
                                                when {
                                                    result.isSuccess -> {
                                                        _selectedTransaction.value = result.getOrNull()
                                                        _uiState.value = UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        _uiState.value = UiState.Error(result.exceptionOrNull()?.message ?: "Failed to get transaction")
                                                        _selectedTransaction.value = null
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun addTransactionWithAccountCheck(transaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.addTransaction(transaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        // Refresh the transactions list for the current account
                                                        fetchTransactions(transaction.accountId)
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to add transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun updateTransaction(accountId: String, oldTransaction: Transaction, newTransaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.updateTransaction(accountId, oldTransaction, newTransaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        _selectedTransaction.value = newTransaction
                                                        fetchTransactions(newTransaction.accountId) // Refresh transactions list
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to update transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun deleteTransaction(accountId: String, transaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.deleteTransaction(accountId, transaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        _selectedTransaction.value = null
                                                        fetchTransactions(transaction.accountId) // Refresh transactions list
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to delete transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getIncomeAndExpenses(): Pair<Long, Long> {
                                        var totalIncome = 0L
                                        var totalExpenses = 0L
                                
                                        transactions.value.forEach { transaction ->
                                            if (transaction.transactionType == "Income") {
                                                totalIncome += transaction.amount
                                            } else if (transaction.transactionType == "Expense") {
                                                totalExpenses += transaction.amount
                                            }
                                        }
                                
                                        Log.d("TransactionViewModel", "Expenses: $totalExpenses")
                                        Log.d("TransactionViewModel", "Income: $totalIncome")
                                
                                        return Pair(totalIncome, totalExpenses)
                                    }
                                
                                    fun fetchAllTransactions() {
                                        Log.d("TransactionViewModel", "fetchAllTransactions called")
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            transactionRepository.getAllTransactions().collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        val transactionsList = result.getOrNull() ?: emptyList()
                                                        _transactions.value = transactionsList
                                
                                                        Log.d("TransactionViewModel", "Transacciones obtenidas: $transactionsList")
                                
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        Log.e("TransactionViewModel", "Error al obtener transacciones: ${result.exceptionOrNull()?.message}")
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch transactions")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun clearSelectedTransaction() {
                                        _selectedTransaction.value = null
                                    }
                                
                                    sealed class UiState {
                                        data object Idle : UiState()
                                        data object Loading : UiState()
                                        data object Success : UiState()
                                        data class Error(val message: String) : UiState()
                                    }
                                }                                ```
                            - ProfileViewModel.kt
                                ```
                                // ProfileViewModel.kt
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.content.Context
                                import android.net.Uri
                                import androidx.lifecycle.ViewModel
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                
                                class ProfileViewModel : ViewModel() {
                                
                                    private val _profileImageUri = MutableStateFlow<Uri?>(null)
                                    val profileImageUri: StateFlow<Uri?> = _profileImageUri
                                
                                    private val _userData = MutableStateFlow<Map<String, Any?>?>(null)
                                    val userData: StateFlow<Map<String, Any?>?> = _userData
                                
                                    fun saveProfileImage(context: Context, uri: Uri) {
                                        saveProfileImageUri(context, uri)
                                        _profileImageUri.value = uri
                                    }
                                
                                    fun loadProfileImage(context: Context) {
                                        _profileImageUri.value = getProfileImageUri(context)
                                    }
                                
                                    fun setUserData(data: Map<String, Any?>) {
                                        _userData.value = data
                                    }
                                
                                    private fun saveProfileImageUri(context: Context, uri: Uri) {
                                        val sharedPreferences = context.getSharedPreferences("profile_prefs", Context.MODE_PRIVATE)
                                        sharedPreferences.edit().putString("profile_image_uri", uri.toString()).apply()
                                    }
                                
                                    private fun getProfileImageUri(context: Context): Uri? {
                                        val sharedPreferences = context.getSharedPreferences("profile_prefs", Context.MODE_PRIVATE)
                                        val uriString = sharedPreferences.getString("profile_image_uri", null)
                                        return uriString?.let { Uri.parse(it) }
                                    }
                                }
                                ```
                            - OffersViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.app.Application
                                import androidx.lifecycle.AndroidViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.Offer
                                import com.isis3510.spendiq.model.repository.OffersRepository
                                import com.isis3510.spendiq.services.LocationBasedOfferService
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                
                                class OffersViewModel(application: Application) : AndroidViewModel(application) {
                                    private val repository = OffersRepository()
                                    private val locationBasedOfferService = LocationBasedOfferService(application)
                                
                                    private val _offers = MutableStateFlow<List<Offer>>(emptyList())
                                    val offers: StateFlow<List<Offer>> = _offers
                                
                                    private val _selectedOffer = MutableStateFlow<Offer?>(null)
                                    val selectedOffer: StateFlow<Offer?> = _selectedOffer
                                
                                    private val _uiState = MutableStateFlow<UiState>(UiState.Idle)
                                    val uiState: StateFlow<UiState> = _uiState
                                
                                    fun fetchOffers() {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            repository.getOffers().collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        val offersList = result.getOrNull() ?: emptyList()
                                                        _offers.value = offersList
                                                        // Start monitoring for nearby offers
                                                        locationBasedOfferService.startMonitoring(offersList)
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch offers")
                                                    }
                                                    else -> {
                                                        UiState.Error("Unknown error occurred")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getOfferById(offerId: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            repository.getOfferById(offerId).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        _selectedOffer.value = result.getOrNull()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch offer")
                                                    }
                                                    else -> {
                                                        UiState.Error("Unknown error occurred")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    override fun onCleared() {
                                        super.onCleared()
                                        locationBasedOfferService.stopMonitoring()
                                    }
                                
                                    sealed class UiState {
                                        object Idle : UiState()
                                        object Loading : UiState()
                                        object Success : UiState()
                                        data class Error(val message: String) : UiState()
                                    }
                                }
                                ```
                            - AccountViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.Account
                                import com.isis3510.spendiq.model.data.Transaction
                                import com.isis3510.spendiq.model.repository.AccountRepository
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                
                                class AccountViewModel : ViewModel() {
                                    private val accountRepository = AccountRepository()
                                
                                    // State flows
                                    private val _accounts = MutableStateFlow<List<Account>>(emptyList())
                                    val accounts: StateFlow<List<Account>> = _accounts
                                
                                    private val _transactions = MutableStateFlow<List<Transaction>>(emptyList())
                                    val transactions: StateFlow<List<Transaction>> = _transactions
                                
                                    private val _uiState = MutableStateFlow<UiState>(UiState.Idle)
                                    val uiState: StateFlow<UiState> = _uiState
                                
                                    private val _currentMoney = MutableStateFlow(0L)
                                    val currentMoney: StateFlow<Long> = _currentMoney
                                
                                    private val _selectedTransaction = MutableStateFlow<Transaction?>(null)
                                    val selectedTransaction: StateFlow<Transaction?> = _selectedTransaction
                                
                                    init {
                                        fetchAccounts()
                                    }
                                
                                    fun fetchAccounts() {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.getAccounts().collect { result ->
                                                if (result.isSuccess) {
                                                    val accountList = result.getOrNull() ?: emptyList()
                                                    _accounts.value = accountList
                                                    _currentMoney.value = accountList.sumOf { it.amount }
                                                    _uiState.value = UiState.Success
                                                } else {
                                                    _uiState.value = UiState.Error(
                                                        result.exceptionOrNull()?.message ?: "Failed to fetch accounts"
                                                    )
                                                }
                                            }
                                        }
                                    }
                                
                                    fun createAccount(accountType: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.createAccount(accountType).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to create account")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun deleteAccount(accountType: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.deleteAccount(accountType).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to delete account")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    sealed class UiState {
                                        object Idle : UiState()
                                        object Loading : UiState()
                                        object Success : UiState()
                                        data class Error(val message: String) : UiState()
                                    }
                                }
                                ```
                            - UserViewModel.kt
                                ```
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.google.firebase.auth.FirebaseAuth
                                import com.google.firebase.firestore.FirebaseFirestore
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                class UserViewModel : ViewModel() {
                                    private val _userData = MutableStateFlow<Map<String, Any?>>(emptyMap())
                                    val userData: StateFlow<Map<String, Any?>> = _userData
                                    init {
                                        loadUserDataFromFirebase()
                                    }
                                    private fun loadUserDataFromFirebase() {
                                        // Obtener el usuario actual
                                        val currentUser = FirebaseAuth.getInstance().currentUser
                                        val userId = currentUser?.uid
                                        if (userId != null) {
                                            viewModelScope.launch {
                                                val firestore = FirebaseFirestore.getInstance()
                                                val userDocument = firestore.collection("users").document(userId)
                                                userDocument.get()
                                                    .addOnSuccessListener { document ->
                                                        if (document != null && document.exists()) {
                                                            // Extraer solo los campos necesarios
                                                            _userData.value = mapOf(
                                                                "fullName" to document.getString("fullName"),
                                                                "email" to document.getString("email"),
                                                                "phoneNumber" to document.getString("phoneNumber"),
                                                                "birthDate" to document.getString("birthDate")
                                                            )
                                                        }
                                                    }
                                                    .addOnFailureListener { exception ->
                                                        // Manejar el error
                                                        println("Error al obtener datos del usuario: $exception")
                                                    }
                                            }
                                        } else {
                                            // Manejar el caso en que no haya un usuario autenticado
                                            println("No hay un usuario autenticado.")
                                        }
                                    }
                                }                                ```
                        - **utils/**
                            - BiometricHelper.kt
                                ```
                                package com.isis3510.spendiq.utils
                                
                                import android.content.Context
                                
                                import androidx.fragment.app.FragmentActivity
                                import com.isis3510.spendiq.model.facade.ExternalServicesFacade
                                import com.isis3510.spendiq.model.facade.LDServicesFacade
                                import java.util.Base64
                                
                                class BiometricHelper(private val context: Context) {
                                    private val externalServicesFacade = ExternalServicesFacade(context)
                                    private val ldServicesFacade = LDServicesFacade(context)
                                
                                    fun setupBiometricPrompt(activity: FragmentActivity, onSuccess: () -> Unit, onError: (String) -> Unit) {
                                        externalServicesFacade.setupBiometricPrompt(activity, onSuccess, onError)
                                    }
                                
                                    fun showBiometricPrompt() {
                                        externalServicesFacade.showBiometricPrompt()
                                    }
                                
                                    fun storeCredentials(email: String, password: String) {
                                        ldServicesFacade.storeCredentials(email, password)
                                    }
                                
                                    fun getStoredCredentials(): Pair<String?, String?> {
                                        val encryptedEmail = ldServicesFacade.getEncryptedEmail()
                                        val encryptedPassword = ldServicesFacade.getEncryptedPassword()
                                
                                        return Pair(
                                            encryptedEmail,
                                            encryptedPassword
                                        )
                                    }
                                
                                    fun isBiometricEnabled(): Boolean {
                                        // Verificar si las credenciales están almacenadas
                                        val encryptedEmail = ldServicesFacade.getEncryptedEmail()
                                        val encryptedPassword = ldServicesFacade.getEncryptedPassword()
                                        return encryptedEmail != null && encryptedPassword != null
                                    }
                                }                                ```
                        - **model/**
                            - **repository/**
                                - AccountRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.util.Log
                                    import androidx.compose.ui.graphics.Color
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.model.singleton.FirebaseManager
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    
                                    class AccountRepository {
                                        private val firestore = FirebaseManager.firestore
                                        private val auth = FirebaseManager.auth
                                    
                                        // Get all accounts for the current user
                                        fun getAccounts(): Flow<Result<List<Account>>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                val snapshot = firestore.collection("accounts")
                                                    .whereEqualTo("user_id", userId)
                                                    .get()
                                                    .await()
                                    
                                                val accounts = snapshot.documents.mapNotNull { doc ->
                                                    Account(
                                                        id = doc.id,
                                                        name = doc.getString("name") ?: return@mapNotNull null,
                                                        type = "Debit",
                                                        amount = doc.getLong("amount") ?: 0L,
                                                        color = getColorForAccount(doc.getString("name") ?: "")
                                                    )
                                                }
                                                emit(Result.success(accounts))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error fetching accounts", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Create a new account
                                        fun createAccount(accountType: String): Flow<Result<Unit>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                firestore.collection("accounts").add(
                                                    mapOf(
                                                        "name" to accountType,
                                                        "amount" to 0L,
                                                        "user_id" to userId
                                                    )
                                                ).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error creating account", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Delete an account
                                        fun deleteAccount(accountId: String): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountRef = firestore.collection("accounts").document(accountId)
                                                val transactionsSnapshot = accountRef.collection("transactions").get().await()
                                    
                                                firestore.runTransaction { transaction ->
                                                    for (transactionDoc in transactionsSnapshot.documents) {
                                                        transaction.delete(transactionDoc.reference)
                                                    }
                                                    transaction.delete(accountRef)
                                                }.await()
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error deleting account", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Update account balance
                                        suspend fun updateAccountBalance(accountId: String, amountDelta: Long) {
                                            val accountRef = firestore.collection("accounts").document(accountId)
                                    
                                            firestore.runTransaction { transactionObj ->
                                                val account = transactionObj.get(accountRef)
                                                val currentBalance = account.getLong("amount") ?: 0L
                                                transactionObj.update(accountRef, "amount", currentBalance + amountDelta)
                                            }.await()
                                        }
                                    
                                        // Get color for accounts
                                        private fun getColorForAccount(accountName: String): Color {
                                            return when (accountName) {
                                                "Nu" -> Color(0xFF9747FF)
                                                "Bancolombia" -> Color(0xFFFFCC00)
                                                "Nequi" -> Color(0xFF8B2F87)
                                                "Lulo" -> Color(0xFFE8FF00)
                                                "Davivienda" -> Color(0xFFed1c27)
                                                "BBVA" -> Color(0xFF072146)
                                                else -> Color.Gray
                                            }
                                        }
                                    }                                    ```
                                - OffersRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.util.Log
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.model.singleton.FirebaseManager
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    
                                    class OffersRepository {
                                        private val firestore = FirebaseManager.firestore
                                    
                                        fun getOffers(): Flow<Result<List<Offer>>> = flow {
                                            try {
                                                Log.d(TAG, "Fetching offers...")
                                                val snapshot = firestore.collection("offers").get().await()
                                                val offerList = snapshot.documents.mapNotNull { doc ->
                                                    try {
                                                        doc.toObject(Offer::class.java)?.copy(id = doc.id)
                                                    } catch (e: Exception) {
                                                        Log.e(TAG, "Error deserializing document: ${doc.id} - ${e.message}")
                                                        null
                                                    }
                                                }
                                                emit(Result.success(offerList))
                                            } catch (e: Exception) {
                                                Log.e(TAG, "Error fetching offers", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getOfferById(offerId: String): Flow<Result<Offer?>> = flow {
                                            try {
                                                val doc = firestore.collection("offers").document(offerId).get().await()
                                                val offer = doc.toObject(Offer::class.java)?.copy(id = doc.id)
                                                emit(Result.success(offer))
                                            } catch (e: Exception) {
                                                Log.e(TAG, "Error fetching offer by id: $offerId", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        companion object {
                                            private const val TAG = "OffersRepository"
                                        }
                                    }                                    ```
                                - AnomalyRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.util.Log
                                    import com.isis3510.spendiq.Services.AnomalyApiService
                                    
                                    class AnomalyRepository {
                                        private val apiService = AnomalyApiService.create()
                                    
                                        suspend fun analyzeTransaction(userId: String, transactionId: String) {
                                            try {
                                                apiService.analyzeTransaction(userId, transactionId)
                                            } catch (e: Exception) {
                                                Log.e("AnomalyRepository", "Error analyzing transaction", e)
                                                // We're not handling the error since we just want to make the call
                                            }
                                        }
                                    }                                    ```
                                - AuthRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.content.Context
                                    import android.net.Uri
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.google.firebase.storage.FirebaseStorage
                                    import com.isis3510.spendiq.model.data.User
                                    import com.isis3510.spendiq.model.singleton.FirebaseManager
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    
                                    class AuthRepository(private val context: Context) {
                                        private val auth = FirebaseManager.auth
                                        private val firestore = FirebaseManager.firestore
                                        private val storage = FirebaseManager.storage
                                    
                                        fun login(email: String, password: String): Flow<Result<User>> = flow {
                                            try {
                                                val result = auth.signInWithEmailAndPassword(email, password).await()
                                                result.user?.let {
                                                    val user = User(it.uid, it.email ?: "")
                                                    emit(Result.success(user))
                                                } ?: emit(Result.failure(Exception("Login failed")))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun register(email: String, password: String, userData: Map<String, Any>): Flow<Result<User>> = flow {
                                            try {
                                                val result = auth.createUserWithEmailAndPassword(email, password).await()
                                                result.user?.let { firebaseUser ->
                                                    val user = User(firebaseUser.uid, email)
                                                    firestore.collection("users").document(user.id)
                                                        .set(userData)
                                                        .await()
                                                    emit(Result.success(user))
                                                } ?: emit(Result.failure(Exception("Registration failed")))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getCurrentUser(): User? {
                                            val firebaseUser = auth.currentUser
                                            return firebaseUser?.let { User(it.uid, it.email ?: "") }
                                        }
                                    
                                        fun logout() {
                                            auth.signOut()
                                        }
                                    
                                        fun sendEmailVerification(): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.currentUser?.sendEmailVerification()?.await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun isEmailVerified(): Boolean {
                                            return auth.currentUser?.isEmailVerified ?: false
                                        }
                                    
                                        fun reloadUser(): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.currentUser?.reload()?.await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun saveUserData(userId: String, data: Map<String, Any>): Flow<Result<Unit>> = flow {
                                            try {
                                                firestore.collection("users").document(userId).set(data).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getUserData(userId: String): Flow<Result<Map<String, Any>>> = flow {
                                            try {
                                                val snapshot = firestore.collection("users").document(userId).get().await()
                                                if (snapshot.exists()) {
                                                    emit(Result.success(snapshot.data ?: emptyMap()))
                                                } else {
                                                    emit(Result.failure(Exception("User data not found")))
                                                }
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun uploadProfileImage(uri: Uri): Flow<Result<String>> = flow {
                                            try {
                                                val user = auth.currentUser ?: throw Exception("User not authenticated")
                                                val imageRef = storage.reference.child("profile_images/${user.uid}.jpg")
                                                val uploadTask = imageRef.putFile(uri).await()
                                                val downloadUrl = uploadTask.storage.downloadUrl.await().toString()
                                    
                                                firestore.collection("users").document(user.uid)
                                                    .update("profileImageUrl", downloadUrl).await()
                                    
                                                emit(Result.success(downloadUrl))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Send password reset email
                                        fun sendPasswordResetEmail(email: String): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.sendPasswordResetEmail(email).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    }                                    ```
                                - TransactionRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.util.Log
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.singleton.FirebaseManager
                                    import kotlinx.coroutines.coroutineScope
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.launch
                                    import kotlinx.coroutines.tasks.await
                                    import com.google.firebase.Timestamp
                                    
                                    class TransactionRepository {
                                        private val auth = FirebaseManager.auth
                                        private val firestore = FirebaseManager.firestore
                                        private val anomalyRepository = AnomalyRepository()
                                        private val accountRepository = AccountRepository()
                                    
                                        companion object {
                                            private val DEFAULT_LOCATION = Location(
                                                latitude = 4.6097100,  // Bogota's coordinates
                                                longitude = -74.0817500
                                            )
                                        }
                                    
                                        // Get transactions by account name
                                        fun getTransactions(accountName: String): Flow<Result<List<Transaction>>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                val accountSnapshot = firestore.collection("accounts")
                                                    .whereEqualTo("user_id", userId)
                                                    .whereEqualTo("name", accountName)
                                                    .get()
                                                    .await()
                                    
                                                if (accountSnapshot.documents.isEmpty()) {
                                                    emit(Result.failure(Exception("Account not found")))
                                                    return@flow
                                                }
                                    
                                                val accountId = accountSnapshot.documents[0].id
                                                val transactionsSnapshot = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .get()
                                                    .await()
                                    
                                                val transactions = transactionsSnapshot.documents.mapNotNull { doc ->
                                                    parseTransactionDocument(doc, accountId)
                                                }.sortedByDescending { it.dateTime.toDate() }
                                    
                                                emit(Result.success(transactions))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error fetching transactions", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Get specific transaction
                                        fun getTransaction(accountId: String, transactionId: String): Flow<Result<Transaction>> = flow {
                                            try {
                                                val transactionDoc = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .document(transactionId)
                                                    .get()
                                                    .await()
                                    
                                                if (!transactionDoc.exists()) {
                                                    emit(Result.failure(Exception("Transaction not found")))
                                                    return@flow
                                                }
                                    
                                                val transaction = parseTransactionDocument(transactionDoc, accountId)
                                                transaction?.let {
                                                    emit(Result.success(it))
                                                } ?: emit(Result.failure(Exception("Failed to parse transaction")))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error fetching transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getAllTransactions(): Flow<Result<List<Transaction>>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                val accountsSnapshot = firestore.collection("accounts")
                                                    .whereEqualTo("user_id", userId)
                                                    .get()
                                                    .await()
                                    
                                                val transactions = mutableListOf<Transaction>()
                                    
                                                for (accountDoc in accountsSnapshot.documents) {
                                                    val accountId = accountDoc.id
                                                    val transactionsSnapshot = firestore.collection("accounts")
                                                        .document(accountId)
                                                        .collection("transactions")
                                                        .get()
                                                        .await()
                                    
                                                    transactions.addAll(transactionsSnapshot.documents.mapNotNull { doc ->
                                                        parseTransactionDocument(doc, accountId)
                                                    })
                                                }
                                    
                                                emit(Result.success(transactions))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error fetching all transactions", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Add transaction
                                        fun addTransaction(transaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountRef = firestore.collection("accounts")
                                                    .document(transaction.accountId)
                                                    .collection("transactions")
                                                    .document()
                                    
                                                val transactionWithId = transaction.copy(id = accountRef.id)
                                                val transactionMap = createTransactionMap(transactionWithId)
                                    
                                                accountRef.set(transactionMap).await()
                                    
                                                val amountDelta = if (transaction.transactionType == "Income") transaction.amount else -transaction.amount
                                                accountRepository.updateAccountBalance(transaction.accountId, amountDelta)
                                    
                                                coroutineScope {
                                                    launch {
                                                        auth.currentUser?.uid?.let { userId ->
                                                            anomalyRepository.analyzeTransaction(userId, accountRef.id)
                                                        }
                                                    }
                                                }
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error adding transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Update transaction
                                        fun updateTransaction(accountId: String, oldTransaction: Transaction, newTransaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val transactionRef = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .document(oldTransaction.id)
                                    
                                                if (!(transactionRef.get().await().exists())) {
                                                    emit(Result.failure(Exception("Transaction does not exist")))
                                                    return@flow
                                                }
                                    
                                                val oldAmount = if (oldTransaction.transactionType == "Income") oldTransaction.amount else -oldTransaction.amount
                                                val newAmount = if (newTransaction.transactionType == "Income") newTransaction.amount else -newTransaction.amount
                                                val balanceAdjustment = newAmount - oldAmount
                                    
                                                transactionRef.set(createTransactionMap(newTransaction)).await()
                                                accountRepository.updateAccountBalance(accountId, balanceAdjustment)
                                    
                                                coroutineScope {
                                                    launch {
                                                        auth.currentUser?.uid?.let { userId ->
                                                            anomalyRepository.analyzeTransaction(userId, newTransaction.id)
                                                        }
                                                    }
                                                }
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error updating transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Delete transaction
                                        fun deleteTransaction(accountId: String, transaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val transactionRef = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .document(transaction.id)
                                    
                                                transactionRef.delete().await()
                                    
                                                val amountToRemove = if (transaction.transactionType == "Income") -transaction.amount else transaction.amount
                                                accountRepository.updateAccountBalance(accountId, amountToRemove)
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error deleting transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        private fun parseTransactionDocument(doc: com.google.firebase.firestore.DocumentSnapshot, accountId: String): Transaction? {
                                            return try {
                                                Transaction(
                                                    id = doc.id,
                                                    accountId = accountId,
                                                    transactionName = doc.getString("transactionName") ?: return null,
                                                    amount = doc.getLong("amount") ?: return null,
                                                    dateTime = doc.getTimestamp("dateTime") ?: return null,
                                                    transactionType = doc.getString("transactionType") ?: return null,
                                                    location = doc.get("location")?.let { locationMap ->
                                                        if (locationMap is Map<*, *>) {
                                                            Location(
                                                                latitude = (locationMap["latitude"] as? Double) ?: DEFAULT_LOCATION.latitude,
                                                                longitude = (locationMap["longitude"] as? Double) ?: DEFAULT_LOCATION.longitude
                                                            )
                                                        } else null
                                                    },
                                                    amountAnomaly = doc.getBoolean("amountAnomaly") ?: false,
                                                    locationAnomaly = doc.getBoolean("locationAnomaly") ?: false,
                                                    automatic = doc.getBoolean("automatic") ?: false // Add this line
                                                )
                                            } catch (e: Exception) {
                                                Log.e("TransactionRepository", "Error parsing transaction document", e)
                                                null
                                            }
                                        }
                                    
                                        private fun createTransactionMap(transaction: Transaction): Map<String, Any?> {
                                            return hashMapOf(
                                                "transactionId" to transaction.id,
                                                "amount" to transaction.amount,
                                                "dateTime" to transaction.dateTime,
                                                "transactionName" to transaction.transactionName,
                                                "transactionType" to transaction.transactionType,
                                                "location" to transaction.location?.let {
                                                    hashMapOf(
                                                        "latitude" to it.latitude,
                                                        "longitude" to it.longitude
                                                    )
                                                },
                                                "locationAnomaly" to transaction.locationAnomaly,
                                                "amountAnomaly" to transaction.amountAnomaly,
                                                "automatic" to transaction.automatic // Add this line
                                            )
                                        }
                                    }
                                    ```
                            - **facade/**
                                - ExternalServicesFacade.kt
                                    ```
                                    package com.isis3510.spendiq.model.facade
                                    
                                    import android.content.Context
                                    import androidx.biometric.BiometricPrompt
                                    import androidx.core.content.ContextCompat
                                    import androidx.fragment.app.FragmentActivity
                                    
                                    class ExternalServicesFacade(private val context: Context) {
                                        private lateinit var biometricPrompt: BiometricPrompt
                                        private lateinit var promptInfo: BiometricPrompt.PromptInfo
                                    
                                        fun setupBiometricPrompt(activity: FragmentActivity, onSuccess: () -> Unit, onError: (String) -> Unit) {
                                            biometricPrompt = BiometricPrompt(activity, ContextCompat.getMainExecutor(context),
                                                object : BiometricPrompt.AuthenticationCallback() {
                                                    override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {
                                                        super.onAuthenticationSucceeded(result)
                                                        onSuccess()
                                                    }
                                    
                                                    override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
                                                        super.onAuthenticationError(errorCode, errString)
                                                        onError(errString.toString())
                                                    }
                                                })
                                    
                                            promptInfo = BiometricPrompt.PromptInfo.Builder()
                                                .setTitle("Biometric Authentication")
                                                .setSubtitle("Log in user your biometric sensor!")
                                                .setNegativeButtonText("Cancel")
                                                .build()
                                        }
                                    
                                        fun showBiometricPrompt() {
                                            biometricPrompt.authenticate(promptInfo)
                                        }
                                    }                                    ```
                                - LDServicesFacade.kt
                                    ```
                                    package com.isis3510.spendiq.model.facade
                                    
                                    import android.app.Application
                                    import android.content.Context
                                    import android.content.SharedPreferences
                                    import android.util.Base64
                                    import androidx.security.crypto.EncryptedSharedPreferences
                                    import androidx.security.crypto.MasterKey
                                    import javax.crypto.AEADBadTagException
                                    
                                    class LDServicesFacade(private val context: Context) {
                                        private val encryptedPrefs by lazy { createEncryptedSharedPreferences() }
                                        // Store credentials securely for biometric login
                                        fun storeCredentials(email: String, password: String) {
                                            val encryptedEmail = Base64.encodeToString(email.toByteArray(), Base64.DEFAULT)
                                            val encryptedPassword = Base64.encodeToString(password.toByteArray(), Base64.DEFAULT)
                                            encryptedPrefs.edit().apply {
                                                putString("user_email", encryptedEmail)
                                                putString("user_password", encryptedPassword)
                                                apply()
                                            }
                                        }
                                    
                                        fun getEncryptedEmail(): String? {
                                            return encryptedPrefs.getString("user_email", null)
                                        }
                                    
                                        fun getEncryptedPassword(): String? {
                                            return encryptedPrefs.getString("user_password", null)
                                        }
                                    
                                        // Create encrypted SharedPreferences to store biometric login credentials
                                        private fun createEncryptedSharedPreferences(): SharedPreferences {
                                            return try {
                                                val masterKey = MasterKey.Builder(context)
                                                    .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
                                                    .build()
                                    
                                                EncryptedSharedPreferences.create(
                                                    context,
                                                    "secret_shared_prefs",
                                                    masterKey,
                                                    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                                                    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                                                )
                                            } catch (e: AEADBadTagException) {
                                                // Handle AEADBadTagException by recreating the SharedPreferences
                                                context.getSharedPreferences("secret_shared_prefs", Context.MODE_PRIVATE).edit().clear().apply()
                                                val newMasterKey = MasterKey.Builder(context)
                                                    .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
                                                    .build()
                                    
                                                EncryptedSharedPreferences.create(
                                                    context,
                                                    "secret_shared_prefs",
                                                    newMasterKey,
                                                    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                                                    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                                                )
                                            }
                                        }
                                    }                                    ```
                            - **singleton/**
                                - FirebaseManager.kt
                                    ```
                                    package com.isis3510.spendiq.model.singleton
                                    
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.google.firebase.storage.FirebaseStorage
                                    
                                    object FirebaseManager {
                                        val auth: FirebaseAuth by lazy { FirebaseAuth.getInstance() }
                                        val firestore: FirebaseFirestore by lazy { FirebaseFirestore.getInstance() }
                                        val storage: FirebaseStorage by lazy { FirebaseStorage.getInstance() }
                                    }                                    ```
                            - **data/**
                                - Account.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import androidx.compose.ui.graphics.Color
                                    
                                    data class Account(
                                        val id: String,
                                        val name: String,
                                        val type: String,
                                        val amount: Long,
                                        val color: Color
                                    )                                    ```
                                - Offer.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    data class Offer(
                                        val id: String? = null,
                                        val placeName: String? = null,
                                        val offerDescription: String? = null,
                                        val shopImage: String? = null,
                                        val recommendationReason: String? = null,
                                        val latitude: Double? = null,
                                        val longitude: Double? = null,
                                        val distance: Int? = null
                                    )                                    ```
                                - Promo.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import java.util.Date
                                    
                                    data class Promo(
                                        val id: String,
                                        val title: String,
                                        val description: String,
                                        val imageUrl: String,
                                        val discountCode: String,
                                        val restaurantName: String,
                                        val expirationDate: Date
                                    )                                    ```
                                - User.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    data class User(
                                        val id: String,
                                        val email: String,
                                        val fullName: String? = null,
                                        val phoneNumber: String? = null,
                                        val birthDate: String? = null,
                                        val profileImageUrl: String? = null
                                    )                                    ```
                                - Transaction.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import com.google.firebase.Timestamp
                                    
                                    data class Transaction(
                                        val id: String,
                                        val accountId: String,
                                        val transactionName: String,
                                        val amount: Long,
                                        val dateTime: Timestamp,
                                        val transactionType: String,
                                        val location: Location?,
                                        val amountAnomaly: Boolean = false,
                                        val locationAnomaly: Boolean = false,
                                        val automatic: Boolean = false
                                    )
                                    
                                    data class Location(
                                        val latitude: Double,
                                        val longitude: Double
                                    )
                                    ```
                        - **views/**
                            - **transaction/**
                                - AddTransactionModal.kt
                                    ```
                                    package com.isis3510.spendiq.views.transaction
                                    
                                    import android.app.DatePickerDialog
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.google.firebase.Timestamp
                                    import kotlinx.coroutines.launch
                                    import java.util.*
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.services.LocationService
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AddTransactionModal(
                                        accountViewModel: AccountViewModel,
                                        transactionViewModel: TransactionViewModel,
                                        onDismiss: () -> Unit,
                                        onTransactionAdded: () -> Unit
                                    ) {
                                        // State variables for form fields
                                        var amount by remember { mutableStateOf("") }
                                        var transactionName by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf(Timestamp.now()) }
                                        var selectedTransactionType by remember { mutableStateOf("Expense") }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var selectedAccount by remember { mutableStateOf<Account?>(null) }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                        var showNoAccountsDialog by remember { mutableStateOf(false) }
                                        var isLocationEnabled by remember { mutableStateOf(false) }
                                        var location by remember { mutableStateOf<android.location.Location?>(null) }
                                    
                                        // Collect accounts from ViewModel
                                        val accounts by accountViewModel.accounts.collectAsState()
                                    
                                        // Context and services
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                        val locationService = remember { LocationService(context) }
                                        val scope = rememberCoroutineScope()
                                    
                                        // Initialize date picker dialog
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            calendar.get(Calendar.YEAR),
                                            calendar.get(Calendar.MONTH),
                                            calendar.get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        // No accounts dialog
                                        if (showNoAccountsDialog) {
                                            AlertDialog(
                                                onDismissRequest = { showNoAccountsDialog = false },
                                                title = { Text("No Accounts Available") },
                                                text = { Text("Please create an account first in the Accounts section before making a transaction.") },
                                                confirmButton = {
                                                    Button(onClick = { showNoAccountsDialog = false }) {
                                                        Text("OK")
                                                    }
                                                }
                                            )
                                        }
                                    
                                        // Check for accounts availability
                                        LaunchedEffect(Unit) {
                                            if (accounts.isEmpty()) {
                                                showNoAccountsDialog = true
                                            }
                                        }
                                    
                                        ModalBottomSheet(
                                            onDismissRequest = onDismiss
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Add Transaction", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Amount field
                                                OutlinedTextField(
                                                    value = amount,
                                                    onValueChange = { amount = it.filter { char -> char.isDigit() } },
                                                    label = { Text("Amount") },
                                                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                                    modifier = Modifier.fillMaxWidth(),
                                                    singleLine = true
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                // Transaction name field
                                                OutlinedTextField(
                                                    value = transactionName,
                                                    onValueChange = { transactionName = it },
                                                    label = { Text("Transaction Name") },
                                                    modifier = Modifier.fillMaxWidth(),
                                                    singleLine = true
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                // Date selector
                                                Button(onClick = { datePickerDialog.show() }) {
                                                    Text("Select Date: ${selectedDate.toDate().toString().substring(0, 10)}")
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                // Transaction type dropdown
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedTransactionType,
                                                    onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                ) {
                                                    TextField(
                                                        value = selectedTransactionType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        label = { Text("Transaction Type") },
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedTransactionType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedTransactionType,
                                                        onDismissRequest = { expandedTransactionType = false }
                                                    ) {
                                                        DropdownMenuItem(
                                                            text = { Text("Income") },
                                                            onClick = {
                                                                selectedTransactionType = "Income"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                        DropdownMenuItem(
                                                            text = { Text("Expense") },
                                                            onClick = {
                                                                selectedTransactionType = "Expense"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                if (accounts.isNotEmpty()) {
                                                    // Account selection dropdown
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedAccountType,
                                                        onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                    ) {
                                                        TextField(
                                                            value = selectedAccount?.name ?: "",
                                                            onValueChange = {},
                                                            readOnly = true,
                                                            label = { Text("Select Account") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedAccountType,
                                                            onDismissRequest = { expandedAccountType = false }
                                                        ) {
                                                            accounts.forEach { account ->
                                                                DropdownMenuItem(
                                                                    text = { Text(account.name) },
                                                                    onClick = {
                                                                        selectedAccount = account
                                                                        expandedAccountType = false
                                                                    }
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(8.dp))
                                    
                                                    // Location toggle
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        Icon(
                                                            imageVector = Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = if (isLocationEnabled) MaterialTheme.colorScheme.primary else Color.Gray
                                                        )
                                                        Spacer(modifier = Modifier.width(8.dp))
                                                        Text("Include Location")
                                                        Spacer(modifier = Modifier.weight(1f))
                                                        Switch(
                                                            checked = isLocationEnabled,
                                                            onCheckedChange = { enabled ->
                                                                isLocationEnabled = enabled
                                                                if (enabled) {
                                                                    scope.launch {
                                                                        location = locationService.getCurrentLocation()
                                                                    }
                                                                } else {
                                                                    location = null
                                                                }
                                                            }
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Submit button
                                                    Button(
                                                        onClick = {
                                                            selectedAccount?.let { account ->
                                                                val transaction = Transaction(
                                                                    id = "", // This will be set by Firestore
                                                                    accountId = account.id, // Using account ID instead of name
                                                                    transactionName = transactionName,
                                                                    amount = amount.toLongOrNull() ?: 0L,
                                                                    dateTime = selectedDate,
                                                                    transactionType = selectedTransactionType,
                                                                    location = if (isLocationEnabled && location != null) {
                                                                        Location(
                                                                            latitude = location!!.latitude,
                                                                            longitude = location!!.longitude
                                                                        )
                                                                    } else null,
                                                                    automatic = false, // Add this line to explicitly set manual transactions
                                                                    amountAnomaly = false,
                                                                    locationAnomaly = false
                                                                )
                                                                transactionViewModel.addTransactionWithAccountCheck(transaction)
                                                                onTransactionAdded()
                                                                onDismiss()
                                                            }
                                                        },
                                                        enabled = amount.isNotEmpty() &&
                                                                transactionName.isNotEmpty() &&
                                                                selectedAccount != null,
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text("Add Transaction")
                                                    }
                                                } else {
                                                    // No accounts message
                                                    Text(
                                                        "No accounts available. Please create an account first.",
                                                        style = MaterialTheme.typography.bodyMedium,
                                                        color = MaterialTheme.colorScheme.error,
                                                        modifier = Modifier.padding(vertical = 16.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }                                    ```
                            - **settings/**
                                - settingsMainView.kt
                                    ```
                                    package com.isis3510.spendiq.views.settings
                                    // epic                                    ```
                            - **offers/**
                                - OffersScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.offers
                                    
                                    import android.Manifest
                                    import android.content.Context
                                    import android.content.Intent
                                    import android.location.Location
                                    import android.net.Uri
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import coil.compose.AsyncImage
                                    import com.google.android.gms.location.LocationServices
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.OffersViewModel
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import kotlinx.coroutines.launch
                                    import android.content.pm.PackageManager
                                    import androidx.activity.compose.rememberLauncherForActivityResult
                                    import androidx.activity.result.contract.ActivityResultContracts
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.core.content.ContextCompat
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import kotlinx.coroutines.tasks.await
                                    import java.text.DecimalFormat
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun OffersScreen(
                                        navController: NavController,
                                        viewModel: OffersViewModel,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel
                                    ) {
                                        val context = LocalContext.current
                                        val scope = rememberCoroutineScope()
                                        val offers by viewModel.offers.collectAsState()
                                        var currentLocation by remember { mutableStateOf<Location?>(null) }
                                        var sortedOffers by remember { mutableStateOf<List<Pair<Offer, Float?>>>(emptyList()) }
                                    
                                        var hasLocationPermission by remember {
                                            mutableStateOf(
                                                ContextCompat.checkSelfPermission(
                                                    context,
                                                    Manifest.permission.ACCESS_FINE_LOCATION
                                                ) == PackageManager.PERMISSION_GRANTED
                                            )
                                        }
                                    
                                        val locationPermissionLauncher = rememberLauncherForActivityResult(
                                            ActivityResultContracts.RequestPermission()
                                        ) { isGranted ->
                                            hasLocationPermission = isGranted
                                            if (isGranted) {
                                                scope.launch {
                                                    getCurrentLocation(context)?.let { location ->
                                                        currentLocation = location
                                                        sortedOffers = sortOffersByDistance(offers, location)
                                                    }
                                                }
                                            }
                                        }
                                    
                                        LaunchedEffect(Unit) {
                                            viewModel.fetchOffers()
                                            if (hasLocationPermission) {
                                                getCurrentLocation(context)?.let { location ->
                                                    currentLocation = location
                                                    sortedOffers = sortOffersByDistance(offers, location)
                                                }
                                            } else {
                                                locationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
                                            }
                                        }
                                    
                                        LaunchedEffect(offers, currentLocation) {
                                            sortedOffers = sortOffersByDistance(offers, currentLocation)
                                        }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Special Sales in your Area") },
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(navController = navController, transactionViewModel = transactionViewModel, accountViewModel)
                                            }
                                        ) { paddingValues ->
                                            Box(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(paddingValues)
                                            ) {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxSize()
                                                        .padding(horizontal = 16.dp)
                                                ) {
                                                    if (!hasLocationPermission) {
                                                        LocationPermissionCard(
                                                            onEnableClick = {
                                                                locationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
                                                            }
                                                        )
                                                    }
                                    
                                                    Text(
                                                        "Based on the shops where you have purchased before, we think these sales near to your location may interest you",
                                                        fontSize = 14.sp,
                                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                                                        modifier = Modifier.padding(vertical = 8.dp)
                                                    )
                                    
                                                    LazyColumn(
                                                        verticalArrangement = Arrangement.spacedBy(16.dp),
                                                        contentPadding = PaddingValues(vertical = 8.dp)
                                                    ) {
                                                        items(sortedOffers) { (offer, distance) ->
                                                            OfferCard(
                                                                offer = offer,
                                                                distance = distance,
                                                                onClick = {
                                                                    offer.id?.let { id ->
                                                                        navController.navigate("specialSalesDetail/$id")
                                                                    }
                                                                }
                                                            )
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    private fun LocationPermissionCard(onEnableClick: () -> Unit) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(vertical = 8.dp),
                                            colors = CardDefaults.cardColors(
                                                containerColor = MaterialTheme.colorScheme.errorContainer
                                            )
                                        ) {
                                            Row(
                                                modifier = Modifier
                                                    .padding(16.dp)
                                                    .fillMaxWidth(),
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Icon(
                                                    Icons.Default.LocationOn,
                                                    contentDescription = "Location",
                                                    tint = MaterialTheme.colorScheme.error
                                                )
                                                Spacer(modifier = Modifier.width(8.dp))
                                                Text(
                                                    "Enable location for better offers",
                                                    color = MaterialTheme.colorScheme.error,
                                                    modifier = Modifier.weight(1f)
                                                )
                                                TextButton(onClick = onEnableClick) {
                                                    Text("Enable")
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun OfferCard(offer: Offer, distance: Float?, onClick: () -> Unit) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable(onClick = onClick),
                                            shape = RoundedCornerShape(12.dp),
                                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                                        ) {
                                            Column {
                                                // Store Image
                                                offer.shopImage?.let { imageUrl ->
                                                    AsyncImage(
                                                        model = imageUrl,
                                                        contentDescription = "Store Image",
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(180.dp),
                                                        contentScale = ContentScale.Crop
                                                    )
                                                }
                                    
                                                Column(
                                                    modifier = Modifier.padding(16.dp)
                                                ) {
                                                    // Store Name and Distance
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        horizontalArrangement = Arrangement.SpaceBetween,
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        offer.placeName?.let {
                                                            Text(
                                                                text = it,
                                                                fontSize = 18.sp,
                                                                fontWeight = FontWeight.Bold
                                                            )
                                                        }
                                    
                                                        distance?.let {
                                                            Surface(
                                                                color = MaterialTheme.colorScheme.primaryContainer,
                                                                shape = RoundedCornerShape(16.dp)
                                                            ) {
                                                                Text(
                                                                    text = "${formatDistance(it)} away",
                                                                    modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp),
                                                                    fontSize = 12.sp
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(8.dp))
                                    
                                                    // Offer Description
                                                    offer.offerDescription?.let {
                                                        Text(
                                                            text = it,
                                                            fontSize = 14.sp,
                                                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                                                            modifier = Modifier.fillMaxWidth()
                                                        )
                                                    }
                                    
                                    //                offer.recommendationReason?.let {
                                    //                    Spacer(modifier = Modifier.height(8.dp))
                                    //                    Text(
                                    //                        text = it,
                                    //                        fontSize = 12.sp,
                                    //                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),
                                    //                        textAlign = TextAlign.Start
                                    //                    )
                                    //                }
                                                }
                                            }
                                        }
                                    }
                                    
                                    private suspend fun getCurrentLocation(context: Context): Location? {
                                        return try {
                                            val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)
                                            if (ContextCompat.checkSelfPermission(
                                                    context,
                                                    Manifest.permission.ACCESS_FINE_LOCATION
                                                ) == PackageManager.PERMISSION_GRANTED
                                            ) {
                                                fusedLocationClient.lastLocation.await()
                                            } else null
                                        } catch (e: Exception) {
                                            null
                                        }
                                    }
                                    
                                    private fun sortOffersByDistance(offers: List<Offer>, currentLocation: Location?): List<Pair<Offer, Float?>> {
                                        return offers.map { offer ->
                                            if (currentLocation != null && offer.latitude != null && offer.longitude != null) {
                                                val offerLocation = Location("").apply {
                                                    latitude = offer.latitude
                                                    longitude = offer.longitude
                                                }
                                                val distance = currentLocation.distanceTo(offerLocation)
                                                offer to distance
                                            } else {
                                                offer to null
                                            }
                                        }.sortedBy { it.second ?: Float.MAX_VALUE }
                                    }
                                    
                                    private fun formatDistance(meters: Float): String {
                                        val df = DecimalFormat("#.#")
                                        return when {
                                            meters < 1000 -> "${df.format(meters)}m"
                                            else -> "${df.format(meters / 1000)}km"
                                        }
                                    }                                    ```
                                - SpecialSalesDetail.kt
                                    ```
                                    package com.isis3510.spendiq.views.offers
                                    
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import coil.compose.AsyncImage
                                    import com.google.android.gms.maps.model.CameraPosition
                                    import com.google.android.gms.maps.model.LatLng
                                    import com.google.maps.android.compose.*
                                    import com.isis3510.spendiq.model.data.Offer
                                    import androidx.navigation.NavController
                                    import android.content.Intent
                                    import android.net.Uri
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.style.TextAlign
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun SpecialSalesDetail(
                                        offer: Offer,
                                        navController: NavController
                                    ) {
                                        val context = LocalContext.current
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Special Sales") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, "Back")
                                                        }
                                                    }
                                                )
                                            }
                                        ) { padding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(padding)
                                                    .verticalScroll(rememberScrollState())
                                            ) {
                                                // Store Logo and Name
                                                offer.shopImage?.let { imageUrl ->
                                                    AsyncImage(
                                                        model = imageUrl,
                                                        contentDescription = "Store Image",
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(200.dp),
                                                        contentScale = ContentScale.Crop
                                                    )
                                                }
                                    
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(16.dp)
                                                ) {
                                                    offer.placeName?.let {
                                                        Text(
                                                            text = it,
                                                            fontSize = 24.sp,
                                                            fontWeight = FontWeight.Bold
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Map
                                                    if (offer.latitude != null && offer.longitude != null) {
                                                        Card(
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .height(200.dp)
                                                        ) {
                                                            GoogleMap(
                                                                modifier = Modifier.fillMaxSize(),
                                                                cameraPositionState = rememberCameraPositionState {
                                                                    position = CameraPosition.fromLatLngZoom(
                                                                        LatLng(offer.latitude, offer.longitude),
                                                                        15f
                                                                    )
                                                                }
                                                            ) {
                                                                Marker(
                                                                    state = MarkerState(position = LatLng(offer.latitude, offer.longitude)),
                                                                    title = offer.placeName
                                                                )
                                                            }
                                                        }
                                    
                                                        Spacer(modifier = Modifier.height(16.dp))
                                    
                                                        Button(
                                                            onClick = {
                                                                val uri = Uri.parse("geo:${offer.latitude},${offer.longitude}?q=${offer.latitude},${offer.longitude}(${offer.placeName})")
                                                                val mapIntent = Intent(Intent.ACTION_VIEW, uri)
                                                                mapIntent.setPackage("com.google.android.apps.maps")
                                                                if (mapIntent.resolveActivity(context.packageManager) != null) {
                                                                    context.startActivity(mapIntent)
                                                                }
                                                            },
                                                            modifier = Modifier.fillMaxWidth()
                                                        ) {
                                                            Icon(Icons.Default.LocationOn, contentDescription = null)
                                                            Spacer(modifier = Modifier.width(8.dp))
                                                            Text("Open in Maps")
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    // Sales Section
                                                    Text(
                                                        text = "Sales",
                                                        fontSize = 20.sp,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(8.dp))
                                    
                                                    offer.offerDescription?.let {
                                                        Text(
                                                            text = it,
                                                            fontSize = 16.sp,
                                                            textAlign = TextAlign.Start,
                                                            modifier = Modifier.fillMaxWidth()
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Recommendation reason in a card
                                                    offer.recommendationReason?.let {
                                                        Card(
                                                            modifier = Modifier.fillMaxWidth(),
                                                            colors = CardDefaults.cardColors(
                                                                containerColor = MaterialTheme.colorScheme.primaryContainer
                                                            )
                                                        ) {
                                                            Text(
                                                                text = "Recommended because: $it",
                                                                modifier = Modifier.padding(16.dp),
                                                                color = MaterialTheme.colorScheme.onPrimaryContainer
                                                            )
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }                                    ```
                            - **splash/**
                                - SplashScreen.kt
                                    ```
                                    package com.isis3510.spendiq.view.splash
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material3.CircularProgressIndicator
                                    import androidx.compose.material3.Text
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.runtime.LaunchedEffect
                                    import androidx.compose.runtime.collectAsState
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    
                                    @Composable
                                    fun SplashScreen(navController: NavController, viewModel: AuthViewModel) {
                                        val authState = viewModel.authState.collectAsState()
                                    
                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                            when (authState.value) {
                                                AuthState.Loading -> {
                                                    // Show a loading screen
                                                    CircularProgressIndicator()
                                                    Text(text = "Loading...", modifier = Modifier.align(Alignment.BottomCenter))
                                                }
                                                else -> {
                                                    // Fallback UI while waiting for a state change
                                                    CircularProgressIndicator()
                                                }
                                            }
                                        }
                                    
                                        LaunchedEffect(authState.value) {
                                            when (authState.value) {
                                                is AuthState.Authenticated -> navController.navigate("main") {
                                                    popUpTo("splash") { inclusive = true }
                                                }
                                                is AuthState.EmailVerified -> {
                                                    // Navigate to main if email is verified
                                                    navController.navigate("main") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.EmailNotVerified -> {
                                                    // Navigate to authentication if email is not verified
                                                    navController.navigate("authentication") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.EmailVerificationSent -> {
                                                    // Navigate to authentication after email verification is sent
                                                    navController.navigate("authentication") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.Error,
                                                AuthState.Idle,
                                                AuthState.BiometricEnabled -> navController.navigate("authentication") {
                                                    popUpTo("splash") { inclusive = true }
                                                }
                                                AuthState.Loading -> {
                                                    // Do nothing while loading
                                                }
                                                AuthState.BiometricAlreadyEnabled -> navController.navigate("authentication") {
                                                    popUpTo("splash") { inclusive = true }
                                                }
                                                AuthState.PasswordResetEmailSent -> TODO()
                                            }
                                        }
                                    }                                    ```
                            - MainActivity.kt
                                ```
                                package com.isis3510.spendiq.views
                                
                                import ConnectivityViewModel
                                import android.Manifest
                                import android.content.Intent
                                import android.content.pm.PackageManager
                                import android.os.Build
                                import android.os.Bundle
                                import android.provider.Settings
                                import android.util.Log
                                import androidx.activity.compose.setContent
                                import androidx.activity.result.contract.ActivityResultContracts
                                import androidx.annotation.RequiresApi
                                import androidx.compose.foundation.layout.*
                                import androidx.compose.material3.*
                                import androidx.compose.runtime.*
                                import androidx.compose.ui.Alignment
                                import androidx.compose.ui.Modifier
                                import androidx.compose.ui.unit.dp
                                import androidx.core.content.ContextCompat
                                import androidx.fragment.app.FragmentActivity
                                import androidx.lifecycle.viewmodel.compose.viewModel
                                import androidx.navigation.NavType
                                import androidx.navigation.compose.NavHost
                                import androidx.navigation.compose.composable
                                import androidx.navigation.compose.rememberNavController
                                import androidx.navigation.navArgument
                                import com.isis3510.spendiq.view.accounts.AccountsScreen
                                import com.isis3510.spendiq.views.main.MainContent
                                import com.isis3510.spendiq.view.splash.SplashScreen
                                import com.isis3510.spendiq.views.auth.AuthenticationScreen
                                import com.isis3510.spendiq.views.auth.LoginScreen
                                import com.isis3510.spendiq.views.auth.RegisterScreen
                                import com.isis3510.spendiq.views.profile.ProfileScreen
                                import com.isis3510.spendiq.views.profile.ProfileAccountScreen
                                import com.isis3510.spendiq.views.profile.ProfileHelpScreen
                                import com.isis3510.spendiq.views.profile.ProfileInfoScreen
                                import com.isis3510.spendiq.views.profile.ProfileLaGScreen
                                import com.isis3510.spendiq.views.profile.ProfileNotificationsScreen
                                import com.isis3510.spendiq.views.profile.ProfileStatisticsScreen
                                import com.isis3510.spendiq.views.theme.SpendiQTheme
                                import com.isis3510.spendiq.viewmodel.AccountViewModel
                                import com.isis3510.spendiq.viewmodel.AuthViewModel
                                import com.isis3510.spendiq.viewmodel.OffersViewModel
                                import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                import com.isis3510.spendiq.viewmodel.ProfileViewModel
                                import UserViewModel
                                import com.isis3510.spendiq.views.accounts.AccountTransactionsScreen
                                import com.isis3510.spendiq.views.accounts.TransactionDetailsScreen
                                import com.isis3510.spendiq.views.offers.OffersScreen
                                import com.isis3510.spendiq.views.offers.SpecialSalesDetail
                                import com.isis3510.spendiq.views.profile.ProfileSecurityScreen
                                
                                class MainActivity : FragmentActivity() {
                                    companion object {
                                        private const val TAG = "MainActivity"
                                    }
                                
                                    // Permissions required for the app
                                    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
                                    private val REQUIRED_PERMISSIONS = arrayOf(
                                        Manifest.permission.ACCESS_FINE_LOCATION,
                                        Manifest.permission.POST_NOTIFICATIONS
                                    )
                                
                                    // Location permission launcher
                                    private val requestPermissionLauncher = registerForActivityResult(
                                        ActivityResultContracts.RequestMultiplePermissions()
                                    ) { permissions ->
                                        if (permissions.all { it.value }) {
                                            Log.d(TAG, "All required permissions granted")
                                        } else {
                                            Log.d(TAG, "Some permissions were denied")
                                        }
                                    }
                                
                                    // Launcher for location permission request
                                    private val requestLocationPermissionLauncher =
                                        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
                                            if (isGranted) {
                                                Log.d(TAG, "Location permission granted")
                                            } else {
                                                Log.d(TAG, "Location permission denied")
                                            }
                                        }
                                
                                    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
                                    override fun onCreate(savedInstanceState: Bundle?) {
                                        super.onCreate(savedInstanceState)
                                
                                        // Check if notifications service is enabled, if not, request
                                        if (!isNotificationServiceEnabled()) {
                                            requestNotificationPermission()
                                        }
                                
                                        // Request location permission
                                        requestLocationPermission()
                                
                                        // Check and request permissions if needed
                                        if (!hasRequiredPermissions()) {
                                            requestPermissionLauncher.launch(REQUIRED_PERMISSIONS)
                                        }
                                
                                        // Initialize the content view with Jetpack Compose and navigation
                                        setContent {
                                            SpendiQTheme {
                                                Surface(
                                                    modifier = Modifier.fillMaxSize(),
                                                    color = MaterialTheme.colorScheme.background
                                                ) {
                                                    val navController = rememberNavController()
                                                    val authViewModel: AuthViewModel = viewModel()
                                                    val accountViewModel: AccountViewModel = viewModel()
                                                    val transactionViewModel: TransactionViewModel = viewModel()
                                                    val offersViewModel: OffersViewModel = viewModel()
                                                    val profileViewModel: ProfileViewModel = viewModel()
                                                    val userViewModel: UserViewModel = viewModel()
                                                    val connectivityViewModel: ConnectivityViewModel = viewModel()
                                                    val userData by userViewModel.userData.collectAsState()
                                
                                
                                                    NavHost(navController = navController, startDestination = "splash") {
                                                        composable("splash") {
                                                            SplashScreen(navController, authViewModel)
                                                        }
                                                        composable("authentication") {
                                                            AuthenticationScreen(navController)
                                                        }
                                                        composable("login") {
                                                            LoginScreen(navController, authViewModel, connectivityViewModel)
                                                        }
                                                        composable("register") {
                                                            RegisterScreen(navController, authViewModel)
                                                        }
                                                        composable("main") {
                                                            MainContent(navController, authViewModel, accountViewModel, offersViewModel, transactionViewModel)
                                                        }
                                                        composable("promos") {
                                                            OffersScreen(navController, offersViewModel, transactionViewModel, accountViewModel)
                                                        }
                                                        composable("profile") {
                                                            ProfileScreen(navController, authViewModel, transactionViewModel, accountViewModel, profileViewModel)
                                                        }
                                                        composable("accounts") {
                                                            AccountsScreen(navController, accountViewModel, transactionViewModel)
                                                        }
                                                        composable("profileNotificationsScreen") {
                                                            ProfileNotificationsScreen(navController)
                                                        }
                                                        composable("profileSecurityScreen") {
                                                            ProfileSecurityScreen(navController, transactionViewModel, accountViewModel)
                                                        }
                                                        composable("profileAccountScreen") {
                                                            ProfileAccountScreen(navController, userData, transactionViewModel, accountViewModel)
                                                        }
                                                        composable("profileLaGScreen") {
                                                            ProfileLaGScreen(navController, transactionViewModel, accountViewModel)
                                                        }
                                                        composable("profileStatisticsScreen") {
                                                            ProfileStatisticsScreen(navController, transactionViewModel, accountViewModel)
                                                        }
                                                        composable("profileHelpScreen") {
                                                            ProfileHelpScreen(navController)
                                                        }
                                                        composable("profileInfoScreen") {
                                                            ProfileInfoScreen(navController)
                                                        }
                                                        composable(
                                                            route = "accountTransactions/{accountId}",
                                                            arguments = listOf(navArgument("accountId") { type = NavType.StringType })
                                                        ) { backStackEntry ->
                                                            AccountTransactionsScreen(
                                                                navController,
                                                                backStackEntry.arguments?.getString("accountId") ?: ""
                                                            )
                                                        }
                                                        composable(
                                                            route = "specialSalesDetail/{offerId}",
                                                            arguments = listOf(navArgument("offerId") { type = NavType.StringType })
                                                        ) { backStackEntry ->
                                                            val offerId = backStackEntry.arguments?.getString("offerId")
                                                            if (offerId != null) {
                                                                LaunchedEffect(offerId) {
                                                                    offersViewModel.getOfferById(offerId)
                                                                }
                                
                                                                val selectedOffer by offersViewModel.selectedOffer.collectAsState()
                                                                val uiState by offersViewModel.uiState.collectAsState()
                                
                                                                when (uiState) {
                                                                    is OffersViewModel.UiState.Loading -> {
                                                                        Box(modifier = Modifier.fillMaxSize()) {
                                                                            CircularProgressIndicator(
                                                                                modifier = Modifier.align(Alignment.Center)
                                                                            )
                                                                        }
                                                                    }
                                                                    is OffersViewModel.UiState.Error -> {
                                                                        Box(
                                                                            modifier = Modifier
                                                                                .fillMaxSize()
                                                                                .padding(16.dp)
                                                                        ) {
                                                                            Text(
                                                                                text = (uiState as OffersViewModel.UiState.Error).message,
                                                                                modifier = Modifier.align(Alignment.Center)
                                                                            )
                                                                        }
                                                                    }
                                                                    is OffersViewModel.UiState.Success -> {
                                                                        selectedOffer?.let { offer ->
                                                                            SpecialSalesDetail(
                                                                                offer = offer,
                                                                                navController = navController
                                                                            )
                                                                        }
                                                                    }
                                                                    else -> { }
                                                                }
                                                            }
                                                        }
                                                        composable(
                                                            route = "transactionDetails/{accountId}/{transactionId}",
                                                            arguments = listOf(
                                                                navArgument("accountId") { type = NavType.StringType },
                                                                navArgument("transactionId") { type = NavType.StringType }
                                                            )
                                                        ) { backStackEntry ->
                                                            val accountId = backStackEntry.arguments?.getString("accountId") ?: ""
                                                            val transactionId = backStackEntry.arguments?.getString("transactionId") ?: ""
                                                            TransactionDetailsScreen(
                                                                navController = navController,
                                                                accountViewModel = accountViewModel,
                                                                accountId = accountId,
                                                                transactionId = transactionId,
                                                                transactionViewModel = transactionViewModel
                                                            )
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    // Function to check if all required permissions are granted
                                    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
                                    private fun hasRequiredPermissions(): Boolean {
                                        return REQUIRED_PERMISSIONS.all {
                                            ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_GRANTED
                                        }
                                    }
                                
                                    // Function to request notification listener permission
                                    private fun requestNotificationPermission() {
                                        val intent = Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS)
                                        startActivity(intent)
                                    }
                                
                                    // Function to check if notification service is enabled
                                    private fun isNotificationServiceEnabled(): Boolean {
                                        val packageName = applicationContext.packageName
                                        val enabledListeners = Settings.Secure.getString(contentResolver, "enabled_notification_listeners")
                                        return enabledListeners?.contains(packageName) == true
                                    }
                                
                                    // Function to request location permission
                                    private fun requestLocationPermission() {
                                        if (ContextCompat.checkSelfPermission(
                                                this,
                                                Manifest.permission.ACCESS_FINE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED
                                        ) {
                                            requestLocationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
                                        }
                                    }
                                }
                                ```
                            - **auth/**
                                - AuthenticationScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.Close
                                    import androidx.compose.material.icons.filled.Warning
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import com.google.firebase.crashlytics.FirebaseCrashlytics
                                    import com.isis3510.spendiq.R
                                    
                                    @Composable
                                    fun AuthenticationScreen(navController: NavController) {
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .clip(shape = RoundedCornerShape(7.dp))
                                                .background(color = Color.White)
                                        ) {
                                            // Background Logo
                                            Image(
                                                painter = painterResource(id = R.drawable.logogroupstart),
                                                contentDescription = "Logo Group",
                                                modifier = Modifier
                                                    .align(alignment = Alignment.TopStart)
                                                    .offset(x = (-63).dp, y = 376.dp)
                                                    .fillMaxWidth()
                                                    .height(470.dp)
                                            )
                                    
                                            // Column to hold the content vertically
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(horizontal = 16.dp), // Add padding to both sides
                                                horizontalAlignment = Alignment.CenterHorizontally, // Center horizontally
                                                verticalArrangement = Arrangement.Center
                                            ) {
                                                // App Title
                                                Text(
                                                    text = "SpendiQ",
                                                    color = Color.Black,
                                                    textAlign = TextAlign.Center,
                                                    style = TextStyle(
                                                        fontSize = 73.sp,
                                                        fontFamily = FontFamily.SansSerif,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                                )
                                    
                                                Spacer(modifier = Modifier.height(96.dp))
                                    
                                                Row(
                                                    verticalAlignment = Alignment.CenterVertically,
                                                    modifier = Modifier.padding(16.dp)
                                                ) {
                                                    // Bug Icon
                                                    IconButton(
                                                        onClick = {
                                                            // Simulación de un error recuperable
                                                            val crashlytics = FirebaseCrashlytics.getInstance()
                                    
                                                            try {
                                                                // Simular una operación que produce un error recuperable
                                                                throw Exception("Simulated recoverable error: Validation failed")
                                                            } catch (e: Exception) {
                                                                // Registrar la excepción no fatal en Crashlytics
                                                                crashlytics.recordException(e) // Esto reporta una excepción sin cerrar la app
                                                                crashlytics.setCustomKey("Bug_AS", "Simulated recoverable error in Authorization Screen")
                                                                crashlytics.log("Non-fatal exception logged")
                                    
                                                                // Puedes mostrar un mensaje al usuario si lo deseas, sin cerrar la app
                                                                println("Recoverable error caught and logged")
                                                                crashlytics.sendUnsentReports()
                                                            }
                                                        }
                                                    ) {
                                                        Icon(
                                                            imageVector = Icons.Default.Warning, // Replace with your warning icon resource
                                                            contentDescription = "Bug Icon",
                                                            tint = Color(0xffb3cb54) // Your desired color for the warning icon
                                                        )
                                                    }
                                    
                                                    // Space between icons
                                                    Spacer(modifier = Modifier.width(16.dp))
                                    
                                                    // Crash Icon
                                                    IconButton(
                                                        onClick = {
                                                            val crashlytics = FirebaseCrashlytics.getInstance()
                                                            crashlytics.setCustomKey("Crash_AS","Crash in Authorization Screen")
                                                            crashlytics.log("App Crash after pushing crash button")
                                                            throw RuntimeException("Forced Crash from Authorization Screen")
                                                        }
                                                    ) {
                                                        Icon(
                                                            imageVector = Icons.Default.Close, // Replace with your bus icon resource
                                                            contentDescription = "Crash Icon",
                                                            tint = Color(0xffc33ba5) // Your desired color for the bus icon
                                                        )
                                                    }
                                                }
                                    
                                                // Login Button
                                                Button(
                                                    onClick = { navController.navigate("login") },
                                                    shape = RoundedCornerShape(7.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 10.dp),
                                                    modifier = Modifier
                                                        .fillMaxWidth() // Make button full width
                                                        .height(42.dp)
                                                ) {
                                                    Text(
                                                        text = "Log In",
                                                        color = Color.White,
                                                        textAlign = TextAlign.Center,
                                                        lineHeight = 1.43.em,
                                                        style = TextStyle(
                                                            fontSize = 14.sp,
                                                            fontFamily = FontFamily.SansSerif,
                                                            letterSpacing = 0.1.sp
                                                        )
                                                    )
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp)) // Add space between buttons
                                    
                                                // Register Button
                                                Button(
                                                    onClick = { navController.navigate("register") },
                                                    shape = RoundedCornerShape(7.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                    contentPadding = PaddingValues(horizontal = 24.dp, vertical = 10.dp),
                                                    modifier = Modifier
                                                        .fillMaxWidth() // Make button full width
                                                        .height(42.dp)
                                                ) {
                                                    Text(
                                                        text = "Sign Up",
                                                        color = Color.White,
                                                        textAlign = TextAlign.Center,
                                                        lineHeight = 1.43.em,
                                                        style = TextStyle(
                                                            fontSize = 14.sp,
                                                            fontFamily = FontFamily.SansSerif,
                                                            letterSpacing = 0.1.sp
                                                        )
                                                    )
                                                }
                                    
                                                Spacer(modifier = Modifier.height(260.dp))
                                            }
                                        }
                                    }
                                    ```
                                - LoginScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import ConnectivityViewModel
                                    import android.util.Log
                                    import android.widget.Toast
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.text.KeyboardActions
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material3.AlertDialog
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.Email
                                    import androidx.compose.material.icons.filled.Lock
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.runtime.livedata.observeAsState
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.draw.rotate
                                    import androidx.compose.ui.focus.FocusDirection
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.platform.LocalFocusManager
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.ImeAction
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.text.input.PasswordVisualTransformation
                                    import androidx.compose.ui.text.input.VisualTransformation
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.fragment.app.FragmentActivity
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.views.theme.Purple40
                                    import kotlinx.coroutines.delay
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun LoginScreen(
                                        navController: NavController,
                                        viewModel: AuthViewModel,
                                        connectivityViewModel: ConnectivityViewModel
                                    ) {
                                        var email by remember { mutableStateOf("") }
                                        var password by remember { mutableStateOf("") }
                                        var passwordVisible by remember { mutableStateOf(false) }
                                        val focusManager = LocalFocusManager.current
                                        val authState by viewModel.authState.collectAsState()
                                        val context = LocalContext.current
                                        val isLogInButtonEnable by connectivityViewModel.isConnected.observeAsState(true)
                                        var previousConnectionState by remember { mutableStateOf(isLogInButtonEnable) }
                                    
                                        // State variables for the reset password dialog
                                        var showResetPasswordDialog by remember { mutableStateOf(false) }
                                        var resetEmail by remember { mutableStateOf("") }
                                    
                                        var showBiometricDialog by remember { mutableStateOf(false) }
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .verticalScroll(rememberScrollState())
                                        ) {
                                            // Background Logo
                                            Image(
                                                painter = painterResource(id = R.drawable.logo_log_in),
                                                contentDescription = "Background Logo",
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .aspectRatio(1f)
                                                    .align(Alignment.TopCenter)
                                                    .offset(y = 75.dp)
                                            )
                                    
                                            // Back Button
                                            Image(
                                                painter = painterResource(id = R.drawable.leftactionable),
                                                contentDescription = "Back",
                                                modifier = Modifier
                                                    .align(alignment = Alignment.TopStart)
                                                    .padding(16.dp)
                                                    .size(24.dp)
                                                    .clickable { navController.popBackStack() }
                                            )
                                    
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(horizontal = 24.dp),
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                Spacer(modifier = Modifier.height(122.dp))
                                    
                                                // App Title
                                                Text(
                                                    text = "SpendiQ",
                                                    color = MaterialTheme.colorScheme.onPrimary,
                                                    textAlign = TextAlign.Center,
                                                    style = TextStyle(
                                                        fontSize = 73.sp,
                                                        fontFamily = FontFamily.SansSerif,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                    
                                                )
                                    
                                                Spacer(modifier = Modifier.height(200.dp))
                                    
                                                // Email Field
                                                OutlinedTextField(
                                                    value = email,
                                                    onValueChange = { email = it },
                                                    placeholder = { Text("Email") },
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 4.dp),
                                                    leadingIcon = { Icon(Icons.Default.Email, contentDescription = "Email", tint = Color(0xFFD9D9D9)) },
                                                    shape = RoundedCornerShape(50),
                                                    colors = TextFieldDefaults.outlinedTextFieldColors(
                                                        focusedBorderColor = Purple40,
                                                        unfocusedBorderColor = Purple40
                                                    ),
                                                    keyboardOptions = KeyboardOptions(
                                                        keyboardType = KeyboardType.Email,
                                                        imeAction = ImeAction.Next
                                                    ),
                                                    keyboardActions = KeyboardActions(
                                                        onNext = { focusManager.moveFocus(FocusDirection.Down) }
                                                    )
                                                )
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                    
                                                OutlinedTextField(
                                                    value = password,
                                                    onValueChange = { password = it },
                                                    placeholder = { Text("Password") },
                                                    singleLine = true,
                                                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 4.dp),
                                                    leadingIcon = {
                                                        Icon(
                                                            imageVector = Icons.Default.Lock,
                                                            contentDescription = "Password Icon",
                                                            tint = Color(0xFFD9D9D9)
                                                        )
                                                    },
                                                    trailingIcon = {
                                                        Row {
                                    
                                                            IconButton(
                                                                onClick = { passwordVisible = !passwordVisible }
                                                            ) {
                                                                Icon(
                                                                    painter = painterResource(id = if (passwordVisible) R.drawable.round_visibility_24 else R.drawable.baseline_visibility_off_24),
                                                                    contentDescription = if (passwordVisible) "Hide password" else "Show password",
                                                                    tint = Color.Gray
                                                                )
                                                            }
                                    
                                                            IconButton(
                                                                onClick = {
                                                                    viewModel.setupBiometricPrompt(
                                                                        context as FragmentActivity,
                                                                        onSuccess = { viewModel.loginWithBiometrics() },
                                                                        onError = { /* Manejar error */ }
                                                                    )
                                                                    viewModel.showBiometricPrompt()
                                                                }
                                                            ) {
                                                                Icon(
                                                                    painter = painterResource(id = R.drawable.fingerprint),
                                                                    contentDescription = "Fingerprint",
                                                                    modifier = Modifier.size(24.dp),
                                                                    tint = Color.Gray
                                                                )
                                                            }
                                                        }
                                                    },
                                                    shape = RoundedCornerShape(50),
                                                    colors = TextFieldDefaults.outlinedTextFieldColors(
                                                        focusedBorderColor = Purple40,
                                                        unfocusedBorderColor = Purple40
                                                    ),
                                                    keyboardOptions = KeyboardOptions(
                                                        keyboardType = KeyboardType.Password,
                                                        imeAction = ImeAction.Done
                                                    ),
                                                    keyboardActions = KeyboardActions(
                                                        onDone = { focusManager.moveFocus(FocusDirection.Down) }
                                                    )
                                                )
                                    
                                    
                                                Spacer(modifier = Modifier.height(24.dp))
                                    
                                                // Login Button
                                                Button(
                                                    onClick = { viewModel.login(email, password) },
                                                    shape = RoundedCornerShape(7.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .height(48.dp),
                                                    enabled = isLogInButtonEnable
                                                ) {
                                                    Text(
                                                        text = "Log In",
                                                        fontSize = 16.sp,
                                                        color = Color.White
                                                    )
                                                }
                                    
                                                Spacer(modifier = Modifier.height(24.dp))
                                    
                                                // Forgot Password
                                                Text(
                                                    text = "Forgot your password?",
                                                    color = Color(0xff589ddd),
                                                    modifier = Modifier.clickable { showResetPasswordDialog = true },
                                                    style = TextStyle(fontSize = 16.sp)
                                                )
                                    
                                                // Reset Password Dialog
                                                if (showResetPasswordDialog) {
                                                    AlertDialog(
                                                        onDismissRequest = { showResetPasswordDialog = false },
                                                        title = {
                                                            Text(text = "Reset Password")
                                                        },
                                                        text = {
                                                            Column {
                                                                Text(
                                                                    text = "Enter your email address to receive a password reset link.",
                                                                    style = TextStyle(fontSize = 14.sp)
                                                                )
                                                                Spacer(modifier = Modifier.height(8.dp))
                                                                OutlinedTextField(
                                                                    value = resetEmail,
                                                                    onValueChange = { resetEmail = it },
                                                                    label = { Text("Email") },
                                                                    singleLine = true,
                                                                    modifier = Modifier.fillMaxWidth()
                                                                )
                                                            }
                                                        },
                                                        confirmButton = {
                                                            Button(
                                                                onClick = {
                                                                    viewModel.sendPasswordResetEmail(resetEmail)
                                                                    showResetPasswordDialog = false
                                                                },
                                                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f))
                                                            ) {
                                                                Text("Send", color = Color.White)
                                                            }
                                                        },
                                                        dismissButton = {
                                                            TextButton(onClick = { showResetPasswordDialog = false }) {
                                                                Text("Cancel")
                                                            }
                                                        }
                                                    )
                                                }
                                    
                                                // Additional Spacing
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Handle Success and Error Messages
                                                when (authState) {
                                                    is AuthState.PasswordResetEmailSent -> {
                                                        Text(
                                                            text = "Password reset email sent successfully.",
                                                            color = Color(0xffb3cb54),
                                                            textAlign = TextAlign.Center,
                                                            style = TextStyle(fontSize = 16.sp),
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .padding(16.dp)
                                                        )
                                                    }
                                                    is AuthState.Error -> {
                                                        val errorMessage = if ((authState as AuthState.Error).message.contains("network", ignoreCase = true)) {
                                                            "It looks like you're offline. Please check your network connection and try again to log in."
                                                        } else {
                                                            (authState as AuthState.Error).message
                                                        }
                                                        Text(
                                                            text = errorMessage,
                                                            color = MaterialTheme.colorScheme.error,
                                                            textAlign = TextAlign.Center,
                                                            style = TextStyle(fontSize = 16.sp),
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .padding(16.dp)
                                                        )
                                                    }
                                                    is AuthState.Authenticated -> {
                                                        // Check if email is verified
                                                        LaunchedEffect(Unit) {
                                                            viewModel.checkEmailVerification()
                                                        }
                                                    }
                                                    is AuthState.EmailNotVerified -> {
                                                        // Notify the user that email is not verified
                                                        Text("Please verify your email to continue.")
                                                        Button(onClick = { viewModel.sendEmailVerification() }) {
                                                            Text("Resend verification email")
                                                        }
                                                    }
                                                    is AuthState.EmailVerified -> {
                                                        // Navigate to the main screen after email verification
                                                        LaunchedEffect(Unit) {
                                                            navController.navigate("main") {
                                                                popUpTo("authentication") { inclusive = true }
                                                            }
                                                        }
                                                    }
                                                    is AuthState.BiometricAlreadyEnabled -> {
                                                        Toast.makeText(context, "La biometría ya está habilitada.", Toast.LENGTH_SHORT).show()
                                                    }
                                                    is AuthState.BiometricEnabled -> {
                                                        Toast.makeText(context, "Biometría habilitada correctamente.", Toast.LENGTH_SHORT).show()
                                                    }
                                                    else -> { /* Handle other states */ }
                                                }
                                    
                                                // Spacer to push content up if needed
                                                Spacer(modifier = Modifier.weight(1f))
                                    
                                                Row(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 32.dp),
                                                    horizontalArrangement = Arrangement.SpaceEvenly
                                                ) {
                                                    Text(
                                                        text = "Enable Biometrics",
                                                        color = Color(0xffc33ba5),
                                                        modifier = Modifier.clickable {
                                                            showBiometricDialog = true
                                                        },
                                                        style = TextStyle(fontSize = 16.sp)
                                                    )
                                    
                                                    Box(
                                                        modifier = Modifier
                                                            .width(2.dp)
                                                            .height(24.dp)
                                                            .background(Color(0xff5875dd).copy(alpha = 0.53f))
                                                    )
                                    
                                                    Text(
                                                        text = "Help",
                                                        color = Color(0xffb3cb54),
                                                        modifier = Modifier.clickable { /* Handle help */ },
                                                        style = TextStyle(fontSize = 16.sp)
                                                    )
                                                }
                                            }
                                    
                                            if (isLogInButtonEnable != previousConnectionState) {
                                                if (isLogInButtonEnable) {
                                                    Toast.makeText(context, "Back Online!", Toast.LENGTH_SHORT).show()
                                                } else {
                                                    Toast.makeText(context, "It looks like you're offline. Please check your network connection", Toast.LENGTH_SHORT).show()
                                                }
                                                previousConnectionState = isLogInButtonEnable
                                            }
                                    
                                            // Handle Loading State
                                            if (authState is AuthState.Loading) {
                                                Box(
                                                    modifier = Modifier.fillMaxSize(),
                                                    contentAlignment = Alignment.Center
                                                ) {
                                                    CircularProgressIndicator()
                                                }
                                            }
                                        }
                                    
                                        if (showBiometricDialog) {
                                            AlertDialog(
                                                onDismissRequest = { showBiometricDialog = false },
                                                title = { Text(text = "Enable Biometrics") },
                                                text = { Text("¿Está seguro de que desea habilitar el inicio de sesión biométrico?") },
                                                confirmButton = {
                                                    Button(
                                                        onClick = {
                                                            viewModel.enableBiometricLogin(email, password) // Llama a la función para habilitar biometría
                                                            showBiometricDialog = false // Cierra el diálogo
                                                        },
                                                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f))
                                                    ) {
                                                        Text("Aceptar", color = Color.White)
                                                    }
                                                },
                                                dismissButton = {
                                                    TextButton(onClick = { showBiometricDialog = false }) {
                                                        Text("Cancelar")
                                                    }
                                                }
                                            )
                                        }
                                    
                                    
                                    
                                        // Reset AuthState after displaying messages
                                        LaunchedEffect(authState) {
                                            if (authState is AuthState.PasswordResetEmailSent || authState is AuthState.Error) {
                                                delay(3000) // Wait for 3 seconds
                                                viewModel.resetAuthState()
                                            }
                                        }
                                    }                                    ```
                                - RegisterScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import android.app.DatePickerDialog
                                    import android.widget.DatePicker
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.selection.toggleable
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.*
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.semantics.Role
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.input.PasswordVisualTransformation
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.compose.ui.zIndex
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.views.theme.Purple40
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @Composable
                                    fun RegisterScreen(
                                        navController: NavController,
                                        viewModel: AuthViewModel
                                    ) {
                                        var email by remember { mutableStateOf("") }
                                        var password by remember { mutableStateOf("") }
                                        var confirmPassword by remember { mutableStateOf("") }
                                        var fullName by remember { mutableStateOf("") }
                                        var phoneNumber by remember { mutableStateOf("") }
                                        var birthDate by remember { mutableStateOf("") }
                                        val authState by viewModel.authState.collectAsState()
                                        val (checkedState, onStateChange) = remember { mutableStateOf(false) }
                                    
                                        // Calendar setup for date picker
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                        val year = calendar.get(Calendar.YEAR)
                                        val month = calendar.get(Calendar.MONTH)
                                        val day = calendar.get(Calendar.DAY_OF_MONTH)
                                        val dateFormatter = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                                    
                                        // Date picker dialog
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _: DatePicker, selectedYear: Int, selectedMonth: Int, selectedDay: Int ->
                                                calendar.set(selectedYear, selectedMonth, selectedDay)
                                                birthDate = dateFormatter.format(calendar.time)
                                            },
                                            year,
                                            month,
                                            day
                                        )
                                    
                                        // Set max and min dates for the date picker
                                        datePickerDialog.datePicker.maxDate = System.currentTimeMillis()
                                        calendar.add(Calendar.YEAR, -100)
                                        datePickerDialog.datePicker.minDate = calendar.timeInMillis
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .clip(shape = RoundedCornerShape(7.dp))
                                                .background(color = Color.White)
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .verticalScroll(rememberScrollState())
                                                    .padding(horizontal = 16.dp),
                                                verticalArrangement = Arrangement.Center,
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                Text(
                                                    text = "Create Free Account",
                                                    color = Color.Black,
                                                    textAlign = TextAlign.Center,
                                                    style = TextStyle(
                                                        fontSize = 48.sp,
                                                        fontFamily = FontFamily.SansSerif
                                                    ),
                                                    modifier = Modifier.padding(top = 16.dp)
                                                )
                                    
                                                Spacer(modifier = Modifier.height(32.dp))
                                    
                                                // Full name input field
                                                OutlinedTextField(
                                                    value = fullName,
                                                    onValueChange = { fullName = it },
                                                    placeholder = { Text("Full Name") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Person, contentDescription = "Person", tint = Color(0xffb3cb54)) }
                                                )
                                    
                                                // Email input field
                                                OutlinedTextField(
                                                    value = email,
                                                    onValueChange = { email = it },
                                                    placeholder = { Text("Email") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Email, contentDescription = "Email", tint = Color(0xffb3cb54)) }
                                                )
                                    
                                                // Phone number input field
                                                OutlinedTextField(
                                                    value = phoneNumber,
                                                    onValueChange = { phoneNumber = it },
                                                    placeholder = { Text("Phone Number") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Phone, contentDescription = "Phone",  tint = Color(0xffb3cb54)) }
                                                )
                                    
                                                // Birth date field
                                                OutlinedTextField(
                                                    value = birthDate,
                                                    onValueChange = { },
                                                    placeholder = { Text("Birth Date (Click to select)") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50))
                                                        .clickable { datePickerDialog.show() },
                                                    leadingIcon = { Icon(Icons.Default.DateRange, contentDescription = "Calendar", tint = Color(0xffc33ba5)) },
                                                    readOnly = true,
                                                    enabled = false
                                                )
                                    
                                                // Password input fields
                                                OutlinedTextField(
                                                    value = password,
                                                    onValueChange = { password = it },
                                                    placeholder = { Text("Password") },
                                                    visualTransformation = PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Lock, contentDescription = "Lock1", tint = Color(0xffc33ba5)) }
                                                )
                                    
                                                OutlinedTextField(
                                                    value = confirmPassword,
                                                    onValueChange = { confirmPassword = it },
                                                    placeholder = { Text("Confirm Password") },
                                                    visualTransformation = PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Lock, contentDescription = "Lock2", tint = Color(0xffc33ba5)) }
                                                )
                                    
                                                // Checkbox for terms & conditions
                                                Row(
                                                    Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .toggleable(
                                                            value = checkedState,
                                                            onValueChange = { onStateChange(!checkedState) },
                                                            role = Role.Checkbox
                                                        )
                                                        .padding(vertical = 8.dp),
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Checkbox(checked = checkedState, onCheckedChange = null)
                                                    Text(text = "Accept Terms & Conditions", modifier = Modifier.padding(start = 16.dp))
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Register button
                                                Button(
                                                    onClick = {
                                                        if (password == confirmPassword && checkedState) {
                                                            viewModel.register(email, password, fullName, phoneNumber, birthDate)
                                                        }
                                                    },
                                                    enabled = password == confirmPassword && checkedState &&
                                                            email.isNotEmpty() && fullName.isNotEmpty() &&
                                                            birthDate.isNotEmpty() && phoneNumber.isNotEmpty(),
                                                    shape = RoundedCornerShape(7.dp),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.6f)
                                                        .padding(vertical = 16.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f))
                                                ) {
                                                    Text("Sign Up", color = Color.White, textAlign = TextAlign.Center)
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Auth state handling
                                                when (authState) {
                                                    is AuthState.Loading -> CircularProgressIndicator()
                                                    is AuthState.Error -> Text(
                                                        (authState as AuthState.Error).message,
                                                        color = MaterialTheme.colorScheme.error
                                                    )
                                                    is AuthState.Authenticated -> {
                                                        LaunchedEffect(Unit) {
                                                            // Trigger email verification
                                                            viewModel.sendEmailVerification()
                                                        }
                                                    }
                                                    is AuthState.EmailVerificationSent -> {
                                                        Text("Verification email sent. Please check your inbox.")
                                                        Button(onClick = { viewModel.checkEmailVerification() }) {
                                                            Text("I've verified my email")
                                                        }
                                                    }
                                                    is AuthState.EmailVerified -> {
                                                        LaunchedEffect(Unit) {
                                                            navController.navigate("main") {
                                                                popUpTo("authentication") { inclusive = true }
                                                            }
                                                        }
                                                    }
                                                    else -> {}
                                                }
                                            }
                                        }
                                    }                                    ```
                            - **common/**
                                - BottomNavigation.kt
                                    ```
                                    package com.isis3510.spendiq.views.common
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.tooling.preview.Preview
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import androidx.navigation.compose.currentBackStackEntryAsState
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import com.isis3510.spendiq.views.transaction.AddTransactionModal
                                    
                                    @Composable
                                    fun BottomNavigation(
                                        navController: NavController,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel // Add AccountViewModel parameter
                                    ) {
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .height(77.dp)
                                                .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp))
                                                .background(Color.White)
                                        ) {
                                            Row(
                                                modifier = Modifier.fillMaxSize(),
                                                horizontalArrangement = Arrangement.SpaceEvenly,
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                NavItem(
                                                    "Home",
                                                    R.drawable.rounded_home_24,
                                                    isSelected = navController.isCurrentRoute("main"),
                                                    navController,
                                                    "main"
                                                )
                                                NavItem(
                                                    "Promos",
                                                    R.drawable.rounded_gifts_24,
                                                    isSelected = navController.isCurrentRoute("promos"),
                                                    navController,
                                                    "promos"
                                                )
                                                AddTransactionButton(onClick = { showAddTransactionModal = true })
                                                NavItem(
                                                    "Accounts",
                                                    R.drawable.creditcard24,
                                                    isSelected = navController.isCurrentRoute("accounts"),
                                                    navController,
                                                    "accounts"
                                                )
                                                NavItem(
                                                    "Profile",
                                                    R.drawable.person24,
                                                    isSelected = navController.isCurrentRoute("profile"),
                                                    navController,
                                                    "profile"
                                                )
                                            }
                                        }
                                    
                                        if (showAddTransactionModal) {
                                            AddTransactionModal(
                                                accountViewModel = accountViewModel,
                                                transactionViewModel = transactionViewModel,
                                                onDismiss = { showAddTransactionModal = false },
                                                onTransactionAdded = {
                                                    showAddTransactionModal = false
                                    
                                                }
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun NavItem(label: String, iconRes: Int, isSelected: Boolean, navController: NavController, route: String) {
                                        val color = if (isSelected) Color(0xFF5875DD) else Color.Black
                                    
                                        Column(
                                            horizontalAlignment = Alignment.CenterHorizontally,
                                            verticalArrangement = Arrangement.Center
                                        ) {
                                            IconButton(onClick = { navController.navigate(route) }) {
                                                Icon(
                                                    painter = painterResource(id = iconRes),
                                                    contentDescription = label,
                                                    tint = color,
                                                    modifier = Modifier.size(24.dp)
                                                )
                                            }
                                            Text(
                                                text = label,
                                                color = color,
                                                fontSize = 12.sp,
                                                fontWeight = FontWeight.Medium
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun AddTransactionButton(onClick: () -> Unit) {
                                        IconButton(onClick = onClick) {
                                            Box(
                                                modifier = Modifier
                                                    .size(50.dp)
                                                    .clip(CircleShape)
                                                    .background(Color(0xFF5875DD))
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = R.drawable.add24),
                                                    contentDescription = "Add Transaction",
                                                    tint = Color.White,
                                                    modifier = Modifier
                                                        .size(24.dp)
                                                        .align(Alignment.Center)
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun NavController.isCurrentRoute(route: String): Boolean {
                                        return this.currentBackStackEntryAsState().value?.destination?.route == route
                                    }
                                    ```
                                - PieChart.kt
                                    ```
                                    package com.isis3510.spendiq.views.common
                                    
                                    import android.util.Log
                                    import androidx.compose.animation.core.Spring
                                    import androidx.compose.animation.core.spring
                                    import androidx.compose.animation.core.tween
                                    import androidx.compose.foundation.layout.size
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.unit.dp
                                    import ir.ehsannarmani.compose_charts.PieChart
                                    import ir.ehsannarmani.compose_charts.models.Pie
                                    
                                    
                                    @Composable
                                    fun CreatePieChart(data: List<Pair<String, Long>>) {
                                        Log.d("PieChart", "$data")
                                    
                                        // Convertir los datos a la estructura requerida por ComposeChart
                                        var pieData = data.map { (label, value) ->
                                            Pie(label = label,
                                                data = value.toDouble(),
                                                color = getColorForLabel(label),
                                                selectedColor = Color.Red) // Cambiar el color seleccionado según sea necesario
                                        }
                                    
                                        PieChart(
                                            modifier = Modifier.size(170.dp),
                                            data = pieData,
                                            onPieClick = {
                                                val pieIndex = pieData.indexOf(it)
                                                pieData = pieData.mapIndexed { mapIndex, pie -> pie.copy(selected = pieIndex == mapIndex) }
                                            },
                                            selectedScale = 1.2f,
                                            spaceDegree = 4f,
                                            selectedPaddingDegree = 2f,
                                            style = Pie.Style.Stroke(width = 42.dp)
                                        )
                                    }
                                    
                                    private fun getColorForLabel(label: String): Color {
                                        return when (label) {
                                            "Income" -> Color(0xffb3cb54)
                                            "Expenses" -> Color(0xffc33ba5)
                                            else -> Color.Gray
                                        }
                                    }                                    ```
                            - **profile/**
                                - ProfileInfoScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.ExperimentalMaterial3Api
                                    import androidx.compose.material3.Icon
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.Surface
                                    import androidx.compose.material3.Text
                                    import androidx.compose.material3.TopAppBar
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileInfoScreen(navController: NavController) {
                                        Surface(
                                            modifier = Modifier.fillMaxSize(),
                                            color = MaterialTheme.colorScheme.background
                                        ) {
                                            TopAppBar(
                                                title = { Text("Information") },
                                                navigationIcon = {
                                                    IconButton(onClick = { navController.popBackStack() }) {
                                                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                    }
                                                }
                                            )
                                            Box(
                                                contentAlignment = Alignment.Center,
                                                modifier = Modifier.fillMaxSize()
                                            ) {
                                                Text(text = "Information Screen")
                                            }
                                        }
                                    }                                    ```
                                - ProfileHelpScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.ExperimentalMaterial3Api
                                    import androidx.compose.material3.Icon
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.Surface
                                    import androidx.compose.material3.Text
                                    import androidx.compose.material3.TopAppBar
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileHelpScreen(navController: NavController) {
                                        Surface(
                                            modifier = Modifier.fillMaxSize(),
                                            color = MaterialTheme.colorScheme.background
                                        ) {
                                            TopAppBar(
                                                title = { Text("Help") },
                                                navigationIcon = {
                                                    IconButton(onClick = { navController.popBackStack() }) {
                                                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                    }
                                                }
                                            )
                                            Box(
                                                contentAlignment = Alignment.Center,
                                                modifier = Modifier.fillMaxSize()
                                            ) {
                                                Text(text = "Help Screen")
                                            }
                                        }
                                    }                                    ```
                                - ProfileStatisticsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.isSystemInDarkTheme
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileStatisticsScreen(navController: NavController, transactionViewModel: TransactionViewModel, accountViewModel: AccountViewModel) {
                                        val isDarkTheme = isSystemInDarkTheme()
                                        val backgroundColor = if (isDarkTheme) Color.DarkGray else Color(0xFFEEEEEE)
                                        val cardBackgroundColor = Color(0xFFB3CB54)
                                        val textColor =  Color.Black
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Statistics") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.navigate("profile") { launchSingleTop = true } }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel = transactionViewModel,
                                                    accountViewModel = accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(horizontal = 8.dp)
                                                    .verticalScroll(rememberScrollState()),
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                // Toggle for Daily/Weekly
                                                Surface(
                                                    modifier = Modifier.padding(vertical = 16.dp),
                                                    shape = RoundedCornerShape(50),
                                                    color = backgroundColor
                                                ) {
                                                    Row(
                                                        modifier = Modifier.padding(4.dp),
                                                        horizontalArrangement = Arrangement.Center,
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        SegmentedButton(
                                                            options = listOf("Daily", "Weekly"),
                                                            selectedOption = "Daily",
                                                            onOptionSelected = { /* Handle selection */ },
                                                            backgroundColor = backgroundColor,
                                                            selectedColor = cardBackgroundColor,
                                                            textColor = textColor
                                                        )
                                                    }
                                                }
                                    
                                                // Placeholder for Chart
                                                Box(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .height(200.dp)
                                                        .background(if (isDarkTheme) Color.Gray else Color.LightGray),
                                                    contentAlignment = Alignment.Center
                                                ) {
                                                    Text("Chart Placeholder", color = textColor)
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Summary Cards
                                                Column(
                                                    verticalArrangement = Arrangement.spacedBy(8.dp)
                                                ) {
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        horizontalArrangement = Arrangement.SpaceEvenly
                                                    ) {
                                    
                                                        SummaryCard(
                                                            title = "8 PM",
                                                            subtitle = "Highest spending time",
                                                            backgroundColor = cardBackgroundColor,
                                                            textColor = textColor,
                                                            iconResId = R.drawable.round_clock_24 // Puedes cambiarlo por cualquier ícono que desees
                                                        )
                                                        SummaryCard(
                                                            title = "Saturday",
                                                            subtitle = "Highest spending day",
                                                            backgroundColor = cardBackgroundColor,
                                                            textColor = textColor,
                                                            iconResId = R.drawable.calendar24 // Puedes cambiarlo por cualquier ícono que desees
                                                        )
                                    
                                                    }
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        horizontalArrangement = Arrangement.SpaceEvenly
                                                    ) {
                                                        SummaryCard(title = "September 3", subtitle = "Last advice", backgroundColor = cardBackgroundColor, textColor = textColor)
                                                        SummaryCard(title = "El Corral", subtitle = "Most visited place", backgroundColor = cardBackgroundColor, textColor = textColor)
                                                    }
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        horizontalArrangement = Arrangement.SpaceEvenly
                                                    ) {
                                                        SummaryCard(title = "$67,500", subtitle = "Highest expend", backgroundColor = cardBackgroundColor, textColor = textColor)
                                                        SummaryCard(title = "Nequi", subtitle = "Preferred payment account", backgroundColor = cardBackgroundColor, textColor = textColor)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun SummaryCard(title: String, subtitle: String, backgroundColor: Color, textColor: Color) {
                                        Surface(
                                            modifier = Modifier
                                                .width(140.dp)
                                                .height(100.dp),
                                            shape = RoundedCornerShape(16.dp),
                                            color = backgroundColor
                                        ) {
                                            Column(
                                                modifier = Modifier.padding(12.dp),
                                                verticalArrangement = Arrangement.SpaceBetween
                                            ) {
                                                Text(text = title, style = MaterialTheme.typography.titleMedium, color = textColor)
                                                Text(text = subtitle, style = MaterialTheme.typography.bodyMedium, color = textColor)
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun SegmentedButton(
                                        options: List<String>,
                                        selectedOption: String,
                                        onOptionSelected: (String) -> Unit,
                                        backgroundColor: Color,
                                        selectedColor: Color,
                                        textColor: Color
                                    ) {
                                        Row(
                                            modifier = Modifier
                                                .background(backgroundColor, shape = RoundedCornerShape(50))
                                                .padding(4.dp),
                                            horizontalArrangement = Arrangement.Center,
                                            verticalAlignment = Alignment.CenterVertically
                                        ) {
                                            options.forEach { option ->
                                                val isSelected = option == selectedOption
                                                Button(
                                                    onClick = { onOptionSelected(option) },
                                                    shape = RoundedCornerShape(50),
                                                    colors = ButtonDefaults.buttonColors(containerColor = if (isSelected) selectedColor else backgroundColor)
                                                ) {
                                                    Text(option, color = textColor)
                                                }
                                            }
                                        }
                                    }
                                    
                                    
                                    @Composable
                                    fun SummaryCard(title: String, subtitle: String, backgroundColor: Color, textColor: Color, iconResId: Int) {
                                        Surface(
                                            modifier = Modifier
                                                .width(140.dp)
                                                .height(100.dp),
                                            shape = RoundedCornerShape(16.dp),
                                            color = backgroundColor
                                        ) {
                                            Box(modifier = Modifier.fillMaxSize()) {
                                                // Icon in the top right corner, larger size
                                                Icon(
                                                    painter = painterResource(id = iconResId),
                                                    contentDescription = null,
                                                    tint = textColor,
                                                    modifier = Modifier
                                                        .size(48.dp)  // Increase the size for better visibility
                                                        .align(Alignment.TopEnd)
                                                        .padding(10.dp)
                                                )
                                    
                                                // Content of the card
                                                Column(
                                                    modifier = Modifier
                                                        .padding(start = 12.dp, top = 12.dp, end = 8.dp, bottom = 12.dp)
                                                        .fillMaxSize(),
                                                    verticalArrangement = Arrangement.SpaceBetween
                                                ) {
                                                    Text(text = title, style = MaterialTheme.typography.titleMedium, color = textColor)
                                                    Text(text = subtitle, style = MaterialTheme.typography.bodyMedium, color = textColor)
                                                }
                                            }
                                        }
                                    }
                                    
                                    
                                    ```
                                - ProfileNotificationsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.ExperimentalMaterial3Api
                                    import androidx.compose.material3.Icon
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.Surface
                                    import androidx.compose.material3.Text
                                    import androidx.compose.material3.TopAppBar
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileNotificationsScreen(navController: NavController) {
                                        Surface(
                                            modifier = Modifier.fillMaxSize(),
                                            color = MaterialTheme.colorScheme.background
                                        ) {
                                            TopAppBar(
                                                title = { Text("Notifications Settings") },
                                                navigationIcon = {
                                                    IconButton(onClick = { navController.popBackStack() }) {
                                                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                    }
                                                }
                                            )
                                            Box(
                                                contentAlignment = Alignment.Center,
                                                modifier = Modifier.fillMaxSize()
                                            ) {
                                                Text(text = "Notifications Settings Screen")
                                            }
                                        }
                                    }                                    ```
                                - ProfileSecurityScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.foundation.layout.padding
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.ExperimentalMaterial3Api
                                    import androidx.compose.material3.Icon
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.Surface
                                    import androidx.compose.material3.Text
                                    import androidx.compose.material3.TopAppBar
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileSecurityScreen(
                                        navController: NavController,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel
                                    ) {
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Security Settings") },
                                                    navigationIcon = {
                                                        IconButton(onClick = {
                                                            navController.navigate("profile") {
                                                                launchSingleTop = true
                                                            }
                                                        }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel = transactionViewModel,
                                                    accountViewModel = accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Box(
                                                contentAlignment = Alignment.Center,
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                            ) {
                                                Text(text = "Security Settings Screen")
                                            }
                                        }
                                    }
                                    
                                    ```
                                - ProfileLaGScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.interaction.MutableInteractionSource
                                    import androidx.compose.foundation.isSystemInDarkTheme
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.graphics.Shape
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileLaGScreen(
                                        navController: NavController,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel
                                    ) {
                                        val isDarkTheme = isSystemInDarkTheme()
                                        val backgroundColor = if (isDarkTheme) Color.DarkGray else Color(0xFFEEEEEE)
                                        val textColor = if (isDarkTheme) Color.White else Color.Black
                                    
                                        // Checkbox states
                                        var byExpenseChecked by remember { mutableStateOf(true) }
                                        var byQuantityChecked by remember { mutableStateOf(false) }
                                    
                                        // Lista de gastos
                                        var expenses by remember { mutableStateOf(mutableListOf<Expense>()) }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Limits & Goals", fontWeight = FontWeight.Bold, color = textColor) },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back", tint = textColor)
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel = transactionViewModel,
                                                    accountViewModel = accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(horizontal = 16.dp)
                                                    .verticalScroll(rememberScrollState()),
                                                verticalArrangement = Arrangement.spacedBy(16.dp)
                                            ) {
                                                // By Expense Section
                                                Row(
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Checkbox(
                                                        checked = byExpenseChecked,
                                                        onCheckedChange = {
                                                            byExpenseChecked = true
                                                            byQuantityChecked = false
                                                        }
                                                    )
                                                    Spacer(modifier = Modifier.width(8.dp))
                                                    Text("By expense", style = MaterialTheme.typography.bodyLarge, color = textColor)
                                                }
                                    
                                                // Sección de gastos solo activa cuando 'By Expense' está marcado
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .background(
                                                            color = if (byExpenseChecked) backgroundColor else backgroundColor.copy(alpha = 0.5f),
                                                            shape = RoundedCornerShape(10.dp)
                                                        )
                                                        .padding(8.dp)
                                                ) {
                                                    if (byExpenseChecked) {
                                                        LazyColumn(
                                                            modifier = Modifier.heightIn(max = 240.dp)
                                                        ) {
                                                            items(expenses) { expense ->
                                                                ExpenseCategoryCard(
                                                                    expense = expense,
                                                                    onValueChange = { newName, newAmount ->
                                                                        expense.name = newName
                                                                        expense.amount = newAmount
                                                                    }
                                                                )
                                                                Spacer(modifier = Modifier.height(8.dp)) // Espaciado entre cada gasto
                                                            }
                                                        }
                                    
                                                        // Botón para añadir nuevo gasto, limitado a 4 elementos visibles en pantalla
                                                        if (expenses.size < 4) {
                                                            Spacer(modifier = Modifier.height(8.dp))
                                                        }
                                                    }
                                    
                                                    // Botón Personalizado
                                                    CustomButton(
                                                        onClick = {
                                                            expenses = expenses.toMutableList().apply {
                                                                add(Expense("New Expense", "0"))
                                                            }
                                                        },
                                                        backgroundColor = Color(0xFFCCCCCC),
                                                        contentColor = Color(0xFF707070),
                                                        shape = RoundedCornerShape(50),
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(48.dp) // Ajusta la altura según tus necesidades
                                                    ) {
                                                        Row(
                                                            verticalAlignment = Alignment.CenterVertically,
                                                            horizontalArrangement = Arrangement.Center
                                                        ) {
                                                            Icon(
                                                                painter = painterResource(id = R.drawable.add24),
                                                                contentDescription = "Add",
                                                                tint = Color(0xFF707070),
                                                                modifier = Modifier.size(20.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(8.dp))
                                                            Text(
                                                                text = "Add Expense",
                                                                color = Color(0xFF707070),
                                                                fontSize = 16.sp,
                                                                fontWeight = FontWeight.Medium
                                                            )
                                                        }
                                                    }
                                                }
                                    
                                                // By Quantity Section
                                                Row(
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Checkbox(
                                                        checked = byQuantityChecked,
                                                        onCheckedChange = {
                                                            byQuantityChecked = true
                                                            byExpenseChecked = false
                                                        }
                                                    )
                                                    Spacer(modifier = Modifier.width(8.dp))
                                                    Text("By quantity", style = MaterialTheme.typography.bodyLarge, color = textColor)
                                                }
                                    
                                                // Sección de cantidad solo activa cuando 'By Quantity' está marcado
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .background(
                                                            color = if (byQuantityChecked) backgroundColor else backgroundColor.copy(alpha = 0.5f),
                                                            shape = RoundedCornerShape(10.dp)
                                                        )
                                                        .padding(8.dp)
                                                ) {
                                                    if (byQuantityChecked) {
                                                        Slider(
                                                            value = 75f,
                                                            onValueChange = {},
                                                            valueRange = 0f..100f,
                                                            colors = SliderDefaults.colors(
                                                                thumbColor = Color(0xFFB3CB54),
                                                                activeTrackColor = Color(0xFFB3CB54)
                                                            )
                                                        )
                                                        Row(
                                                            horizontalArrangement = Arrangement.SpaceBetween,
                                                            modifier = Modifier.fillMaxWidth()
                                                        ) {
                                                            Text("$0", fontSize = 14.sp, color = textColor)
                                                            Text("$100k", fontSize = 14.sp, color = textColor)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    data class Expense(var name: String, var amount: String)
                                    
                                    @Composable
                                    fun CustomButton(
                                        onClick: () -> Unit,
                                        modifier: Modifier = Modifier,
                                        backgroundColor: Color = Color(0xFFCCCCCC),
                                        contentColor: Color = Color.Black,
                                        shape: Shape = RoundedCornerShape(50),
                                        content: @Composable () -> Unit
                                    ) {
                                        Box(
                                            modifier = modifier
                                                .background(color = backgroundColor, shape = shape)
                                                .clickable(onClick = onClick, indication = null, interactionSource = remember { MutableInteractionSource() })
                                                .padding(vertical = 12.dp, horizontal = 16.dp),
                                            contentAlignment = Alignment.Center
                                        ) {
                                            content()
                                        }
                                    }
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ExpenseCategoryCard(expense: Expense, onValueChange: (String, String) -> Unit) {
                                        val isDarkTheme = isSystemInDarkTheme()
                                        val textColor = if (isDarkTheme) Color.White else Color.Black
                                        val fieldBackground = if (isDarkTheme) Color.Gray else Color(0xFFD9D9D9)
                                    
                                        var name by remember { mutableStateOf(expense.name) }
                                        var amount by remember { mutableStateOf(expense.amount) }
                                    
                                        Row(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .height(50.dp)
                                                .background(fieldBackground, RoundedCornerShape(25.dp))
                                                .padding(horizontal = 16.dp, vertical = 8.dp),
                                            verticalAlignment = Alignment.CenterVertically,
                                            horizontalArrangement = Arrangement.SpaceBetween
                                        ) {
                                            // Campo de nombre del gasto
                                            OutlinedTextField(
                                                value = name,
                                                onValueChange = {
                                                    name = it
                                                    onValueChange(it, amount)
                                                },
                                                textStyle = LocalTextStyle.current.copy(fontSize = 16.sp, color = textColor),
                                                singleLine = true,
                                                placeholder = { Text("New Expense", color = textColor.copy(alpha = 0.5f), fontSize = 16.sp) },
                                                colors = TextFieldDefaults.outlinedTextFieldColors(
                                                    cursorColor = textColor,
                                                    focusedTextColor = textColor,
                                                    unfocusedTextColor = textColor,
                                                    focusedBorderColor = Color.Transparent,
                                                    unfocusedBorderColor = Color.Transparent
                                                ),
                                                modifier = Modifier.weight(1f)
                                            )
                                    
                                            Spacer(modifier = Modifier.width(8.dp))
                                    
                                            // Contenedor para el ícono de edición y el campo de cantidad
                                            Row(
                                                verticalAlignment = Alignment.CenterVertically,
                                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                                modifier = Modifier
                                                    .background(if (isDarkTheme) Color.DarkGray else Color.White, RoundedCornerShape(50))
                                                    .padding(horizontal = 12.dp, vertical = 6.dp)
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = R.drawable.baseline_edit_24),
                                                    contentDescription = "Edit",
                                                    tint = Color.Gray,
                                                    modifier = Modifier.size(16.dp)
                                                )
                                    
                                                // Campo de cantidad
                                                OutlinedTextField(
                                                    value = amount,
                                                    onValueChange = {
                                                        amount = it.filter { char -> char.isDigit() }
                                                        onValueChange(name, amount)
                                                    },
                                                    textStyle = LocalTextStyle.current.copy(fontSize = 16.sp, color = textColor),
                                                    singleLine = true,
                                                    placeholder = { Text("0000", color = textColor.copy(alpha = 0.5f), fontSize = 16.sp) },
                                                    colors = TextFieldDefaults.outlinedTextFieldColors(
                                                        cursorColor = textColor,
                                                        focusedTextColor = textColor,
                                                        unfocusedTextColor = textColor,
                                                        focusedBorderColor = Color.Transparent,
                                                        unfocusedBorderColor = Color.Transparent
                                                    ),
                                                    modifier = Modifier.width(70.dp),
                                                    keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Number)
                                                )
                                            }
                                        }
                                    }
                                    
                                    ```
                                - ProfileAccountScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.material3.ExperimentalMaterial3Api
                                    import androidx.compose.material3.Icon
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material3.MaterialTheme
                                    
                                    import androidx.compose.material3.Text
                                    import androidx.compose.material3.TopAppBar
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileAccountScreen(
                                        navController: NavController,
                                        userData: Map<String, Any?>?,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel
                                    ) {
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Account Settings") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.navigate("profile") { launchSingleTop = true } }) {
                                                            Icon(
                                                                Icons.AutoMirrored.Filled.ArrowBack,
                                                                contentDescription = "Back"
                                                            )
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel = transactionViewModel,
                                                    accountViewModel = accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                            ) {
                                                Spacer(modifier = Modifier.height(16.dp))
                                                // Campos de perfil con fondo rosado en los iconos
                                                ProfileField("Full Name", (userData?.get("fullName") as? String) ?: "N/A", R.drawable.person24)
                                                ProfileField("Email Address", (userData?.get("email") as? String) ?: "N/A", R.drawable.email24)
                                                ProfileField("Phone Number", (userData?.get("phoneNumber") as? String) ?: "N/A", R.drawable.phone24)
                                                ProfileField("Birth Date", (userData?.get("birthDate") as? String) ?: "N/A", R.drawable.calendar24)
                                            }
                                        }
                                    }
                                    @Composable
                                    fun ProfileField(label: String, value: String, iconResId: Int) {
                                        Row(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(16.dp),
                                            verticalAlignment = Alignment.CenterVertically
                                        ) {
                                            Box(
                                                modifier = Modifier
                                                    .size(40.dp)
                                                    .background(Color(0xFFC33BA5), shape = CircleShape),
                                                contentAlignment = Alignment.Center
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = iconResId),
                                                    contentDescription = label,
                                                    modifier = Modifier.size(24.dp),
                                                    tint = Color.White
                                                )
                                            }
                                            Spacer(modifier = Modifier.width(16.dp))
                                            Column {
                                                Text(
                                                    text = label,
                                                    style = MaterialTheme.typography.bodySmall,
                                                    color = MaterialTheme.colorScheme.onBackground
                                                )
                                                Text(
                                                    text = value,
                                                    style = MaterialTheme.typography.bodyLarge,
                                                    color = MaterialTheme.colorScheme.onBackground
                                                )
                                            }
                                        }
                                    }
                                    ```
                                - ProfileScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import android.annotation.SuppressLint
                                    import android.content.Context
                                    import android.graphics.Bitmap
                                    import android.location.Geocoder
                                    import android.location.Location
                                    import android.net.Uri
                                    import android.widget.Toast
                                    import androidx.activity.compose.rememberLauncherForActivityResult
                                    import androidx.activity.result.contract.ActivityResultContracts
                                    import androidx.compose.foundation.Canvas
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.graphics.ColorFilter
                                    import androidx.compose.ui.graphics.StrokeCap
                                    import androidx.compose.ui.graphics.drawscope.Stroke
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.tooling.data.UiToolingDataApi
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import coil.compose.rememberAsyncImagePainter
                                    import com.google.android.gms.location.FusedLocationProviderClient
                                    import com.google.android.gms.location.LocationServices
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import com.isis3510.spendiq.viewmodel.ProfileViewModel
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import kotlinx.coroutines.Dispatchers
                                    import kotlinx.coroutines.withContext
                                    import java.io.File
                                    import java.io.FileOutputStream
                                    import java.io.IOException
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileScreen(
                                        navController: NavController,
                                        viewModel: AuthViewModel,
                                        transactionViewModel: TransactionViewModel,
                                        accountViewModel: AccountViewModel,
                                        profileViewModel: ProfileViewModel
                                    ) {
                                        var userData by remember { mutableStateOf<Map<String, Any>?>(null) }
                                        val profileImageUri by profileViewModel.profileImageUri.collectAsState()
                                        var isLoading by remember { mutableStateOf(true) }
                                        val context = LocalContext.current
                                    
                                        var locationText by remember { mutableStateOf("Location not available") }
                                    
                                    
                                        val galleryLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->
                                            uri?.let { newUri ->
                                                saveImageToInternalStorage(context, newUri)
                                                profileViewModel.saveProfileImage(context, newUri)
                                            }
                                        }
                                    
                                        LaunchedEffect(Unit) {
                                            viewModel.getUserData()
                                            profileViewModel.loadProfileImage(context)
                                            updateLocation(context) { location -> locationText = location }
                                        }
                                    
                                        val userDataState by viewModel.userData.collectAsState()
                                        LaunchedEffect(userDataState) {
                                            when (userDataState) {
                                                is AuthViewModel.UserDataState.Success -> {
                                                    userData = (userDataState as AuthViewModel.UserDataState.Success).data
                                                    isLoading = false
                                                }
                                                is AuthViewModel.UserDataState.Error -> {
                                                    Toast.makeText(
                                                        context,
                                    
                                                        "Error loading data: ${(userDataState as AuthViewModel.UserDataState.Error).message}",
                                    
                                                        Toast.LENGTH_LONG
                                                    ).show()
                                                    isLoading = false
                                                }
                                                AuthViewModel.UserDataState.Loading -> isLoading = true
                                                AuthViewModel.UserDataState.Idle -> {}
                                            }
                                        }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Perfil") },
                                                    navigationIcon = {
                                    
                                                        IconButton(onClick = { navController.navigate("main") { launchSingleTop = true } }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                    
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel = transactionViewModel,
                                                    accountViewModel = accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            if (isLoading) {
                                                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                                    CircularProgressIndicator()
                                                }
                                            } else {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxSize()
                                                        .padding(innerPadding)
                                                        .padding(16.dp)
                                                        .verticalScroll(rememberScrollState()),
                                    
                                                    horizontalAlignment = Alignment.CenterHorizontally
                                                ) {
                                                    Box(
                                                        modifier = Modifier
                                                            .size(120.dp)
                                                            .clickable {
                                                                galleryLauncher.launch("image/*")
                                                            }
                                                    ) {
                                                        ProfileImageWithMultiColorBorder(profileImageUri)
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(12.dp))
                                    
                                                    userData?.let { data ->
                                                        Text(
                                                            text = (data["fullName"] as? String) ?: "",
                                                            style = MaterialTheme.typography.headlineMedium,
                                                            fontWeight = FontWeight.Bold
                                                        )
                                    
                                                        Spacer(modifier = Modifier.height(12.dp))
                                    
                                                        Row(verticalAlignment = Alignment.CenterVertically) {
                                                            Icon(
                                                                painter = painterResource(id = R.drawable.baseline_location_pin_24),
                                                                contentDescription = "Location",
                                                                tint = Color.Gray,
                                                                modifier = Modifier.size(24.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(8.dp))
                                                            Text(
                                                                text = locationText,
                                                                style = MaterialTheme.typography.bodyLarge
                                                            )
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    SectionWithButtons(navController)
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    Button(
                                                        onClick = {
                                                            viewModel.logout()
                                                            navController.navigate("authentication") {
                                                                popUpTo(0) { inclusive = true }
                                                            }
                                                        },
                                                        modifier = Modifier.fillMaxWidth(0.8f)
                                                    ) {
                                                        Text("Logout")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun SectionWithButtons(navController: NavController) {
                                        Column {
                                            // Sección de Notificaciones, Configuración y Cuenta
                                            Box(modifier = Modifier.padding(vertical = 8.dp)) {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .clip(RoundedCornerShape(20.dp))
                                                        .background(Color(0xFFEEEEEE))
                                                        .padding(16.dp)
                                                ) {
                                                    ActionButtonWithArrow("Notificaciones", R.drawable.baseline_notifications_24, navController, backgroundColor = Color(0xFFC33BA5), textColor = Color.Black) {
                                                        navController.navigate("profileNotificationsScreen") { launchSingleTop = true }
                                                    }
                                                    Divider(color = Color(0xFFC5C5C5), thickness = 1.dp)
                                                    ActionButtonWithArrow("Seguridad", R.drawable.baseline_shield_24, navController, backgroundColor = Color(0xFFC33BA5), textColor = Color.Black) {
                                                        navController.navigate("profileSecurityScreen") { launchSingleTop = true }
                                                    }
                                                    Divider(color = Color(0xFFC5C5C5), thickness = 1.dp)
                                                    ActionButtonWithArrow("Cuenta", R.drawable.person24, navController, backgroundColor = Color(0xFFC33BA5), textColor = Color.Black) {
                                                        navController.navigate("profileAccountScreen") { launchSingleTop = true }
                                    
                                                    }
                                                }
                                            }
                                    
                                            // Sección de Limites y Estadísticas
                                            Box(modifier = Modifier.padding(vertical = 8.dp)) {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .clip(RoundedCornerShape(20.dp))
                                                        .background(Color(0xFFEEEEEE))
                                                        .padding(16.dp)
                                                ) {
                                                    ActionButtonWithArrow("Limites y Objetivos", R.drawable.baseline_adjust_24, navController, backgroundColor = Color(0xFFB3CB54), textColor = Color.Black) {
                                                        navController.navigate("profileLaGScreen") { launchSingleTop = true }
                                                    }
                                                    Divider(color = Color(0xFFC5C5C5), thickness = 1.dp)
                                                    ActionButtonWithArrow("Estadísticas", R.drawable.round_equalizer_24, navController, backgroundColor = Color(0xFFB3CB54), textColor = Color.Black) {
                                                        navController.navigate("profileStatisticsScreen") { launchSingleTop = true }
                                                    }
                                                }
                                            }
                                    
                                            // Sección de Ayuda e Información
                                            Box(modifier = Modifier.padding(vertical = 8.dp)) {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .clip(RoundedCornerShape(20.dp))
                                                        .background(Color(0xFFEEEEEE))
                                                        .padding(16.dp)
                                                ) {
                                                    ActionButtonWithArrow("Ayuda", R.drawable.outline_question_mark_24, navController, backgroundColor = Color(0xFF5875DD), textColor = Color.Black) {
                                                        navController.navigate("profileHelpScreen") { launchSingleTop = true }
                                                    }
                                                    Divider(color = Color(0xFFC5C5C5), thickness = 1.dp)
                                                    ActionButtonWithArrow("Información", R.drawable.sharp_info_outline_24, navController, backgroundColor = Color(0xFF5875DD), textColor = Color.Black) {
                                                        navController.navigate("profileInfoScreen") { launchSingleTop = true }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun ActionButtonWithArrow(text: String, iconResId: Int, navController: NavController, backgroundColor: Color = Color(0xFFB3CB54), textColor: Color = Color.Black, onClick: () -> Unit) {
                                        Row(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable(onClick = onClick)
                                                .padding(vertical = 12.dp),
                                            verticalAlignment = Alignment.CenterVertically
                                        ) {
                                            Box(
                                                modifier = Modifier
                                                    .size(40.dp)
                                                    .clip(CircleShape)
                                                    .background(backgroundColor), // Fondo circular para el icono
                                                contentAlignment = Alignment.Center
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = iconResId),
                                                    contentDescription = text,
                                                    tint = Color.White,
                                                    modifier = Modifier.size(24.dp)
                                                )
                                            }
                                            Spacer(modifier = Modifier.width(8.dp))
                                            Text(
                                                text = text,
                                                style = MaterialTheme.typography.bodyLarge,
                                                color = textColor,
                                                modifier = Modifier.weight(1f)
                                            )
                                            Icon(
                                                painter = painterResource(id = R.drawable.round_arrow_forward_ios_24),
                                                contentDescription = "Arrow",
                                                tint = Color.Black,
                                                modifier = Modifier.size(24.dp)
                                            )
                                        }
                                    }
                                    
                                    @SuppressLint("ResourceAsColor")
                                    @Composable
                                    fun ProfileImageWithMultiColorBorder(profileImageUri: Uri?) {
                                        Box(
                                            modifier = Modifier
                                                .size(106.dp) // Ajuste para dar espacio a los bordes
                                                .clip(CircleShape)
                                        ) {
                                            // Dibujo de los arcos de colores
                                            Canvas(modifier = Modifier.matchParentSize()) {
                                                drawArc(
                                                    color = Color(0xFFB3CB54),
                                                    startAngle = 0f,
                                                    sweepAngle = 90f,
                                                    useCenter = false,
                                                    style = Stroke(8.dp.toPx(), cap = StrokeCap.Round)
                                                )
                                                drawArc(
                                                    color = Color(0xFFC33BA5),
                                                    startAngle = 90f,
                                                    sweepAngle = 90f,
                                                    useCenter = false,
                                                    style = Stroke(8.dp.toPx(), cap = StrokeCap.Round)
                                                )
                                                drawArc(
                                                    color = Color(0xFFB3CB54),
                                                    startAngle = 180f,
                                                    sweepAngle = 90f,
                                                    useCenter = false,
                                                    style = Stroke(8.dp.toPx(), cap = StrokeCap.Round)
                                                )
                                                drawArc(
                                                    color = Color(0xFFC33BA5),
                                                    startAngle = 270f,
                                                    sweepAngle = 90f,
                                                    useCenter = false,
                                                    style = Stroke(8.dp.toPx(), cap = StrokeCap.Round)
                                                )
                                            }
                                    
                                            // Imagen de perfil (si existe)
                                            Box(
                                                modifier = Modifier
                                                    .size(100.dp) // Tamaño más pequeño para la imagen de perfil, respetando los bordes
                                                    .clip(CircleShape)
                                                    .align(Alignment.Center)
                                                    .background(Color.Gray), // Fondo gris por defecto
                                                contentAlignment = Alignment.Center
                                            ) {
                                                if (profileImageUri != null) {
                                                    Image(
                                                        painter = rememberAsyncImagePainter(profileImageUri),
                                                        contentDescription = "Profile Picture",
                                                        modifier = Modifier
                                                            .fillMaxSize()
                                                            .clip(CircleShape),
                                                        contentScale = ContentScale.Crop
                                                    )
                                                } else {
                                                    Image(
                                                        painter = painterResource(id = R.drawable.baseline_add_a_photo_24),
                                                        contentDescription = "Add Photo",
                                                        modifier = Modifier.size(50.dp),
                                                        colorFilter = ColorFilter.tint(Color.White)
                                                    )
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun ActionButton(text: String) {
                                        Button(onClick = { /* Acciones de botón */ }) {
                                            Text(text)
                                        }
                                    }
                                    
                                    
                                    
                                    
                                    @OptIn(UiToolingDataApi::class)
                                    @SuppressLint("MissingPermission") // Asegúrate de manejar permisos en el nivel de actividad
                                    suspend fun updateLocation(context: Context, onLocationUpdated: (String) -> Unit) {
                                        val fusedLocationClient: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
                                    
                                        withContext(Dispatchers.IO) {
                                            fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? ->
                                                location?.let {
                                                    val geocoder = Geocoder(context, Locale.getDefault())
                                                    val addresses = geocoder.getFromLocation(it.latitude, it.longitude, 1)
                                                    if (addresses != null) {
                                                        if (addresses.isNotEmpty()) {
                                                            val city = addresses[0].locality ?: "Ciudad desconocida"
                                                            val country = addresses[0].countryName ?: "País desconocido"
                                                            onLocationUpdated("$city, $country")
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    
                                    fun saveBitmapToInternalStorage(context: Context, bitmap: Bitmap): Uri? {
                                        val filename = "profile_image.png"
                                        val file = File(context.filesDir, filename)
                                        return try {
                                            val outputStream = FileOutputStream(file)
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
                                            outputStream.flush()
                                            outputStream.close()
                                            Uri.fromFile(file)
                                        } catch (e: IOException) {
                                            e.printStackTrace()
                                            null
                                        }
                                    }
                                    
                                    // Función para guardar la imagen en el almacenamiento interno
                                    fun saveImageToInternalStorage(context: Context, uri: Uri) {
                                        val file = File(context.filesDir, "profile_image.png")
                                        context.contentResolver.openInputStream(uri)?.use { inputStream ->
                                            FileOutputStream(file).use { outputStream ->
                                                inputStream.copyTo(outputStream)
                                            }
                                        }
                                    }
                                    
                                    // Función para guardar la URI de la imagen de perfil de manera persistente
                                    fun saveProfileImageUri(context: Context, uri: Uri) {
                                        val sharedPreferences = context.getSharedPreferences("profile_prefs", Context.MODE_PRIVATE)
                                        sharedPreferences.edit().putString("profile_image_uri", uri.toString()).apply()
                                    }
                                    
                                    // Función para obtener la URI de la imagen de perfil almacenada de manera persistente
                                    fun getProfileImageUri(context: Context): Uri? {
                                        val sharedPreferences = context.getSharedPreferences("profile_prefs", Context.MODE_PRIVATE)
                                        val uriString = sharedPreferences.getString("profile_image_uri", null)
                                        return uriString?.let { Uri.parse(it) }
                                    }
                                    ```
                            - **accounts/**
                                - AccountTransactionsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.accounts
                                    
                                    import android.content.Intent
                                    import android.net.Uri
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.KeyboardArrowDown
                                    import androidx.compose.material.icons.filled.KeyboardArrowUp
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material.icons.filled.Search
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.lifecycle.viewmodel.compose.viewModel
                                    import androidx.navigation.NavController
                                    import com.google.firebase.Timestamp
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import java.text.NumberFormat
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AccountTransactionsScreen(
                                        navController: NavController,
                                        accountName: String,
                                        viewModel: TransactionViewModel = viewModel()
                                    ) {
                                        var searchQuery by remember { mutableStateOf("") }
                                        val transactions by viewModel.transactions.collectAsState()
                                        val uiState by viewModel.uiState.collectAsState()
                                    
                                        LaunchedEffect(accountName) {
                                            viewModel.fetchTransactions(accountName)
                                        }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text(accountName) },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                        }
                                                    }
                                                )
                                            }
                                        ) { innerPadding ->
                                            when (uiState) {
                                                is TransactionViewModel.UiState.Loading -> {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.Center
                                                    ) {
                                                        CircularProgressIndicator()
                                                    }
                                                }
                                                is TransactionViewModel.UiState.Error -> {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.Center
                                                    ) {
                                                        Text(
                                                            text = "Error: ${(uiState as TransactionViewModel.UiState.Error).message}",
                                                            color = MaterialTheme.colorScheme.error
                                                        )
                                                    }
                                                }
                                                else -> {
                                                    Column(
                                                        modifier = Modifier
                                                            .fillMaxSize()
                                                            .padding(innerPadding)
                                                    ) {
                                                        OutlinedTextField(
                                                            value = searchQuery,
                                                            onValueChange = { searchQuery = it },
                                                            label = { Text("Buscar") },
                                                            leadingIcon = { Icon(Icons.Default.Search, contentDescription = "Search") },
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .padding(16.dp)
                                                        )
                                    
                                                        if (transactions.isEmpty()) {
                                                            Box(
                                                                modifier = Modifier.fillMaxSize(),
                                                                contentAlignment = Alignment.Center
                                                            ) {
                                                                Text("No hay transacciones aún", style = MaterialTheme.typography.bodyLarge)
                                                            }
                                                        } else {
                                                            LazyColumn(
                                                                modifier = Modifier.fillMaxSize()
                                                            ) {
                                                                val filteredTransactions = transactions.filter {
                                                                    it.transactionName.contains(searchQuery, ignoreCase = true)
                                                                }
                                    
                                                                val groupedTransactions = filteredTransactions.groupBy { normalizeDate(it.dateTime.toDate()) }
                                                                val sortedDates = groupedTransactions.keys.sortedDescending()
                                    
                                                                sortedDates.forEach { date ->
                                                                    val transactionsForDate = groupedTransactions[date] ?: return@forEach
                                    
                                                                    item {
                                                                        Text(
                                                                            text = formatDate(date),
                                                                            modifier = Modifier.padding(start = 16.dp, top = 16.dp, bottom = 8.dp),
                                                                            style = MaterialTheme.typography.labelLarge,
                                                                            color = Color.Gray
                                                                        )
                                                                    }
                                    
                                                                    items(transactionsForDate.sortedByDescending { it.dateTime }) { transaction ->
                                                                        TransactionItem(transaction, navController, accountName)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun TransactionItem(transaction: Transaction, navController: NavController, accountName: String) {
                                        val context = LocalContext.current
                                    
                                        // Determine background color based on anomalies
                                        val backgroundColor = when {
                                            transaction.locationAnomaly && transaction.amountAnomaly -> Color(0xFFFFE0E0) // Light red
                                            transaction.locationAnomaly || transaction.amountAnomaly -> Color(0xFFFFECB3) // Light orange
                                            else -> Color(0xFFF5F5F5) // Light grey
                                        }
                                    
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(horizontal = 16.dp, vertical = 8.dp)
                                                .clickable {
                                                    navController.navigate("transactionDetails/${transaction.accountId}/${transaction.id}")
                                                },
                                            colors = CardDefaults.cardColors(
                                                containerColor = backgroundColor
                                            )
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Row(
                                                    modifier = Modifier.fillMaxWidth(),
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Icon(
                                                        imageVector = if (transaction.transactionType == "Income") Icons.Default.KeyboardArrowUp
                                                        else Icons.Default.KeyboardArrowDown,
                                                        contentDescription = if (transaction.transactionType == "Income") "Income" else "Expense",
                                                        tint = if (transaction.transactionType == "Income") Color(0xFF2196F3) else Color(0xFFFF0000)
                                                    )
                                                    Spacer(modifier = Modifier.width(16.dp))
                                                    Column(modifier = Modifier.weight(1f)) {
                                                        Text(transaction.transactionName, fontWeight = FontWeight.Bold)
                                                        Text(
                                                            if (transaction.transactionType.equals("Income", ignoreCase = true)) "De" else "Para",
                                                            color = Color.Gray,
                                                            fontSize = 14.sp
                                                        )
                                                    }
                                                    Text(
                                                        formatCurrency(transaction.amount.toDouble()),
                                                        color = if (transaction.transactionType == "Income") Color(0xFF2196F3) else Color(0xFFFF0000),
                                                        fontWeight = FontWeight.Bold
                                                    )
                                                }
                                    
                                                // Anomaly indicators
                                                Row(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(top = 8.dp),
                                                    horizontalArrangement = Arrangement.spacedBy(16.dp)
                                                ) {
                                                    AnomalyIndicator(
                                                        label = "Ubicación",
                                                        isAnomaly = transaction.locationAnomaly
                                                    )
                                                    AnomalyIndicator(
                                                        label = "Monto",
                                                        isAnomaly = transaction.amountAnomaly
                                                    )
                                                }
                                    
                                                // Location button (if available)
                                                if (transaction.location != null) {
                                                    Row(
                                                        verticalAlignment = Alignment.CenterVertically,
                                                        modifier = Modifier
                                                            .clickable {
                                                                val uri = Uri.parse("geo:${transaction.location.latitude},${transaction.location.longitude}?q=${transaction.location.latitude},${transaction.location.longitude}")
                                                                val intent = Intent(Intent.ACTION_VIEW, uri)
                                                                context.startActivity(intent)
                                                            }
                                                            .padding(top = 8.dp)
                                                    ) {
                                                        Icon(
                                                            Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = Color.Gray,
                                                            modifier = Modifier.size(16.dp)
                                                        )
                                                        Spacer(modifier = Modifier.width(4.dp))
                                                        Text(
                                                            "Ver ubicación",
                                                            color = Color.Gray,
                                                            fontSize = 12.sp
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    private fun AnomalyIndicator(
                                        label: String,
                                        isAnomaly: Boolean
                                    ) {
                                        Row(
                                            verticalAlignment = Alignment.CenterVertically,
                                            horizontalArrangement = Arrangement.Start
                                        ) {
                                            Box(
                                                modifier = Modifier
                                                    .size(8.dp)
                                                    .background(
                                                        color = if (isAnomaly) Color(0xFFFF0000) else Color(0xFF4CAF50),
                                                        shape = CircleShape
                                                    )
                                            )
                                            Spacer(modifier = Modifier.width(4.dp))
                                            Text(
                                                text = label,
                                                fontSize = 12.sp,
                                                color = Color.Gray
                                            )
                                        }
                                    }
                                    
                                    private fun normalizeDate(date: Date): Date {
                                        val calendar = Calendar.getInstance()
                                        calendar.time = date
                                        calendar.set(Calendar.HOUR_OF_DAY, 0)
                                        calendar.set(Calendar.MINUTE, 0)
                                        calendar.set(Calendar.SECOND, 0)
                                        calendar.set(Calendar.MILLISECOND, 0)
                                        return calendar.time
                                    }
                                    
                                    private fun formatDate(date: Date): String {
                                        val calendar = Calendar.getInstance()
                                        calendar.time = date
                                    
                                        val today = Calendar.getInstance()
                                        today.set(Calendar.HOUR_OF_DAY, 0)
                                        today.set(Calendar.MINUTE, 0)
                                        today.set(Calendar.SECOND, 0)
                                        today.set(Calendar.MILLISECOND, 0)
                                    
                                        val yesterday = Calendar.getInstance()
                                        yesterday.add(Calendar.DAY_OF_YEAR, -1)
                                        yesterday.set(Calendar.HOUR_OF_DAY, 0)
                                        yesterday.set(Calendar.MINUTE, 0)
                                        yesterday.set(Calendar.SECOND, 0)
                                        yesterday.set(Calendar.MILLISECOND, 0)
                                    
                                        return when {
                                            calendar.time == today.time -> "Hoy"
                                            calendar.time == yesterday.time -> "Ayer"
                                            else -> {
                                                val formatter = SimpleDateFormat("d 'de' MMMM 'de' yyyy", Locale("es", "ES"))
                                                formatter.format(date)
                                            }
                                        }
                                    }
                                    
                                    private fun formatCurrency(amount: Double): String {
                                        val format = NumberFormat.getCurrencyInstance(Locale("es", "CO"))
                                        return format.format(amount)
                                    }                                    ```
                                - TransactionDetailsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.accounts
                                    
                                    import android.app.DatePickerDialog
                                    import android.util.Log
                                    import android.widget.Toast
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.Delete
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import com.google.android.gms.maps.model.CameraPosition
                                    import com.google.android.gms.maps.model.LatLng
                                    import com.google.firebase.Timestamp
                                    import com.google.maps.android.compose.*
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import kotlinx.coroutines.delay
                                    import kotlinx.coroutines.launch
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun TransactionDetailsScreen(
                                        navController: NavController,
                                        accountViewModel: AccountViewModel,
                                        transactionViewModel: TransactionViewModel,
                                        accountId: String,
                                        transactionId: String
                                    ) {
                                        val context = LocalContext.current
                                        val transaction by transactionViewModel.selectedTransaction.collectAsState()
                                        val uiState by transactionViewModel.uiState.collectAsState()
                                    
                                        var transactionName by remember { mutableStateOf("") }
                                        var amount by remember { mutableStateOf("") }
                                        var transactionType by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf<Timestamp?>(null) }
                                        var isLocationEnabled by remember { mutableStateOf(false) }
                                        var location by remember { mutableStateOf<Location?>(null) }
                                        var showDeleteConfirmation by remember { mutableStateOf(false) }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                    
                                        val defaultLocation = LatLng(4.6097100, -74.0817500) // Bogota
                                        var mapPosition by remember { mutableStateOf(defaultLocation) }
                                        val cameraPositionState = rememberCameraPositionState {
                                            position = CameraPosition.fromLatLngZoom(defaultLocation, 15f)
                                        }
                                    
                                        val coroutineScope = rememberCoroutineScope()
                                        val snackbarHostState = remember { SnackbarHostState() }
                                    
                                        // Load transaction data
                                        LaunchedEffect(Unit) {
                                            transactionViewModel.getTransaction(accountId, transactionId)
                                        }
                                    
                                        // Handle UI state
                                        LaunchedEffect(uiState) {
                                            when (uiState) {
                                                is TransactionViewModel.UiState.Error -> {
                                                    snackbarHostState.showSnackbar(
                                                        (uiState as TransactionViewModel.UiState.Error).message
                                                    )
                                                }
                                                else -> {}
                                            }
                                        }
                                    
                                        // Update local state when transaction loads
                                        LaunchedEffect(transaction) {
                                            transaction?.let {
                                                transactionName = it.transactionName
                                                amount = it.amount.toString()
                                                transactionType = it.transactionType
                                                selectedDate = it.dateTime
                                                location = it.location
                                                isLocationEnabled = it.location != null
                                                location?.let { loc ->
                                                    mapPosition = LatLng(loc.latitude, loc.longitude)
                                                    cameraPositionState.position = CameraPosition.fromLatLngZoom(
                                                        LatLng(loc.latitude, loc.longitude), 15f
                                                    )
                                                }
                                            }
                                        }
                                    
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                val calendar = Calendar.getInstance()
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            Calendar.getInstance().get(Calendar.YEAR),
                                            Calendar.getInstance().get(Calendar.MONTH),
                                            Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Edit Transaction") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, "Back")
                                                        }
                                                    },
                                                    actions = {
                                                        IconButton(
                                                            onClick = { showDeleteConfirmation = true },
                                                            enabled = transaction != null
                                                        ) {
                                                            Icon(Icons.Default.Delete, "Delete")
                                                        }
                                                    }
                                                )
                                            },
                                            snackbarHost = { SnackbarHost(snackbarHostState) }
                                        ) { padding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(padding)
                                                    .padding(16.dp)
                                                    .verticalScroll(rememberScrollState())
                                            ) {
                                                if (uiState is TransactionViewModel.UiState.Loading) {
                                                    CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                                                } else if (transaction == null) {
                                                    Text(
                                                        text = "Transaction not found",
                                                        color = MaterialTheme.colorScheme.error,
                                                        modifier = Modifier.align(Alignment.CenterHorizontally)
                                                    )
                                                } else {
                                                    OutlinedTextField(
                                                        value = transactionName,
                                                        onValueChange = { transactionName = it },
                                                        label = { Text("Transaction Name") },
                                                        modifier = Modifier.fillMaxWidth()
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedTextField(
                                                        value = amount,
                                                        onValueChange = {
                                                            amount = it.filter { char -> char.isDigit() || char == '.' }
                                                        },
                                                        label = { Text("Amount") },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedTransactionType,
                                                        onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                    ) {
                                                        TextField(
                                                            value = transactionType,
                                                            onValueChange = { },
                                                            readOnly = true,
                                                            label = { Text("Type") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expandedTransactionType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedTransactionType,
                                                            onDismissRequest = { expandedTransactionType = false }
                                                        ) {
                                                            DropdownMenuItem(
                                                                text = { Text("Income") },
                                                                onClick = {
                                                                    transactionType = "Income"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                            DropdownMenuItem(
                                                                text = { Text("Expense") },
                                                                onClick = {
                                                                    transactionType = "Expense"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedButton(
                                                        onClick = { datePickerDialog.show() },
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text(selectedDate?.toDate()?.toString() ?: "Select Date")
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        Icon(
                                                            Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = if (isLocationEnabled) MaterialTheme.colorScheme.primary else Color.Gray
                                                        )
                                                        Spacer(modifier = Modifier.width(8.dp))
                                                        Text(
                                                            "Include Location",
                                                            style = MaterialTheme.typography.bodyLarge.copy(
                                                                fontWeight = FontWeight.Medium
                                                            )
                                                        )
                                                        Spacer(modifier = Modifier.weight(1f))
                                                        Switch(
                                                            checked = isLocationEnabled,
                                                            onCheckedChange = { enabled ->
                                                                isLocationEnabled = enabled
                                                                if (enabled && location == null) {
                                                                    location = Location(defaultLocation.latitude, defaultLocation.longitude)
                                                                    mapPosition = defaultLocation
                                                                }
                                                            }
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Google Maps
                                                    Box(
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(300.dp)
                                                    ) {
                                                        GoogleMap(
                                                            modifier = Modifier.fillMaxSize(),
                                                            cameraPositionState = cameraPositionState,
                                                            properties = MapProperties(isMyLocationEnabled = false),
                                                            onMapClick = { latLng ->
                                                                if (isLocationEnabled) {
                                                                    mapPosition = latLng
                                                                    location = Location(latLng.latitude, latLng.longitude)
                                                                }
                                                            }
                                                        ) {
                                                            if (location != null) {
                                                                Marker(
                                                                    state = MarkerState(position = mapPosition),
                                                                    title = "Transaction Location"
                                                                )
                                                            }
                                                        }
                                    
                                                        if (!isLocationEnabled) {
                                                            Box(
                                                                modifier = Modifier
                                                                    .fillMaxSize()
                                                                    .background(MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)),
                                                                contentAlignment = Alignment.Center
                                                            ) {
                                                                Text(
                                                                    "Location Disabled",
                                                                    style = MaterialTheme.typography.titleMedium,
                                                                    color = MaterialTheme.colorScheme.onSurface
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    Button(
                                                        onClick = {
                                                            transaction?.let { currentTransaction ->
                                                                val updatedTransaction = Transaction(
                                                                    id = currentTransaction.id,
                                                                    accountId = currentTransaction.accountId,
                                                                    transactionName = transactionName,
                                                                    amount = (amount.toDoubleOrNull() ?: 0.0).toLong(),
                                                                    dateTime = selectedDate ?: Timestamp.now(),
                                                                    transactionType = transactionType,
                                                                    location = if (isLocationEnabled) location else null
                                                                )
                                                                coroutineScope.launch {
                                                                    try {
                                                                        transactionViewModel.updateTransaction(
                                                                            currentTransaction.accountId,
                                                                            currentTransaction,
                                                                            updatedTransaction
                                                                        )
                                                                        snackbarHostState.showSnackbar("Transaction updated successfully")
                                                                        navController.popBackStack()
                                                                    } catch (e: Exception) {
                                                                        snackbarHostState.showSnackbar("Failed to update transaction: ${e.message}")
                                                                        Log.e("TransactionUpdate", "Error updating transaction", e)
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        enabled = transaction != null
                                                    ) {
                                                        Text("Save Changes")
                                                    }
                                                }
                                            }
                                    
                                            if (showDeleteConfirmation) {
                                                AlertDialog(
                                                    onDismissRequest = { showDeleteConfirmation = false },
                                                    title = { Text("Delete Transaction") },
                                                    text = { Text("Are you sure you want to delete this transaction? This action cannot be undone.") },
                                                    confirmButton = {
                                                        Button(
                                                            onClick = {
                                                                transaction?.let {
                                                                    coroutineScope.launch {
                                                                        try {
                                                                            transactionViewModel.deleteTransaction(accountId, it)
                                                                            snackbarHostState.showSnackbar("Transaction deleted successfully")
                                                                            navController.popBackStack()
                                                                        } catch (e: Exception) {
                                                                            snackbarHostState.showSnackbar("Failed to delete transaction: ${e.message}")
                                                                            Log.e("TransactionDelete", "Error deleting transaction", e)
                                                                        }
                                                                    }
                                                                    showDeleteConfirmation = false
                                                                }
                                                            },
                                                            colors = ButtonDefaults.buttonColors(
                                                                containerColor = MaterialTheme.colorScheme.error
                                                            )
                                                        ) {
                                                            Text("Delete")
                                                        }
                                                    },
                                                    dismissButton = {
                                                        TextButton(onClick = { showDeleteConfirmation = false }) {
                                                            Text("Cancel")
                                                        }
                                                    }
                                                )
                                            }
                                        }
                                    }                                    ```
                                - AccountsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.view.accounts  // Ensure this matches the actual directory structure
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.lifecycle.viewmodel.compose.viewModel
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.views.transaction.AddTransactionModal
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    
                                    @Composable
                                    fun AccountsScreen(navController: NavController, accountViewModel: AccountViewModel, transactionViewModel: TransactionViewModel) {  // Make sure the parameter name is consistent
                                        val accounts by accountViewModel.accounts.collectAsState()
                                        val uiState by accountViewModel.uiState.collectAsState()
                                        var showEditModal by remember { mutableStateOf(false) }
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                        LaunchedEffect(Unit) {
                                            accountViewModel.fetchAccounts()
                                        }
                                    
                                        Scaffold(
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController, transactionViewModel = transactionViewModel,
                                                    accountViewModel)
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(16.dp)
                                            ) {
                                                Text(
                                                    "Accounts",
                                                    fontSize = 24.sp,
                                                    fontWeight = FontWeight.Bold
                                                )
                                                Text(
                                                    "These are your current accounts",
                                                    fontSize = 14.sp,
                                                    color = Color.Gray
                                                )
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                when (uiState) {
                                                    is AccountViewModel.UiState.Loading -> {
                                                        CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                                                    }
                                                    is AccountViewModel.UiState.Success -> {
                                                        LazyColumn(
                                                            verticalArrangement = Arrangement.spacedBy(8.dp)
                                                        ) {
                                                            items(accounts) { account ->
                                                                AccountItem(account, navController)
                                                            }
                                                        }
                                                    }
                                                    is AccountViewModel.UiState.Error -> {
                                                        Text(
                                                            text = (uiState as AccountViewModel.UiState.Error).message,
                                                            color = Color.Red
                                                        )
                                                    }
                                                    else -> {} // Idle state, do nothing
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                                Button(
                                                    onClick = { showEditModal = true },
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text("Edit Accounts")
                                                }
                                            }
                                        }
                                    
                                        if (showEditModal) {
                                            EditAccountModal(
                                                existingAccounts = accounts,
                                                onDismiss = { showEditModal = false },
                                                onCreateAccount = { accountType ->
                                                    accountViewModel.createAccount(accountType)
                                                },
                                                onDeleteAccount = { accountType ->
                                                    accountViewModel.deleteAccount(accountType)
                                                }
                                            )
                                        }
                                    
                                        if (showAddTransactionModal) {
                                            AddTransactionModal(
                                                accountViewModel = accountViewModel,
                                                transactionViewModel = transactionViewModel,
                                                onDismiss = { showAddTransactionModal = false },
                                                onTransactionAdded = {
                                                    showAddTransactionModal = false
                                                    accountViewModel.fetchAccounts()
                                                }
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun AccountItem(account: Account, navController: NavController) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(vertical = 8.dp),
                                            onClick = { navController.navigate("accountTransactions/${account.name}") }
                                        ) {
                                            Box(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .height(80.dp)
                                                    .background(account.color)
                                                    .padding(16.dp)
                                            ) {
                                                Column {
                                                    Text(
                                                        text = account.name,
                                                        color = Color.White,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                                    Text(
                                                        text = account.type,
                                                        color = Color.White.copy(alpha = 0.7f)
                                                    )
                                                }
                                                Text(
                                                    text = "$ ${account.amount}",
                                                    color = Color.White,
                                                    fontWeight = FontWeight.Bold,
                                                    modifier = Modifier.align(Alignment.CenterEnd)
                                                )
                                            }
                                        }
                                    }
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun EditAccountModal(
                                        existingAccounts: List<Account>,
                                        onDismiss: () -> Unit,
                                        onCreateAccount: (String) -> Unit,
                                        onDeleteAccount: (String) -> Unit
                                    ) {
                                        var selectedAccountType by remember { mutableStateOf("") }
                                        var selectedAction by remember { mutableStateOf("") }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                        var expandedAction by remember { mutableStateOf(false) }
                                        var showDeleteConfirmation by remember { mutableStateOf(false) }
                                    
                                        val availableAccountTypes = listOf("Nu", "Bancolombia", "Nequi")
                                            .filter { accountType -> existingAccounts.none { it.name == accountType } }
                                    
                                        val actions = if (availableAccountTypes.isEmpty()) listOf("Delete") else listOf("Create", "Delete")
                                    
                                        ModalBottomSheet(onDismissRequest = onDismiss) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Edit Accounts", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedAction,
                                                    onExpandedChange = { expandedAction = !expandedAction }
                                                ) {
                                                    TextField(
                                                        value = selectedAction,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        label = { Text("Action") },
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAction) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedAction,
                                                        onDismissRequest = { expandedAction = false }
                                                    ) {
                                                        actions.forEach { action ->
                                                            DropdownMenuItem(
                                                                text = { Text(action) },
                                                                onClick = {
                                                                    selectedAction = action
                                                                    expandedAction = false
                                                                    selectedAccountType = ""
                                                                }
                                                            )
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                if (selectedAction.isNotEmpty()) {
                                                    val applicableAccountTypes = if (selectedAction == "Create") availableAccountTypes else existingAccounts.map { it.name }
                                    
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedAccountType,
                                                        onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                    ) {
                                                        TextField(
                                                            value = selectedAccountType,
                                                            onValueChange = {},
                                                            readOnly = true,
                                                            label = { Text("Account Type") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedAccountType,
                                                            onDismissRequest = { expandedAccountType = false }
                                                        ) {
                                                            applicableAccountTypes.forEach { accountType ->
                                                                DropdownMenuItem(
                                                                    text = { Text(accountType) },
                                                                    onClick = {
                                                                        selectedAccountType = accountType
                                                                        expandedAccountType = false
                                                                    }
                                                                )
                                                            }
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                Button(
                                                    onClick = {
                                                        if (selectedAction == "Delete") {
                                                            showDeleteConfirmation = true
                                                        } else {
                                                            onCreateAccount(selectedAccountType)
                                                            onDismiss()
                                                        }
                                                    },
                                                    enabled = selectedAccountType.isNotEmpty(),
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text(selectedAction)
                                                }
                                            }
                                        }
                                    
                                        if (showDeleteConfirmation) {
                                            AlertDialog(
                                                onDismissRequest = { showDeleteConfirmation = false },
                                                title = { Text("Delete Account") },
                                                text = { Text("Are you sure you want to delete the account?") },
                                                confirmButton = {
                                                    TextButton(
                                                        onClick = {
                                                            onDeleteAccount(selectedAccountType)
                                                            showDeleteConfirmation = false
                                                            onDismiss()
                                                        }
                                                    ) {
                                                        Text("Yes")
                                                    }
                                                },
                                                dismissButton = {
                                                    TextButton(
                                                        onClick = { showDeleteConfirmation = false }
                                                    ) {
                                                        Text("No")
                                                    }
                                                }
                                            )
                                        }
                                    }
                                    ```
                            - **theme/**
                                - Color.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import androidx.compose.ui.graphics.Color
                                    
                                    val Purple80 = Color(0xFFD0BCFF)
                                    val PurpleGrey80 = Color(0xFFCCC2DC)
                                    val Pink80 = Color(0xFFEFB8C8)
                                    
                                    val Purple40 = Color(0xFF6650a4)
                                    val PurpleGrey40 = Color(0xFF625b71)
                                    val Pink40 = Color(0xFF7D5260)                                    ```
                                - Theme.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import android.os.Build
                                    import androidx.compose.foundation.isSystemInDarkTheme
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.darkColorScheme
                                    import androidx.compose.material3.dynamicDarkColorScheme
                                    import androidx.compose.material3.dynamicLightColorScheme
                                    import androidx.compose.material3.lightColorScheme
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    
                                    private val DarkColorScheme = darkColorScheme(
                                        primary = Purple80,
                                        onPrimary = Color.White, // Blanco para texto en modo oscuro
                                        secondary = PurpleGrey80,
                                        tertiary = Pink80
                                    )
                                    
                                    private val LightColorScheme = lightColorScheme(
                                        primary = Purple40,
                                        onPrimary = Color.Black, // Negro para texto en modo claro
                                        secondary = PurpleGrey40,
                                        tertiary = Pink40
                                    
                                        /* Otros colores predeterminados para sobreescribir
                                        background = Color(0xFFFFFBFE),
                                        surface = Color(0xFFFFFBFE),
                                        onSecondary = Color.White,
                                        onTertiary = Color.White,
                                        onBackground = Color(0xFF1C1B1F),
                                        onSurface = Color(0xFF1C1B1F),
                                        */
                                    )
                                    
                                    @Composable
                                    fun SpendiQTheme(
                                        darkTheme: Boolean = isSystemInDarkTheme(),
                                        // Dynamic color is available on Android 12+
                                        dynamicColor: Boolean = true,
                                        content: @Composable () -> Unit
                                    ) {
                                        val context = LocalContext.current
                                        val baseColorScheme = when {
                                            dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
                                                if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
                                            }
                                            darkTheme -> DarkColorScheme
                                            else -> LightColorScheme
                                        }
                                    
                                        // Sobrescribir onPrimary después de aplicar Dynamic Color
                                        val colorScheme = baseColorScheme.copy(
                                            onPrimary = if (darkTheme) Color.White else Color.Black
                                        )
                                    
                                        MaterialTheme(
                                            colorScheme = colorScheme,
                                            typography = Typography,
                                            content = content
                                        )
                                    }
                                    ```
                                - Type.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import androidx.compose.material3.Typography
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.sp
                                    
                                    // Set of Material typography styles to start with
                                    val Typography = Typography(
                                        bodyLarge = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Normal,
                                            fontSize = 16.sp,
                                            lineHeight = 24.sp,
                                            letterSpacing = 0.5.sp
                                        )
                                        /* Other default text styles to override
                                        titleLarge = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Normal,
                                            fontSize = 22.sp,
                                            lineHeight = 28.sp,
                                            letterSpacing = 0.sp
                                        ),
                                        labelSmall = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Medium,
                                            fontSize = 11.sp,
                                            lineHeight = 16.sp,
                                            letterSpacing = 0.5.sp
                                        )
                                        */
                                    )                                    ```
                            - **main/**
                                - MainContent.kt
                                    ```
                                        package com.isis3510.spendiq.views.main
                                    
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.KeyboardArrowDown
                                    import androidx.compose.material.icons.filled.KeyboardArrowUp
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import coil.compose.rememberImagePainter
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.viewmodel.OffersViewModel
                                    import com.google.firebase.Timestamp
                                    import com.isis3510.spendiq.viewmodel.TransactionViewModel
                                    import com.isis3510.spendiq.views.common.CreatePieChart
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    
                                    @Composable
                                    fun MainContent(
                                        navController: NavController,
                                        authViewModel: AuthViewModel,
                                        accountViewModel: AccountViewModel,
                                        promoViewModel: OffersViewModel,
                                        transactionViewModel: TransactionViewModel,
                                    ) {
                                        val accounts by accountViewModel.accounts.collectAsState()
                                        val promos by promoViewModel.offers.collectAsState()
                                        val currentMoney by accountViewModel.currentMoney.collectAsState()
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                        val uiState by transactionViewModel.uiState.collectAsState()
                                        val transactions by transactionViewModel.transactions.collectAsState()
                                        val (totalIncome, totalExpenses) = remember(transactions) {
                                            transactionViewModel.getIncomeAndExpenses()
                                        }
                                    
                                        LaunchedEffect(Unit) {
                                            accountViewModel.fetchAccounts()
                                            promoViewModel.fetchOffers()
                                            transactionViewModel.fetchAllTransactions()
                                        }
                                    
                                        Scaffold(
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    transactionViewModel,
                                                    accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            LazyColumn(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(16.dp),
                                                horizontalAlignment = Alignment.Start,
                                                verticalArrangement = Arrangement.Top
                                            ) {
                                                item {
                                                    Text(
                                                        text = SimpleDateFormat("EEE, d MMM", Locale.getDefault()).format(Date()),
                                                        style = MaterialTheme.typography.bodySmall,
                                                        modifier = Modifier.padding(bottom = 4.dp)
                                                    )
                                                    Text(
                                                        text = "Summary",
                                                        style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Medium)
                                                    )
                                                    Spacer(modifier = Modifier.height(8.dp))
                                                    Text(
                                                        text = "Take a look at your finances",
                                                        style = MaterialTheme.typography.bodyMedium
                                                    )
                                                    Spacer(modifier = Modifier.height(16.dp))
                                                    Text(
                                                        text = "Current available money",
                                                        style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                    )
                                                    Text(
                                                        text = "$ $currentMoney",
                                                        style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold),
                                                        modifier = Modifier.padding(vertical = 8.dp)
                                                    )
                                                    Spacer(modifier = Modifier.height(16.dp))
                                                }
                                    
                                                item {
                                                    Text(
                                                        text = "Accounts",
                                                        style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                    )
                                                    Spacer(modifier = Modifier.height(8.dp))
                                                }
                                    
                                                items(accounts) { account ->
                                                    AccountItem(account, navController)
                                                    Spacer(modifier = Modifier.height(8.dp))
                                                }
                                    
                                                item {
                                                    Spacer(modifier = Modifier.height(16.dp))
                                                    Text("Monthly Income/Expenses", style = MaterialTheme.typography.headlineMedium)
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Muestra un indicador de carga si la UI está en estado de carga
                                                    if (uiState is TransactionViewModel.UiState.Loading) {
                                                        CircularProgressIndicator()
                                                    } else {
                                                        if (totalIncome > 0 || totalExpenses > 0) {
                                                            //CreatePieChart(data = listOf("Income" to totalIncome, "Expenses" to totalExpenses))
                                                            Row(modifier = Modifier.fillMaxWidth()){
                                                                CreatePieChart(data = listOf("Income" to totalIncome, "Expenses" to totalExpenses))
                                    
                                                                Column(
                                                                    modifier = Modifier
                                                                        .fillMaxWidth()
                                                                        .padding(start = 16.dp),
                                                                    horizontalAlignment = Alignment.End
                                                                ) {
                                                                    Icon(
                                                                        imageVector = Icons.Default.KeyboardArrowUp,
                                                                        contentDescription = "Income Icon",
                                                                        tint = Color(0xffb3cb54)
                                                                    )
                                                                    Text(
                                                                        text = "$ $totalIncome",
                                                                        color = Color(0xffb3cb54),
                                                                        style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold)
                                                                    )
                                                                    Spacer(modifier = Modifier.height(8.dp))
                                                                    Text(
                                                                        text = "$ $totalExpenses",
                                                                        color = Color(0xffc33ba5),
                                                                        style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold)
                                                                    )
                                                                    Icon(
                                                                        imageVector = Icons.Default.KeyboardArrowDown,
                                                                        contentDescription = "Expenses Icon",
                                                                        tint = Color(0xffc33ba5)
                                                                    )
                                                                }
                                                            }
                                                        } else {
                                                            Text("You don't have any transactions.")
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                                    Text(
                                                        text = "Save with these promotions",
                                                        style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                    )
                                                    Spacer(modifier = Modifier.height(8.dp))
                                                }
                                    
                                                items(promos.take(3)) { promo ->
                                                    PromoItem(promo) {}
                                                    Spacer(modifier = Modifier.height(8.dp))
                                                }
                                    
                                                item {
                                                    Button(
                                                        onClick = { navController.navigate("promos") },
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text("See More Promotions")
                                                    }
                                                }
                                            }
                                    
                                            if (showAddTransactionModal) {
                                                AddTransactionModal(
                                                    accountViewModel = accountViewModel,
                                                    transactionViewModel,
                                                    accounts = accounts,
                                                    onDismiss = { showAddTransactionModal = false },
                                                    onTransactionAdded = {
                                                        showAddTransactionModal = false
                                                        accountViewModel.fetchAccounts()
                                                    }
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun AccountItem(account: Account, navController: NavController) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable { navController.navigate("accountTransactions/${account.name}") },
                                            colors = CardDefaults.cardColors(containerColor = account.color)
                                        ) {
                                            Column(modifier = Modifier.padding(16.dp)) {
                                                Text(
                                                    text = account.name,
                                                    color = androidx.compose.ui.graphics.Color.White,
                                                    fontWeight = FontWeight.Bold
                                                )
                                                Spacer(modifier = Modifier.height(4.dp))
                                                Text(
                                                    text = account.type,
                                                    color = androidx.compose.ui.graphics.Color.White.copy(alpha = 0.7f)
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                                Text(
                                                    text = "$ ${account.amount}",
                                                    color = androidx.compose.ui.graphics.Color.White,
                                                    fontWeight = FontWeight.Bold
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun PromoItem(promo: Offer, onClick: () -> Unit) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable(onClick = onClick),
                                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                                        ) {
                                            Column(modifier = Modifier.padding(16.dp)) {
                                                promo.placeName?.let { Text(it, fontSize = 18.sp, fontWeight = FontWeight.Bold) }
                                                Spacer(modifier = Modifier.height(4.dp))
                                                promo.offerDescription?.let { Text(it, fontSize = 14.sp) }
                                                Spacer(modifier = Modifier.height(4.dp))
                                                Text(
                                                    "Recommended: ${promo.recommendationReason}",
                                                    fontSize = 12.sp,
                                                    color = androidx.compose.ui.graphics.Color.Gray
                                                )
                                                Spacer(modifier = Modifier.height(4.dp))
                                                promo.shopImage?.let {
                                                    Image(
                                                        painter = rememberImagePainter(it),
                                                        contentDescription = "Shop Image",
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(150.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AddTransactionModal(
                                        accountViewModel: AccountViewModel,
                                        transactionViewModel: TransactionViewModel,
                                        accounts: List<Account>,
                                        onDismiss: () -> Unit,
                                        onTransactionAdded: () -> Unit
                                    ) {
                                        var amount by remember { mutableStateOf("") }
                                        var transactionName by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf(Timestamp.now()) }
                                        var selectedTransactionType by remember { mutableStateOf("Expense") }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var selectedAccountType by remember { mutableStateOf("Nu") }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                    
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                    
                                        val datePickerDialog = android.app.DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            calendar.get(Calendar.YEAR),
                                            calendar.get(Calendar.MONTH),
                                            calendar.get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        ModalBottomSheet(
                                            onDismissRequest = onDismiss
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Add Transaction", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                OutlinedTextField(
                                                    value = amount,
                                                    onValueChange = { amount = it.filter { char -> char.isDigit() } },
                                                    label = { Text("Amount") },
                                                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                OutlinedTextField(
                                                    value = transactionName,
                                                    onValueChange = { transactionName = it },
                                                    label = { Text("Transaction Name") },
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                Button(onClick = { datePickerDialog.show() }) {
                                                    Text("Select Date: ${SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(selectedDate.toDate())}")
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedTransactionType,
                                                    onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                ) {
                                                    TextField(
                                                        value = selectedTransactionType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedTransactionType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedTransactionType,
                                                        onDismissRequest = { expandedTransactionType = false }
                                                    ) {
                                                        DropdownMenuItem(
                                                            text = { Text("Income") },
                                                            onClick = {
                                                                selectedTransactionType = "Income"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                        DropdownMenuItem(
                                                            text = { Text("Expense") },
                                                            onClick = {
                                                                selectedTransactionType = "Expense"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedAccountType,
                                                    onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                ) {
                                                    TextField(
                                                        value = selectedAccountType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedAccountType,
                                                        onDismissRequest = { expandedAccountType = false }
                                                    ) {
                                                        accounts.forEach { account ->
                                                            DropdownMenuItem(
                                                                text = { Text(account.name) },
                                                                onClick = {
                                                                    selectedAccountType = account.name
                                                                    expandedAccountType = false
                                                                }
                                                            )
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                Button(
                                                    onClick = {
                                                        val transaction = Transaction(
                                                            id = "",
                                                            accountId = selectedAccountType,
                                                            transactionName = transactionName,
                                                            amount = amount.toLongOrNull() ?: 0L,
                                                            dateTime = selectedDate,
                                                            transactionType = selectedTransactionType,
                                                            location = null
                                                        )
                                                        transactionViewModel.addTransactionWithAccountCheck(transaction)
                                                        onTransactionAdded()
                                                        onDismiss()
                                                    },
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text("Add Transaction")
                                                }
                                            }
                                        }
                                    }
                                    ```
                        - **Services/**
                            - NotificationListener.kt
                                ```
                                package com.isis3510.spendiq.services
                                
                                import android.app.NotificationChannel
                                import android.app.NotificationManager
                                import android.content.Context
                                import android.os.Build
                                import android.service.notification.NotificationListenerService
                                import android.service.notification.StatusBarNotification
                                import android.util.Log
                                import androidx.core.app.NotificationCompat
                                import com.google.firebase.Timestamp
                                import com.google.firebase.auth.FirebaseAuth
                                import com.google.firebase.firestore.FirebaseFirestore
                                import com.isis3510.spendiq.R
                                import kotlinx.coroutines.*
                                import kotlinx.coroutines.tasks.await
                                
                                class NotificationListener : NotificationListenerService() {
                                
                                    private val firestore = FirebaseFirestore.getInstance()
                                    private lateinit var locationService: LocationService
                                    private val coroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
                                
                                    override fun onCreate() {
                                        super.onCreate()
                                        locationService = LocationService(this)
                                    }
                                
                                    override fun onDestroy() {
                                        super.onDestroy()
                                        coroutineScope.cancel()
                                    }
                                
                                    override fun onNotificationPosted(sbn: StatusBarNotification?) {
                                        super.onNotificationPosted(sbn)
                                
                                        sbn?.let {
                                            val notification = sbn.notification
                                            val extras = notification.extras
                                
                                            Log.d("NotificationListener", "Notification received from: ${sbn.packageName}")
                                
                                            val title = extras.getString("android.title", "No title") ?: "No title"
                                            val text = extras.getCharSequence("android.text", "No text").toString()
                                
                                            Log.d("NotificationListener", "Notification Title: $title")
                                            Log.d("NotificationListener", "Notification Text: $text")
                                
                                            if (text.contains("content hidden", ignoreCase = true)) {
                                                Log.d("NotificationListener", "Sensitive notification content is hidden. Unable to process.")
                                                return
                                            }
                                
                                            when {
                                                title.startsWith("Compra aprobada por") -> {
                                                    coroutineScope.launch {
                                                        processExpenseTransaction(text)
                                                    }
                                                }
                                                title == "Nu" -> {
                                                    coroutineScope.launch {
                                                        processIncomeTransaction(text)
                                                    }
                                                }
                                                else -> {
                                                    Log.d("NotificationListener", "Notification does not match the required title for processing.")
                                                }
                                            }
                                        }
                                    }
                                
                                    private suspend fun processIncomeTransaction(text: String) {
                                        val userId = getCurrentUserId() ?: return
                                
                                        val nuAccount = getNuAccount(userId)
                                        if (nuAccount == null) {
                                            Log.d("NotificationListener", "Nu account not found, creating new account.")
                                            createNuAccount(userId)
                                        }
                                
                                        val regex = Regex("([\\w\\s]+) te envio \\$([\\d,.]+) con motivo de ([\\w\\s]+)")
                                        val matchResult = regex.find(text)
                                
                                        matchResult?.let {
                                            val company = matchResult.groupValues[1]
                                            var amountString = matchResult.groupValues[2].replace(".", "")
                                
                                            if (amountString.contains(",")) {
                                                amountString = amountString.split(",")[0]
                                            }
                                
                                            val amount = amountString.toLong()
                                            val currentTimestamp = Timestamp.now()
                                
                                            // Retrieve location before proceeding with transaction
                                            val location = locationService.getCurrentLocation()
                                
                                            if (!transactionExists(userId, company, amount, currentTimestamp, "Income")) {
                                                Log.d("NotificationListener", "Processing income from $company, amount: $amount")
                                                addTransaction(userId, amount, company, "Income", location, automatic = true)
                                                updateNuAccountBalance(userId, amount)
                                                showNotification("Income Recorded", "Income of $$amount from $company has been recorded.")
                                            } else {
                                                Log.d("NotificationListener", "Duplicate income transaction detected. Skipping creation.")
                                            }
                                        } ?: run {
                                            Log.d("NotificationListener", "Income transaction format not matched.")
                                        }
                                    }
                                
                                    private suspend fun processExpenseTransaction(text: String) {
                                        val userId = getCurrentUserId() ?: return
                                
                                        val nuAccount = getNuAccount(userId)
                                        if (nuAccount == null) {
                                            Log.d("NotificationListener", "Nu account not found, creating new account.")
                                            createNuAccount(userId)
                                        }
                                
                                        val regex = Regex("Tu compra en ([\\w\\*\\s]+) por \\$([\\d,.]+) con tu tarjeta terminada en ([\\d]+)")
                                        val matchResult = regex.find(text)
                                
                                        matchResult?.let {
                                            val company = matchResult.groupValues[1]
                                            var amountString = matchResult.groupValues[2].replace(".", "")
                                
                                            if (amountString.contains(",")) {
                                                amountString = amountString.split(",")[0]
                                            }
                                
                                            val amount = amountString.toLong()
                                            val currentTimestamp = Timestamp.now()
                                
                                            // Retrieve location before proceeding with transaction
                                            val location = locationService.getCurrentLocation()
                                
                                            if (!transactionExists(userId, company, amount, currentTimestamp, "Expense")) {
                                                Log.d("NotificationListener", "Processing expense for $company, amount: $amount")
                                                addTransaction(userId, amount, company, "Expense", location, automatic = true)
                                                updateNuAccountBalance(userId, -amount)
                                                showNotification("Expense Recorded", "Expense of $$amount to $company has been recorded.")
                                            } else {
                                                Log.d("NotificationListener", "Duplicate expense transaction detected. Skipping creation.")
                                            }
                                        } ?: run {
                                            Log.d("NotificationListener", "Expense transaction format not matched.")
                                        }
                                    }
                                
                                    private suspend fun transactionExists(userId: String, transactionName: String, amount: Long, timestamp: Timestamp, transactionType: String): Boolean {
                                        return try {
                                            val startTime = Timestamp(timestamp.seconds - 60, timestamp.nanoseconds)
                                            val endTime = Timestamp(timestamp.seconds + 60, timestamp.nanoseconds)
                                
                                            val snapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (snapshot.documents.isNotEmpty()) {
                                                val accountId = snapshot.documents[0].id
                                                val transactionSnapshot = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .whereEqualTo("transactionName", transactionName)
                                                    .whereEqualTo("amount", amount)
                                                    .whereEqualTo("transactionType", transactionType)
                                                    .whereGreaterThan("dateTime", startTime)
                                                    .whereLessThan("dateTime", endTime)
                                                    .get()
                                                    .await()
                                
                                                transactionSnapshot.documents.isNotEmpty()
                                            } else {
                                                false
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error checking transaction existence: ${e.message}")
                                            false
                                        }
                                    }
                                
                                    private suspend fun getNuAccount(userId: String): Map<String, Any>? {
                                        return try {
                                            val snapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (snapshot.documents.isNotEmpty()) {
                                                snapshot.documents[0].data
                                            } else {
                                                null
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error fetching Nu account: ${e.message}")
                                            null
                                        }
                                    }
                                
                                    private suspend fun createNuAccount(userId: String) {
                                        try {
                                            firestore.collection("accounts").add(
                                                mapOf(
                                                    "amount" to 0L,
                                                    "name" to "Nu",
                                                    "user_id" to userId
                                                )
                                            ).await()
                                            Log.d("NotificationListener", "Nu account created successfully.")
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error creating Nu account: ${e.message}")
                                        }
                                    }
                                
                                    private suspend fun addTransaction(userId: String, amount: Long, transactionName: String, transactionType: String, location: android.location.Location?, automatic: Boolean) {
                                        try {
                                            val accountSnapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (accountSnapshot.documents.isNotEmpty()) {
                                                val accountId = accountSnapshot.documents[0].id
                                                val transaction = hashMapOf(
                                                    "amount" to amount,
                                                    "dateTime" to Timestamp.now(),
                                                    "accountID" to accountId,
                                                    "transactionName" to transactionName,
                                                    "transactionType" to transactionType,
                                                    "automatic" to automatic, // Adding the automatic field
                                                    "location" to if (location != null) {
                                                        hashMapOf(
                                                            "latitude" to location.latitude,
                                                            "longitude" to location.longitude
                                                        )
                                                    } else null
                                                )
                                
                                                firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .add(transaction)
                                                    .await()
                                                Log.d("NotificationListener", "Transaction added: $transactionName, Amount: $amount")
                                            } else {
                                                Log.e("NotificationListener", "No Nu account found for user: $userId")
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error adding transaction: ${e.message}")
                                        }
                                    }
                                
                                    private suspend fun updateNuAccountBalance(userId: String, amountDelta: Long) {
                                        try {
                                            val accountSnapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (accountSnapshot.documents.isNotEmpty()) {
                                                val accountId = accountSnapshot.documents[0].id
                                                val currentAmount = accountSnapshot.documents[0].getLong("amount") ?: 0L
                                                val newAmount = currentAmount + amountDelta
                                
                                                firestore.collection("accounts")
                                                    .document(accountId)
                                                    .update("amount", newAmount)
                                                    .await()
                                                Log.d("NotificationListener", "Nu account balance updated by $amountDelta. New balance: $newAmount")
                                            } else {
                                                Log.e("NotificationListener", "No Nu account found for user: $userId")
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error updating account balance: ${e.message}")
                                        }
                                    }
                                
                                    override fun onNotificationRemoved(sbn: StatusBarNotification?) {
                                        super.onNotificationRemoved(sbn)
                                        Log.d("NotificationListener", "Notification removed: ${sbn?.packageName}")
                                    }
                                
                                    private fun getCurrentUserId(): String? {
                                        val user = FirebaseAuth.getInstance().currentUser
                                        return user?.uid
                                    }
                                
                                    private fun showNotification(title: String, content: String) {
                                        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                                        val channelId = "SpendiQ_Channel"
                                        val channelName = "SpendiQ Notifications"
                                
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                            val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
                                            notificationManager.createNotificationChannel(channel)
                                        }
                                
                                        val notification = NotificationCompat.Builder(this, channelId)
                                            .setContentTitle(title)
                                            .setContentText(content)
                                            .setSmallIcon(R.drawable.notification)
                                            .setAutoCancel(true)
                                            .build()
                                
                                        notificationManager.notify(System.currentTimeMillis().toInt(), notification)
                                    }
                                }
                                ```
                            - AnomalyApiService.kt
                                ```
                                package com.isis3510.spendiq.Services
                                
                                import retrofit2.Retrofit
                                import retrofit2.converter.gson.GsonConverterFactory
                                import retrofit2.http.POST
                                import retrofit2.http.Path
                                import okhttp3.OkHttpClient
                                import java.util.concurrent.TimeUnit
                                
                                interface AnomalyApiService {
                                    @POST("api/analyze-transaction-complete/{user_id}/{transaction_id}")
                                    suspend fun analyzeTransaction(
                                        @Path("user_id") userId: String,
                                        @Path("transaction_id") transactionId: String
                                    )
                                
                                    companion object {
                                        private const val BASE_URL = "http://148.113.204.223:8000/"
                                
                                        fun create(): AnomalyApiService {
                                            val client = OkHttpClient.Builder()
                                                .connectTimeout(30, TimeUnit.SECONDS)
                                                .readTimeout(30, TimeUnit.SECONDS)
                                                .writeTimeout(30, TimeUnit.SECONDS)
                                                .build()
                                
                                            return Retrofit.Builder()
                                                .baseUrl(BASE_URL)
                                                .client(client)
                                                .addConverterFactory(GsonConverterFactory.create())
                                                .build()
                                                .create(AnomalyApiService::class.java)
                                        }
                                    }
                                }                                ```
                            - AuthenticationService.kt
                                ```
                                package com.isis3510.spendiq.services
                                
                                import com.google.firebase.auth.FirebaseAuth
                                import kotlinx.coroutines.tasks.await
                                import kotlinx.coroutines.flow.Flow
                                import kotlinx.coroutines.flow.flow
                                
                                interface AuthenticationServiceProtocol {
                                    fun login(email: String, password: String): Flow<Boolean>
                                    fun signUp(email: String, password: String): Flow<Boolean>
                                }
                                
                                class AuthenticationService : AuthenticationServiceProtocol {
                                    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
                                
                                    override fun login(email: String, password: String): Flow<Boolean> = flow {
                                        try {
                                            auth.signInWithEmailAndPassword(email, password).await()
                                            emit(true)
                                        } catch (e: Exception) {
                                            emit(false)
                                        }
                                    }
                                
                                    override fun signUp(email: String, password: String): Flow<Boolean> = flow {
                                        try {
                                            auth.createUserWithEmailAndPassword(email, password).await()
                                            emit(true)
                                        } catch (e: Exception) {
                                            emit(false)
                                        }
                                    }
                                }                                ```
                            - LocationService.kt
                                ```
                                package com.isis3510.spendiq.services
                                
                                import android.Manifest
                                import android.content.Context
                                import android.content.pm.PackageManager
                                import android.location.Location
                                import android.os.Looper
                                import androidx.core.app.ActivityCompat
                                import com.google.android.gms.location.*
                                import kotlinx.coroutines.suspendCancellableCoroutine
                                import kotlin.coroutines.resume
                                
                                class LocationService(private val context: Context) {
                                    private val fusedLocationClient: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
                                
                                    suspend fun getCurrentLocation(): Location? {
                                        if (ActivityCompat.checkSelfPermission(
                                                context,
                                                Manifest.permission.ACCESS_FINE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                                                context,
                                                Manifest.permission.ACCESS_COARSE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED
                                        ) {
                                            return null
                                        }
                                
                                        return suspendCancellableCoroutine { continuation ->
                                            fusedLocationClient.lastLocation
                                                .addOnSuccessListener { location ->
                                                    if (location != null) {
                                                        continuation.resume(location)
                                                    } else {
                                                        // If last known location is null, request a single update
                                                        val locationRequest = LocationRequest.create().apply {
                                                            priority = LocationRequest.PRIORITY_HIGH_ACCURACY
                                                            numUpdates = 1
                                                        }
                                                        val locationCallback = object : LocationCallback() {
                                                            override fun onLocationResult(locationResult: LocationResult) {
                                                                fusedLocationClient.removeLocationUpdates(this)
                                                                continuation.resume(locationResult.lastLocation)
                                                            }
                                                        }
                                                        fusedLocationClient.requestLocationUpdates(
                                                            locationRequest,
                                                            locationCallback,
                                                            Looper.getMainLooper()
                                                        )
                                                    }
                                                }
                                                .addOnFailureListener { exception ->
                                                    continuation.resume(null)
                                                }
                                
                                            continuation.invokeOnCancellation {
                                                fusedLocationClient.removeLocationUpdates(object : LocationCallback() {})
                                            }
                                        }
                                    }
                                }                                ```
                            - LocationBasedOfferService.kt
                                ```
                                package com.isis3510.spendiq.services
                                
                                import android.Manifest
                                import android.app.NotificationChannel
                                import android.app.NotificationManager
                                import android.content.Context
                                import android.content.pm.PackageManager
                                import android.os.Build
                                import android.os.Looper
                                import android.util.Log
                                import androidx.core.app.ActivityCompat
                                import androidx.core.app.NotificationCompat
                                import com.google.android.gms.location.*
                                import com.isis3510.spendiq.R
                                import com.isis3510.spendiq.model.data.Offer
                                import kotlinx.coroutines.CoroutineScope
                                import kotlinx.coroutines.Dispatchers
                                import kotlinx.coroutines.launch
                                import kotlin.math.*
                                
                                class LocationBasedOfferService(private val context: Context) {
                                    private val fusedLocationClient: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
                                    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                                    private val channelId = "OfferNotificationChannel"
                                    private val scope = CoroutineScope(Dispatchers.IO)
                                    private var activeOffers = listOf<Offer>()
                                
                                    // Track last notification time and last notified offer
                                    private var lastNotificationTime: Long = 0
                                    private var lastNotifiedOfferId: String? = null
                                    private val NOTIFICATION_COOLDOWN = 15 * 60 * 1000 // 15 minutes in milliseconds
                                    private val MAX_NOTIFICATION_DISTANCE = 1000.0 // 1km in meters
                                
                                    private val locationCallback = object : LocationCallback() {
                                        override fun onLocationResult(locationResult: LocationResult) {
                                            locationResult.lastLocation?.let { currentLocation ->
                                                checkNearbyOffers(currentLocation.latitude, currentLocation.longitude)
                                            }
                                        }
                                    }
                                
                                    init {
                                        createNotificationChannel()
                                    }
                                
                                    fun startMonitoring(offers: List<Offer>) {
                                        if (!hasLocationPermission()) {
                                            Log.d("LocationOfferService", "Missing location permission")
                                            return
                                        }
                                
                                        activeOffers = offers
                                
                                        val locationRequest = LocationRequest.create().apply {
                                            priority = LocationRequest.PRIORITY_HIGH_ACCURACY
                                            interval = 60000 // Update every minute
                                            fastestInterval = 30000 // Fastest update interval
                                        }
                                
                                        try {
                                            fusedLocationClient.requestLocationUpdates(
                                                locationRequest,
                                                locationCallback,
                                                Looper.getMainLooper()
                                            )
                                        } catch (e: SecurityException) {
                                            Log.e("LocationOfferService", "Error requesting location updates", e)
                                        }
                                    }
                                
                                    fun stopMonitoring() {
                                        fusedLocationClient.removeLocationUpdates(locationCallback)
                                        activeOffers = emptyList()
                                    }
                                
                                    private fun checkNearbyOffers(currentLat: Double, currentLon: Double) {
                                        scope.launch {
                                            val currentTime = System.currentTimeMillis()
                                
                                            // Check if enough time has passed since last notification
                                            if (currentTime - lastNotificationTime < NOTIFICATION_COOLDOWN) {
                                                return@launch
                                            }
                                
                                            // Find the closest offer within range
                                            val closestOffer = activeOffers
                                                .filter { offer ->
                                                    offer.id != null &&
                                                            offer.latitude != null &&
                                                            offer.longitude != null &&
                                                            offer.id != lastNotifiedOfferId // Exclude last notified offer
                                                }
                                                .map { offer ->
                                                    Pair(offer, calculateDistance(
                                                        currentLat, currentLon,
                                                        offer.latitude!!, offer.longitude!!
                                                    ))
                                                }
                                                .filter { (_, distance) -> distance <= MAX_NOTIFICATION_DISTANCE }
                                                .minByOrNull { (_, distance) -> distance }
                                
                                            closestOffer?.let { (offer, distance) ->
                                                sendOfferNotification(offer, distance.toInt())
                                                lastNotificationTime = currentTime
                                                lastNotifiedOfferId = offer.id
                                            }
                                        }
                                    }
                                
                                    private fun calculateDistance(lat1: Double, lon1: Double, lat2: Double, lon2: Double): Double {
                                        val r = 6371e3 // Earth's radius in meters
                                        val φ1 = lat1 * Math.PI / 180
                                        val φ2 = lat2 * Math.PI / 180
                                        val Δφ = (lat2 - lat1) * Math.PI / 180
                                        val Δλ = (lon2 - lon1) * Math.PI / 180
                                
                                        val a = sin(Δφ / 2) * sin(Δφ / 2) +
                                                cos(φ1) * cos(φ2) *
                                                sin(Δλ / 2) * sin(Δλ / 2)
                                        val c = 2 * atan2(sqrt(a), sqrt(1 - a))
                                
                                        return r * c
                                    }
                                
                                    private fun sendOfferNotification(offer: Offer, distance: Int) {
                                        val distanceText = when {
                                            distance < 100 -> "less than 100 meters"
                                            distance < 1000 -> "${(distance / 100) * 100} meters"
                                            else -> "${distance / 1000.0} km"
                                        }
                                
                                        val notification = NotificationCompat.Builder(context, channelId)
                                            .setContentTitle("Special Offer Nearby!")
                                            .setContentText("${offer.placeName} (${distanceText} away): ${offer.offerDescription}")
                                            .setStyle(NotificationCompat.BigTextStyle()
                                                .bigText("${offer.placeName} (${distanceText} away): ${offer.offerDescription}\n${offer.recommendationReason ?: ""}")
                                            )
                                            .setSmallIcon(R.drawable.notification)
                                            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                                            .setAutoCancel(true)
                                            .build()
                                
                                        notificationManager.notify(OFFER_NOTIFICATION_ID, notification)
                                    }
                                
                                    private fun createNotificationChannel() {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                            val name = "Nearby Offers"
                                            val descriptionText = "Notifications for nearby special offers"
                                            val importance = NotificationManager.IMPORTANCE_DEFAULT
                                            val channel = NotificationChannel(channelId, name, importance).apply {
                                                description = descriptionText
                                            }
                                            notificationManager.createNotificationChannel(channel)
                                        }
                                    }
                                
                                    private fun hasLocationPermission(): Boolean {
                                        return ActivityCompat.checkSelfPermission(
                                            context,
                                            Manifest.permission.ACCESS_FINE_LOCATION
                                        ) == PackageManager.PERMISSION_GRANTED
                                    }
                                
                                    companion object {
                                        private const val OFFER_NOTIFICATION_ID = 1001
                                    }
                                }                                ```
        - ic_launcher-playstore.png
            ```
            Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
