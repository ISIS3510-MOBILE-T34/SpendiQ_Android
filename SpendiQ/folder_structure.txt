# Folder structure for `app`

- proguard-rules.pro
    ```
    # Add project specific ProGuard rules here.
    # You can control the set of applied configuration files using the
    # proguardFiles setting in build.gradle.
    #
    # For more details, see
    #   http://developer.android.com/guide/developing/tools/proguard.html
    
    # If your project uses WebView with JS, uncomment the following
    # and specify the fully qualified class name to the JavaScript interface
    # class:
    #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
    #   public *;
    #}
    
    # Uncomment this to preserve the line number information for
    # debugging stack traces.
    #-keepattributes SourceFile,LineNumberTable
    
    # If you keep the line number information, uncomment this to
    # hide the original source file name.
    #-renamesourcefileattribute SourceFile    ```
- .gitignore
    ```
    /build    ```
- build.gradle.kts
    ```
    plugins {
        alias(libs.plugins.android.application)
        alias(libs.plugins.kotlin.android)
        id("com.google.gms.google-services")
    }
    
    android {
        namespace = "com.isis3510.spendiq"
        compileSdk = 34
    
        defaultConfig {
            applicationId = "com.isis3510.spendiq"
            minSdk = 24
            targetSdk = 34
            versionCode = 1
            versionName = "1.0"
    
            testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables {
                useSupportLibrary = true
            }
        }
    
        buildTypes {
            release {
                isMinifyEnabled = false
                proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
                )
            }
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = "1.8"
        }
        buildFeatures {
            compose = true
            viewBinding = true
        }
        composeOptions {
            kotlinCompilerExtensionVersion = "1.5.1"
        }
        packaging {
            resources {
                excludes += "/META-INF/{AL2.0,LGPL2.1}"
            }
        }
    }
    
    dependencies {
        // Firebase
        implementation(platform("com.google.firebase:firebase-bom:32.7.0"))
        implementation("com.google.firebase:firebase-analytics-ktx")
        implementation("com.google.firebase:firebase-auth-ktx")
        implementation("com.google.firebase:firebase-firestore-ktx")
        implementation("com.google.firebase:firebase-storage-ktx")
        implementation("com.google.firebase:firebase-analytics-ktx")
        implementation("com.google.maps.android:maps-compose:2.4.0")
    
        // Coil for image loading
        implementation("io.coil-kt:coil-compose:2.4.0")
    
        // AndroidX and Compose
        implementation(libs.androidx.core.ktx)
        implementation(libs.androidx.lifecycle.runtime.ktx)
        implementation(libs.androidx.activity.compose)
        implementation(platform(libs.androidx.compose.bom))
        implementation(libs.androidx.ui)
        implementation(libs.androidx.ui.graphics)
        implementation(libs.androidx.ui.tooling.preview)
        implementation(libs.androidx.material3)
        implementation(libs.androidx.biometric)
        implementation(libs.androidx.security.crypto)
    
        // Navigation and ViewModel
        implementation("androidx.navigation:navigation-compose:2.7.6")
        implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2")
        implementation("androidx.compose.runtime:runtime-livedata:1.5.4")
    
        // Image Loading
        implementation("io.coil-kt:coil-compose:2.4.0")
    
        // Location Services
        implementation("com.google.android.gms:play-services-location:21.0.1")
        implementation("com.google.android.gms:play-services-auth:20.5.0")
        implementation(libs.firebase.crashlytics.buildtools)
        implementation(libs.play.services.maps)
    
        // Testing
        testImplementation(libs.junit)
        androidTestImplementation(libs.androidx.junit)
        androidTestImplementation(libs.androidx.espresso.core)
        androidTestImplementation(platform(libs.androidx.compose.bom))
        androidTestImplementation(libs.androidx.ui.test.junit4)
        debugImplementation(libs.androidx.ui.tooling)
        debugImplementation(libs.androidx.ui.test.manifest)
    }    ```
- google-services.json
    ```
    {
      "project_info": {
        "project_number": "684669295151",
        "firebase_url": "https://spendiq-e31f0-default-rtdb.firebaseio.com",
        "project_id": "spendiq-e31f0",
        "storage_bucket": "spendiq-e31f0.appspot.com"
      },
      "client": [
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:a71dd269e2bffd470d84da",
            "android_client_info": {
              "package_name": "com.isis3510.spendiq"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        },
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:72976c99dbc376780d84da",
            "android_client_info": {
              "package_name": "s.s.s"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        },
        {
          "client_info": {
            "mobilesdk_app_id": "1:684669295151:android:d89eda12c69a8c740d84da",
            "android_client_info": {
              "package_name": "sdf.sdf.sdf"
            }
          },
          "oauth_client": [],
          "api_key": [
            {
              "current_key": "AIzaSyDioSCFcZivQpHJUXb-GNAdE8Spm-bOSPM"
            }
          ],
          "services": {
            "appinvite_service": {
              "other_platform_oauth_client": []
            }
          }
        }
      ],
      "configuration_version": "1"
    }    ```
- **.idea/**
    - migrations.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="ProjectMigrations">
            <option name="MigrateToGradleLocalJavaHome">
              <set>
                <option value="$PROJECT_DIR$" />
              </set>
            </option>
          </component>
        </project>        ```
    - gradle.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="GradleSettings">
            <option name="linkedExternalProjectsSettings">
              <GradleProjectSettings>
                <option name="externalProjectPath" value="$PROJECT_DIR$" />
                <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
                <option name="resolveExternalAnnotations" value="false" />
              </GradleProjectSettings>
            </option>
          </component>
        </project>        ```
    - vcs.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="VcsDirectoryMappings">
            <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
          </component>
        </project>        ```
    - workspace.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="AutoImportSettings">
            <option name="autoReloadType" value="NONE" />
          </component>
          <component name="ChangeListManager">
            <list default="true" id="227b5e8e-4964-4551-a9b7-59996885aab5" name="Changes" comment="">
              <change afterPath="$PROJECT_DIR$/google-services.json" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/gradle.xml" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/misc.xml" afterDir="false" />
              <change beforePath="$PROJECT_DIR$/../build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/../build.gradle.kts" afterDir="false" />
            </list>
            <option name="SHOW_DIALOG" value="false" />
            <option name="HIGHLIGHT_CONFLICTS" value="true" />
            <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
            <option name="LAST_RESOLUTION" value="IGNORE" />
          </component>
          <component name="ClangdSettings">
            <option name="formatViaClangd" value="false" />
          </component>
          <component name="ProjectColorInfo"><![CDATA[{
          "associatedIndex": 2
        }]]></component>
          <component name="ProjectId" id="2mqTTVy9FZepOiYTbhXlJLRmJfs" />
          <component name="ProjectViewState">
            <option name="hideEmptyMiddlePackages" value="true" />
            <option name="showLibraryContents" value="true" />
          </component>
          <component name="PropertiesComponent"><![CDATA[{
          "keyToString": {
            "RunOnceActivity.ShowReadmeOnStart": "true",
            "RunOnceActivity.cidr.known.project.marker": "true",
            "RunOnceActivity.readMode.enableVisualFormatting": "true",
            "android.gradle.sync.needed": "true",
            "cf.first.check.clang-format": "false",
            "cidr.known.project.marker": "true",
            "kotlin-language-version-configured": "true"
          }
        }]]></component>
          <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
          <component name="TaskManager">
            <task active="true" id="Default" summary="Default task">
              <changelist id="227b5e8e-4964-4551-a9b7-59996885aab5" name="Changes" comment="" />
              <created>1727803114577</created>
              <option name="number" value="Default" />
              <option name="presentableId" value="Default" />
              <updated>1727803114577</updated>
            </task>
            <servers />
          </component>
        </project>        ```
    - misc.xml
        ```
        <?xml version="1.0" encoding="UTF-8"?>
        <project version="4">
          <component name="ExternalStorageConfigurationManager" enabled="true" />
          <component name="ProjectRootManager">
            <output url="file://$PROJECT_DIR$/build/classes" />
          </component>
          <component name="ProjectType">
            <option name="id" value="Android" />
          </component>
        </project>        ```
    - **caches/**
        - deviceStreaming.xml
            ```
            <?xml version="1.0" encoding="UTF-8"?>
            <project version="4">
              <component name="DeviceStreaming">
                <option name="deviceSelectionList">
                  <list>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="27" />
                      <option name="brand" value="DOCOMO" />
                      <option name="codename" value="F01L" />
                      <option name="id" value="F01L" />
                      <option name="manufacturer" value="FUJITSU" />
                      <option name="name" value="F-01L" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="720" />
                      <option name="screenY" value="1280" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="28" />
                      <option name="brand" value="DOCOMO" />
                      <option name="codename" value="SH-01L" />
                      <option name="id" value="SH-01L" />
                      <option name="manufacturer" value="SHARP" />
                      <option name="name" value="AQUOS sense2 SH-01L" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2160" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="Lenovo" />
                      <option name="codename" value="TB370FU" />
                      <option name="id" value="TB370FU" />
                      <option name="manufacturer" value="Lenovo" />
                      <option name="name" value="Tab P12" />
                      <option name="screenDensity" value="340" />
                      <option name="screenX" value="1840" />
                      <option name="screenY" value="2944" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="31" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="a51" />
                      <option name="id" value="a51" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy A51" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="akita" />
                      <option name="id" value="akita" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="b0q" />
                      <option name="id" value="b0q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S22 Ultra" />
                      <option name="screenDensity" value="600" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3088" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="32" />
                      <option name="brand" value="google" />
                      <option name="codename" value="bluejay" />
                      <option name="id" value="bluejay" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 6a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="caiman" />
                      <option name="id" value="caiman" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="960" />
                      <option name="screenY" value="2142" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="comet" />
                      <option name="id" value="comet" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro Fold" />
                      <option name="screenDensity" value="390" />
                      <option name="screenX" value="2076" />
                      <option name="screenY" value="2152" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="29" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="crownqlteue" />
                      <option name="id" value="crownqlteue" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Note9" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2220" />
                      <option name="screenY" value="1080" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="dm3q" />
                      <option name="id" value="dm3q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S23 Ultra" />
                      <option name="screenDensity" value="600" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3088" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="e1q" />
                      <option name="id" value="e1q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S24" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2340" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix" />
                      <option name="id" value="felix" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix" />
                      <option name="id" value="felix" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="felix_camera" />
                      <option name="id" value="felix_camera" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Fold (Camera-enabled)" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="2208" />
                      <option name="screenY" value="1840" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="gts8uwifi" />
                      <option name="id" value="gts8uwifi" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Tab S8 Ultra" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="1848" />
                      <option name="screenY" value="2960" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="husky" />
                      <option name="id" value="husky" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8 Pro" />
                      <option name="screenDensity" value="390" />
                      <option name="screenX" value="1008" />
                      <option name="screenY" value="2244" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="motorola" />
                      <option name="codename" value="java" />
                      <option name="id" value="java" />
                      <option name="manufacturer" value="Motorola" />
                      <option name="name" value="G20" />
                      <option name="screenDensity" value="280" />
                      <option name="screenX" value="720" />
                      <option name="screenY" value="1600" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="komodo" />
                      <option name="id" value="komodo" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9 Pro XL" />
                      <option name="screenDensity" value="360" />
                      <option name="screenX" value="1008" />
                      <option name="screenY" value="2244" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="lynx" />
                      <option name="id" value="lynx" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 7a" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="31" />
                      <option name="brand" value="google" />
                      <option name="codename" value="oriole" />
                      <option name="id" value="oriole" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 6" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="panther" />
                      <option name="id" value="panther" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 7" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="q5q" />
                      <option name="id" value="q5q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy Z Fold5" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1812" />
                      <option name="screenY" value="2176" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="google" />
                      <option name="codename" value="r11" />
                      <option name="id" value="r11" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Watch" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="384" />
                      <option name="screenY" value="384" />
                      <option name="type" value="WEAR_OS" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="30" />
                      <option name="brand" value="google" />
                      <option name="codename" value="redfin" />
                      <option name="id" value="redfin" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 5" />
                      <option name="screenDensity" value="440" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2340" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="shiba" />
                      <option name="id" value="shiba" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 8" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2400" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="33" />
                      <option name="brand" value="google" />
                      <option name="codename" value="tangorpro" />
                      <option name="id" value="tangorpro" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel Tablet" />
                      <option name="screenDensity" value="320" />
                      <option name="screenX" value="1600" />
                      <option name="screenY" value="2560" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="34" />
                      <option name="brand" value="google" />
                      <option name="codename" value="tokay" />
                      <option name="id" value="tokay" />
                      <option name="manufacturer" value="Google" />
                      <option name="name" value="Pixel 9" />
                      <option name="screenDensity" value="420" />
                      <option name="screenX" value="1080" />
                      <option name="screenY" value="2424" />
                    </PersistentDeviceSelectionData>
                    <PersistentDeviceSelectionData>
                      <option name="api" value="29" />
                      <option name="brand" value="samsung" />
                      <option name="codename" value="x1q" />
                      <option name="id" value="x1q" />
                      <option name="manufacturer" value="Samsung" />
                      <option name="name" value="Galaxy S20" />
                      <option name="screenDensity" value="480" />
                      <option name="screenX" value="1440" />
                      <option name="screenY" value="3200" />
                    </PersistentDeviceSelectionData>
                  </list>
                </option>
              </component>
            </project>            ```
- **src/**
    - **androidTest/**
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - ExampleInstrumentedTest.kt
                            ```
                            package com.isis3510.spendiq
                            
                            import androidx.test.platform.app.InstrumentationRegistry
                            import androidx.test.ext.junit.runners.AndroidJUnit4
                            
                            import org.junit.Test
                            import org.junit.runner.RunWith
                            
                            import org.junit.Assert.*
                            
                            /**
                             * Instrumented test, which will execute on an Android device.
                             *
                             * See [testing documentation](http://d.android.com/tools/testing).
                             */
                            @RunWith(AndroidJUnit4::class)
                            class ExampleInstrumentedTest {
                                @Test
                                fun useAppContext() {
                                    // Context of the app under test.
                                    val appContext = InstrumentationRegistry.getInstrumentation().targetContext
                                    assertEquals("com.isis3510.spendiq", appContext.packageName)
                                }
                            }                            ```
    - **test/**
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - ExampleUnitTest.kt
                            ```
                            package com.isis3510.spendiq
                            
                            import org.junit.Test
                            
                            import org.junit.Assert.*
                            
                            /**
                             * Example local unit test, which will execute on the development machine (host).
                             *
                             * See [testing documentation](http://d.android.com/tools/testing).
                             */
                            class ExampleUnitTest {
                                @Test
                                fun addition_isCorrect() {
                                    assertEquals(4, 2 + 2)
                                }
                            }                            ```
    - **main/**
        - **res/**
            - **mipmap-mdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xce in position 4: invalid continuation byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xe4 in position 4: invalid continuation byte
            - **mipmap-hdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xcc in position 34: invalid continuation byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xbd in position 34: invalid start byte
            - **drawable/**
                - arrowup24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M7,14l5,-5 5,5z"/>
                        
                    </vector>
                    ```
                - logogroupstart.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - calendar24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M19,4h-1V2h-2v2H8V2H6v2H5C3.89,4 3.01,4.9 3.01,6L3,20c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2V6C21,4.9 20.1,4 19,4zM19,20H5V10h14V20zM9,14H7v-2h2V14zM13,14h-2v-2h2V14zM17,14h-2v-2h2V14zM9,18H7v-2h2V18zM13,18h-2v-2h2V18zM17,18h-2v-2h2V18z"/>
                        
                    </vector>
                    ```
                - phone24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M6.62,10.79c1.44,2.83 3.76,5.14 6.59,6.59l2.2,-2.2c0.27,-0.27 0.67,-0.36 1.02,-0.24 1.12,0.37 2.33,0.57 3.57,0.57 0.55,0 1,0.45 1,1V20c0,0.55 -0.45,1 -1,1 -9.39,0 -17,-7.61 -17,-17 0,-0.55 0.45,-1 1,-1h3.5c0.55,0 1,0.45 1,1 0,1.25 0.2,2.45 0.57,3.57 0.11,0.35 0.03,0.74 -0.25,1.02l-2.2,2.2z"/>
                        
                    </vector>
                    ```
                - email24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,4L4,4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,6c0,-1.1 -0.9,-2 -2,-2zM20,8l-8,5 -8,-5L4,6l8,5 8,-5v2z"/>
                        
                    </vector>
                    ```
                - leftactionable.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - ic_launcher_foreground.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android"
                        xmlns:aapt="http://schemas.android.com/aapt"
                        android:width="108dp"
                        android:height="108dp"
                        android:viewportWidth="108"
                        android:viewportHeight="108">
                        <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
                            <aapt:attr name="android:fillColor">
                                <gradient
                                    android:endX="85.84757"
                                    android:endY="92.4963"
                                    android:startX="42.9492"
                                    android:startY="49.59793"
                                    android:type="linear">
                                    <item
                                        android:color="#44000000"
                                        android:offset="0.0" />
                                    <item
                                        android:color="#00000000"
                                        android:offset="1.0" />
                                </gradient>
                            </aapt:attr>
                        </path>
                        <path
                            android:fillColor="#FFFFFF"
                            android:fillType="nonZero"
                            android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
                            android:strokeWidth="1"
                            android:strokeColor="#00000000" />
                    </vector>                    ```
                - arrowdown24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M7,10l5,5 5,-5z"/>
                        
                    </vector>
                    ```
                - logoup.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - logo_log_in.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - fingerprint.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - logodown.png
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte
                - person24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z"/>
                        
                    </vector>
                    ```
                - home24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z"/>
                        
                    </vector>
                    ```
                - add24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        
                    </vector>
                    ```
                - gift24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,6h-2.18c0.11,-0.31 0.18,-0.65 0.18,-1 0,-1.66 -1.34,-3 -3,-3 -1.05,0 -1.96,0.54 -2.5,1.35l-0.5,0.67 -0.5,-0.68C10.96,2.54 10.05,2 9,2 7.34,2 6,3.34 6,5c0,0.35 0.07,0.69 0.18,1L4,6c-1.11,0 -1.99,0.89 -1.99,2L2,19c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,8c0,-1.11 -0.89,-2 -2,-2zM15,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM9,4c0.55,0 1,0.45 1,1s-0.45,1 -1,1 -1,-0.45 -1,-1 0.45,-1 1,-1zM20,19L4,19v-2h16v2zM20,14L4,14L4,8h5.08L7,10.83 8.62,12 11,8.76l1,-1.36 1,1.36L15.38,12 17,10.83 14.92,8L20,8v6z"/>
                        
                    </vector>
                    ```
                - notification.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z"/>
                        
                    </vector>
                    ```
                - ic_launcher_background.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <vector xmlns:android="http://schemas.android.com/apk/res/android"
                        android:width="108dp"
                        android:height="108dp"
                        android:viewportWidth="108"
                        android:viewportHeight="108">
                        <path
                            android:fillColor="#3DDC84"
                            android:pathData="M0,0h108v108h-108z" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M9,0L9,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,0L19,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M29,0L29,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M39,0L39,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M49,0L49,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M59,0L59,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M69,0L69,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M79,0L79,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M89,0L89,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M99,0L99,108"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,9L108,9"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,19L108,19"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,29L108,29"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,39L108,39"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,49L108,49"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,59L108,59"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,69L108,69"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,79L108,79"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,89L108,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M0,99L108,99"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,29L89,29"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,39L89,39"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,49L89,49"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,59L89,59"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,69L89,69"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M19,79L89,79"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M29,19L29,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M39,19L39,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M49,19L49,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M59,19L59,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M69,19L69,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                        <path
                            android:fillColor="#00000000"
                            android:pathData="M79,19L79,89"
                            android:strokeWidth="0.8"
                            android:strokeColor="#33FFFFFF" />
                    </vector>
                    ```
                - creditcard24.xml
                    ```
                    <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
                          
                        <path android:fillColor="@android:color/white" android:pathData="M20,4L4,4c-1.11,0 -1.99,0.89 -1.99,2L2,18c0,1.11 0.89,2 2,2h16c1.11,0 2,-0.89 2,-2L22,6c0,-1.11 -0.89,-2 -2,-2zM20,18L4,18v-6h16v6zM20,8L4,8L4,6h16v2z"/>
                        
                    </vector>
                    ```
            - **mipmap-xxxhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xfc in position 4: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0xbf in position 24: invalid start byte
            - **mipmap-xxhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x8f in position 24: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x8f in position 24: invalid start byte
            - **values/**
                - colors.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <resources>
                        <color name="purple_200">#FFBB86FC</color>
                        <color name="purple_500">#FF6200EE</color>
                        <color name="purple_700">#FF3700B3</color>
                        <color name="teal_200">#FF03DAC5</color>
                        <color name="teal_700">#FF018786</color>
                        <color name="black">#FF000000</color>
                        <color name="white">#FFFFFFFF</color>
                        <color name="lavender">#8692f7</color>
                        <color name="grey">#ff424242</color>
                    </resources>                    ```
                - themes.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <resources>
                    
                        <style name="Theme.SpendiQ" parent="android:Theme.Material.Light.NoActionBar" />
                    </resources>                    ```
                - strings.xml
                    ```
                    <resources>
                        <string name="app_name">SpendiQ</string>
                    </resources>                    ```
            - **xml/**
                - backup_rules.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?><!--
                       Sample backup rules file; uncomment and customize as necessary.
                       See https://developer.android.com/guide/topics/data/autobackup
                       for details.
                       Note: This file is ignored for devices older that API 31
                       See https://developer.android.com/about/versions/12/backup-restore
                    -->
                    <full-backup-content>
                        <!--
                       <include domain="sharedpref" path="."/>
                       <exclude domain="sharedpref" path="device.xml"/>
                    -->
                    </full-backup-content>                    ```
                - data_extraction_rules.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?><!--
                       Sample data extraction rules file; uncomment and customize as necessary.
                       See https://developer.android.com/about/versions/12/backup-restore#xml-changes
                       for details.
                    -->
                    <data-extraction-rules>
                        <cloud-backup>
                            <!-- TODO: Use <include> and <exclude> to control what is backed up.
                            <include .../>
                            <exclude .../>
                            -->
                        </cloud-backup>
                        <!--
                        <device-transfer>
                            <include .../>
                            <exclude .../>
                        </device-transfer>
                        -->
                    </data-extraction-rules>                    ```
            - **mipmap-xhdpi/**
                - ic_launcher.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x80 in position 39: invalid start byte
                - ic_launcher_round.webp
                    ```
                    Error reading file: 'utf-8' codec can't decode byte 0x9d in position 34: invalid start byte
            - **mipmap-anydpi-v26/**
                - ic_launcher.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
                        <background android:drawable="@drawable/ic_launcher_background" />
                        <foreground android:drawable="@drawable/ic_launcher_foreground" />
                        <monochrome android:drawable="@drawable/ic_launcher_foreground" />
                    </adaptive-icon>                    ```
                - ic_launcher_round.xml
                    ```
                    <?xml version="1.0" encoding="utf-8"?>
                    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
                        <background android:drawable="@drawable/ic_launcher_background" />
                        <foreground android:drawable="@drawable/ic_launcher_foreground" />
                        <monochrome android:drawable="@drawable/ic_launcher_foreground" />
                    </adaptive-icon>                    ```
        - AndroidManifest.xml
            ```
            <?xml version="1.0" encoding="utf-8"?>
            <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                xmlns:tools="http://schemas.android.com/tools"
                package="com.isis3510.spendiq">
            
                <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
                <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
                <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
                <uses-permission android:name="android.permission.USE_BIOMETRIC" />
            
                <application
                    android:allowBackup="true"
                    android:dataExtractionRules="@xml/data_extraction_rules"
                    android:fullBackupContent="@xml/backup_rules"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:roundIcon="@mipmap/ic_launcher_round"
                    android:supportsRtl="true"
                    android:theme="@style/Theme.SpendiQ"
                    tools:targetApi="31">
            
                    <!-- Google Maps API Key -->
                    <meta-data
                        android:name="com.google.android.geo.API_KEY"
                        android:value="AIzaSyAknJmX2ZYLzwoddFByZnpGXyDmmcqS8cI"/>
            
                    <!-- MainActivity -->
                    <activity
                        android:name=".views.MainActivity"
                        android:exported="true"
                        android:label="@string/app_name"
                        android:theme="@style/Theme.SpendiQ">
                        <intent-filter>
                            <action android:name="android.intent.action.MAIN" />
                            <category android:name="android.intent.category.LAUNCHER" />
                        </intent-filter>
                    </activity>
            
                    <!-- Registering NotificationListenerService -->
                    <service
                        android:name=".Services.NotificationListener"
                        android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"
                        android:exported="false">
                        <intent-filter>
                            <action android:name="android.service.notification.NotificationListenerService" />
                        </intent-filter>
                    </service>
            
                </application>
            
            </manifest>
            ```
        - **java/**
            - **com/**
                - **isis3510/**
                    - **spendiq/**
                        - **viewmodel/**
                            - AuthViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.app.Application
                                import android.net.Uri
                                import androidx.lifecycle.AndroidViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.User
                                import com.isis3510.spendiq.model.repository.AuthRepository
                                import com.isis3510.spendiq.utils.BiometricHelper
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                import java.util.Date
                                import android.content.SharedPreferences
                                import android.util.Base64
                                import android.util.Log
                                import androidx.fragment.app.FragmentActivity
                                import androidx.security.crypto.EncryptedSharedPreferences
                                import androidx.security.crypto.MasterKey
                                
                                sealed class AuthState {
                                    data object Idle : AuthState()
                                    data object Loading : AuthState()
                                    data object Authenticated : AuthState()
                                    data object BiometricEnabled : AuthState() // Re-added this state
                                    data object PasswordResetEmailSent : AuthState() // Fixed the missing reference
                                    data object EmailVerificationSent : AuthState()
                                    data object EmailVerified : AuthState()
                                    data object EmailNotVerified : AuthState()
                                    data class Error(val message: String) : AuthState()
                                }
                                
                                class AuthViewModel(application: Application) : AndroidViewModel(application) {
                                    private val authRepository = AuthRepository(application)
                                
                                    private val _authState = MutableStateFlow<AuthState>(AuthState.Idle)
                                    val authState: StateFlow<AuthState> = _authState
                                
                                    private val _user = MutableStateFlow<User?>(null)
                                    val user: StateFlow<User?> = _user
                                
                                    private val _userData = MutableStateFlow<UserDataState>(UserDataState.Idle)
                                    val userData: StateFlow<UserDataState> = _userData
                                
                                    private val biometricHelper = BiometricHelper(application)
                                    private val encryptedPrefs by lazy { createEncryptedSharedPreferences() }
                                
                                    init {
                                        _user.value = authRepository.getCurrentUser()
                                        if (_user.value != null) {
                                            _authState.value = AuthState.Authenticated
                                        }
                                    }
                                
                                    fun register(email: String, password: String, fullName: String, phoneNumber: String, birthDate: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            val userData = mapOf(
                                                "fullName" to fullName,
                                                "email" to email,
                                                "phoneNumber" to phoneNumber,
                                                "birthDate" to birthDate,
                                                "registrationDate" to Date()
                                            )
                                            authRepository.register(email, password, userData).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> {
                                                        _user.value = result.getOrNull()
                                                        AuthState.Authenticated
                                                    }
                                                    result.isFailure -> {
                                                        val error = result.exceptionOrNull()
                                                        AuthState.Error(error?.message ?: "Registration failed")
                                                    }
                                                    else -> AuthState.Error("Unexpected error during registration")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun login(email: String, password: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            authRepository.login(email, password).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> {
                                                        _user.value = result.getOrNull()
                                                        AuthState.Authenticated
                                                    }
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Unknown error")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun logout() {
                                        authRepository.logout()
                                        _user.value = null
                                        _authState.value = AuthState.Idle
                                    }
                                
                                    fun saveUserData(data: Map<String, Any>) {
                                        viewModelScope.launch {
                                            _user.value?.let { user ->
                                                authRepository.saveUserData(user.id, data).collect { result ->
                                                    if (result.isFailure) {
                                                        _authState.value = AuthState.Error("Failed to save user data")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getUserData() {
                                        viewModelScope.launch {
                                            _userData.value = UserDataState.Loading
                                            _user.value?.let { user ->
                                                authRepository.getUserData(user.id).collect { result ->
                                                    _userData.value = if (result.isSuccess) {
                                                        UserDataState.Success(result.getOrNull() ?: emptyMap())
                                                    } else {
                                                        UserDataState.Error(result.exceptionOrNull()?.message ?: "Failed to get user data")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun uploadProfileImage(uri: Uri) {
                                        viewModelScope.launch {
                                            _userData.value = UserDataState.Loading
                                            authRepository.uploadProfileImage(uri).collect { result ->
                                                if (result.isSuccess) {
                                                    getUserData() // Refresh user data after successful upload
                                                } else {
                                                    _userData.value = UserDataState.Error(result.exceptionOrNull()?.message ?: "Failed to upload profile image")
                                                }
                                            }
                                        }
                                    }
                                
                                    sealed class UserDataState {
                                        data object Idle : UserDataState()
                                        data object Loading : UserDataState()
                                        data class Success(val data: Map<String, Any>) : UserDataState()
                                        data class Error(val message: String) : UserDataState()
                                    }
                                
                                    // Send email verification
                                    fun sendEmailVerification() {
                                        viewModelScope.launch {
                                            authRepository.sendEmailVerification().collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> AuthState.EmailVerificationSent
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Failed to send verification email")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Check if the user's email is verified
                                    fun checkEmailVerification() {
                                        viewModelScope.launch {
                                            authRepository.reloadUser().collect { result ->
                                                if (result.isSuccess) {
                                                    if (authRepository.isEmailVerified()) {
                                                        _authState.value = AuthState.EmailVerified
                                                    } else {
                                                        _authState.value = AuthState.EmailNotVerified
                                                    }
                                                } else {
                                                    _authState.value = AuthState.Error(result.exceptionOrNull()?.message ?: "Failed to check email verification")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Send password reset email
                                    fun sendPasswordResetEmail(email: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            authRepository.sendPasswordResetEmail(email).collect { result ->
                                                _authState.value = when {
                                                    result.isSuccess -> AuthState.PasswordResetEmailSent
                                                    result.isFailure -> AuthState.Error(result.exceptionOrNull()?.message ?: "Unknown error")
                                                    else -> AuthState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Biometric login setup
                                    fun setupBiometricPrompt(
                                        activity: FragmentActivity,
                                        onSuccess: () -> Unit,
                                        onError: (String) -> Unit
                                    ) {
                                        biometricHelper.setupBiometricPrompt(activity, onSuccess, onError)
                                    }
                                
                                    // Show biometric login prompt
                                    fun showBiometricPrompt() {
                                        biometricHelper.showBiometricPrompt()
                                    }
                                
                                    // Enable biometric login by saving credentials
                                    fun enableBiometricLogin(email: String, password: String) {
                                        viewModelScope.launch {
                                            _authState.value = AuthState.Loading
                                            authRepository.login(email, password).collect { result ->
                                                when {
                                                    result.isSuccess -> {
                                                        val user = result.getOrNull()
                                                        user?.let {
                                                            Log.d("AuthViewModel", "Login successful, storing credentials")
                                                            storeCredentials(email, password)
                                                            _authState.value = AuthState.BiometricEnabled
                                                        }
                                                    }
                                                    result.isFailure -> _authState.value = AuthState.Error("Failed to enable biometric login")
                                                }
                                            }
                                        }
                                    }
                                
                                    // Perform login using stored biometric credentials
                                    fun loginWithBiometrics() {
                                        val encryptedEmail = encryptedPrefs.getString("user_email", null)
                                        val encryptedPassword = encryptedPrefs.getString("user_password", null)
                                
                                        if (encryptedEmail == null || encryptedPassword == null) {
                                            _authState.value = AuthState.Error("No stored credentials found")
                                            return
                                        }
                                
                                        try {
                                            val email = String(Base64.decode(encryptedEmail, Base64.DEFAULT))
                                            val password = String(Base64.decode(encryptedPassword, Base64.DEFAULT))
                                            login(email, password)
                                        } catch (e: Exception) {
                                            _authState.value = AuthState.Error("Error processing credentials: ${e.message}")
                                        }
                                    }
                                
                                    // Store credentials securely for biometric login
                                    private fun storeCredentials(email: String, password: String) {
                                        val encryptedEmail = Base64.encodeToString(email.toByteArray(), Base64.DEFAULT)
                                        val encryptedPassword = Base64.encodeToString(password.toByteArray(), Base64.DEFAULT)
                                        encryptedPrefs.edit().apply {
                                            putString("user_email", encryptedEmail)
                                            putString("user_password", encryptedPassword)
                                            apply()
                                        }
                                    }
                                
                                    // Create encrypted SharedPreferences to store biometric login credentials
                                    private fun createEncryptedSharedPreferences(): SharedPreferences {
                                        val masterKey = MasterKey.Builder(getApplication())
                                            .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
                                            .build()
                                
                                        return EncryptedSharedPreferences.create(
                                            getApplication(),
                                            "secret_shared_prefs",
                                            masterKey,
                                            EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                                            EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                                        )
                                    }
                                
                                    // Reset authentication state
                                    fun resetAuthState() {
                                        _authState.value = AuthState.Idle
                                    }
                                }
                                ```
                            - PromoViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.Promo
                                import com.isis3510.spendiq.model.repository.PromoRepository
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                
                                class PromoViewModel : ViewModel() {
                                    private val promoRepository = PromoRepository()
                                
                                    private val _promos = MutableStateFlow<List<Promo>>(emptyList())
                                    val promos: StateFlow<List<Promo>> = _promos
                                
                                    private val _uiState = MutableStateFlow<UiState>(UiState.Idle)
                                    val uiState: StateFlow<UiState> = _uiState
                                
                                    init {
                                        fetchPromos()
                                    }
                                
                                    fun fetchPromos() {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            promoRepository.getPromos().collect { result ->
                                                when {
                                                    result.isSuccess -> {
                                                        _promos.value = result.getOrNull() ?: emptyList()
                                                        _uiState.value = UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        _uiState.value = UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch promos")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    sealed class UiState {
                                        object Idle : UiState()
                                        object Loading : UiState()
                                        object Success : UiState()
                                        data class Error(val message: String) : UiState()
                                    }
                                }                                ```
                            - OffersViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import android.util.Log
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.google.firebase.firestore.FirebaseFirestore
                                import com.isis3510.spendiq.model.data.Offer
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                import kotlinx.coroutines.tasks.await
                                
                                class OffersViewModel : ViewModel() {
                                    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
                                
                                    private val _offers = MutableStateFlow<List<Offer>>(emptyList())
                                    val offers: StateFlow<List<Offer>> = _offers
                                
                                    fun fetchOffers() {
                                        viewModelScope.launch {
                                            try {
                                                Log.d("OffersViewModel", "Fetching offers...")
                                                val snapshot = firestore.collection("offers").get().await()
                                                val offerList = snapshot.documents.mapNotNull { doc ->
                                                    try {
                                                        val offer = doc.toObject(Offer::class.java)
                                                        Log.d("OffersViewModel", "Successfully deserialized offer: $offer")
                                                        offer
                                                    } catch (e: Exception) {
                                                        Log.e("OffersViewModel", "Error deserializing document: ${doc.data} - ${e.message}")
                                                        null
                                                    }
                                                }
                                                _offers.value = offerList
                                                Log.d("OffersViewModel", "Fetched offers: $offerList")
                                            } catch (e: Exception) {
                                                Log.e("OffersViewModel", "Error fetching offers: ${e.message}")
                                                _offers.value = emptyList()
                                            }
                                        }
                                    }
                                
                                
                                }
                                ```
                            - AccountViewModel.kt
                                ```
                                package com.isis3510.spendiq.viewmodel
                                
                                import androidx.lifecycle.ViewModel
                                import androidx.lifecycle.viewModelScope
                                import com.isis3510.spendiq.model.data.Account
                                import com.isis3510.spendiq.model.data.Transaction
                                import com.isis3510.spendiq.model.repository.AccountRepository
                                import kotlinx.coroutines.flow.MutableStateFlow
                                import kotlinx.coroutines.flow.StateFlow
                                import kotlinx.coroutines.launch
                                
                                class AccountViewModel : ViewModel() {
                                    private val accountRepository = AccountRepository()
                                
                                    // State flows
                                    private val _accounts = MutableStateFlow<List<Account>>(emptyList())
                                    val accounts: StateFlow<List<Account>> = _accounts
                                
                                    private val _transactions = MutableStateFlow<List<Transaction>>(emptyList())
                                    val transactions: StateFlow<List<Transaction>> = _transactions
                                
                                    private val _uiState = MutableStateFlow<UiState>(UiState.Idle)
                                    val uiState: StateFlow<UiState> = _uiState
                                
                                    private val _currentMoney = MutableStateFlow(0L)
                                    val currentMoney: StateFlow<Long> = _currentMoney
                                
                                    private val _selectedTransaction = MutableStateFlow<Transaction?>(null)
                                    val selectedTransaction: StateFlow<Transaction?> = _selectedTransaction
                                
                                    init {
                                        fetchAccounts()
                                    }
                                
                                    fun fetchAccounts() {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.getAccounts().collect { result ->
                                                if (result.isSuccess) {
                                                    val accountList = result.getOrNull() ?: emptyList()
                                                    _accounts.value = accountList
                                                    _currentMoney.value = accountList.sumOf { it.amount }
                                                    _uiState.value = UiState.Success
                                                } else {
                                                    _uiState.value = UiState.Error(
                                                        result.exceptionOrNull()?.message ?: "Failed to fetch accounts"
                                                    )
                                                }
                                            }
                                        }
                                    }
                                
                                    fun createAccount(accountType: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.createAccount(accountType).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to create account")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun deleteAccount(accountType: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.deleteAccount(accountType).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to delete account")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun fetchTransactions(accountId: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.getTransactions(accountId).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        _transactions.value = result.getOrNull() ?: emptyList()
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to fetch transactions")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun addTransactionWithAccountCheck(transaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.addTransactionWithAccountCheck(transaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts() // Refresh accounts after adding transaction
                                                        fetchTransactions(transaction.accountId) // Refresh transactions
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to add transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun getTransaction(accountId: String, transactionId: String) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.getTransaction(accountId, transactionId).collect { result ->
                                                when {
                                                    result.isSuccess -> {
                                                        _selectedTransaction.value = result.getOrNull()
                                                        _uiState.value = UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        _uiState.value = UiState.Error(
                                                            result.exceptionOrNull()?.message ?: "Failed to get transaction"
                                                        )
                                                        _selectedTransaction.value = null
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    fun updateTransaction(accountId: String, oldTransaction: Transaction, newTransaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.updateTransaction(accountId, oldTransaction, newTransaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts() // Refresh accounts after update
                                                        fetchTransactions(oldTransaction.accountId) // Refresh transactions
                                                        _selectedTransaction.value = newTransaction // Update selected transaction
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to update transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun deleteTransaction(accountId: String, transaction: Transaction) {
                                        viewModelScope.launch {
                                            _uiState.value = UiState.Loading
                                            accountRepository.deleteTransaction(accountId, transaction).collect { result ->
                                                _uiState.value = when {
                                                    result.isSuccess -> {
                                                        fetchAccounts() // Refresh accounts after deletion
                                                        fetchTransactions(accountId) // Refresh transactions
                                                        _selectedTransaction.value = null // Clear selected transaction
                                                        UiState.Success
                                                    }
                                                    result.isFailure -> {
                                                        UiState.Error(result.exceptionOrNull()?.message ?: "Failed to delete transaction")
                                                    }
                                                    else -> UiState.Error("Unexpected error")
                                                }
                                            }
                                        }
                                    }
                                
                                    fun clearSelectedTransaction() {
                                        _selectedTransaction.value = null
                                    }
                                
                                    sealed class UiState {
                                        object Idle : UiState()
                                        object Loading : UiState()
                                        object Success : UiState()
                                        data class Error(val message: String) : UiState()
                                    }
                                }
                                ```
                        - **utils/**
                            - BiometricHelper.kt
                                ```
                                package com.isis3510.spendiq.utils
                                
                                import android.content.Context
                                import androidx.biometric.BiometricPrompt
                                import androidx.core.content.ContextCompat
                                import androidx.fragment.app.FragmentActivity
                                
                                class BiometricHelper(private val context: Context) {
                                    private lateinit var biometricPrompt: BiometricPrompt
                                    private lateinit var promptInfo: BiometricPrompt.PromptInfo
                                
                                    fun setupBiometricPrompt(activity: FragmentActivity, onSuccess: () -> Unit, onError: (String) -> Unit) {
                                        biometricPrompt = BiometricPrompt(activity, ContextCompat.getMainExecutor(context),
                                            object : BiometricPrompt.AuthenticationCallback() {
                                                override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {
                                                    super.onAuthenticationSucceeded(result)
                                                    onSuccess()
                                                }
                                
                                                override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
                                                    super.onAuthenticationError(errorCode, errString)
                                                    onError(errString.toString())
                                                }
                                            })
                                
                                        promptInfo = BiometricPrompt.PromptInfo.Builder()
                                            .setTitle("Autenticación biométrica")
                                            .setSubtitle("Inicia sesión usando tu huella dactilar")
                                            .setNegativeButtonText("Cancelar")
                                            .build()
                                    }
                                
                                    fun showBiometricPrompt() {
                                        biometricPrompt.authenticate(promptInfo)
                                    }
                                }                                ```
                        - **model/**
                            - **repository/**
                                - AccountRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.data.Location
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    import com.google.firebase.Timestamp
                                    import android.util.Log
                                    import androidx.compose.ui.graphics.Color
                                    
                                    class AccountRepository {
                                        private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
                                        private val auth: FirebaseAuth = FirebaseAuth.getInstance()
                                    
                                        companion object {
                                            private val DEFAULT_LOCATION = Location(
                                                latitude = 4.6097100,  // Bogota's coordinates
                                                longitude = -74.0817500
                                            )
                                        }
                                    
                                        // Get all accounts for the current user
                                        fun getAccounts(): Flow<Result<List<Account>>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                val snapshot = firestore.collection("accounts")
                                                    .whereEqualTo("user_id", userId)
                                                    .get()
                                                    .await()
                                    
                                                val accounts = snapshot.documents.mapNotNull { doc ->
                                                    Account(
                                                        id = doc.id,
                                                        name = doc.getString("name") ?: return@mapNotNull null,
                                                        type = "Debit",
                                                        amount = doc.getLong("amount") ?: 0L,
                                                        color = getColorForAccount(doc.getString("name") ?: "")
                                                    )
                                                }
                                                emit(Result.success(accounts))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error fetching accounts", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Create a new account
                                        fun createAccount(accountType: String): Flow<Result<Unit>> = flow {
                                            try {
                                                val userId = auth.currentUser?.uid ?: throw Exception("User not authenticated")
                                                firestore.collection("accounts").add(
                                                    mapOf(
                                                        "name" to accountType,
                                                        "amount" to 0L,
                                                        "user_id" to userId
                                                    )
                                                ).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error creating account", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Delete an account
                                        fun deleteAccount(accountId: String): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountRef = firestore.collection("accounts").document(accountId)
                                    
                                                // Fetch transactions outside of the transaction
                                                val transactionsSnapshot = accountRef.collection("transactions").get().await()
                                    
                                                firestore.runTransaction { transaction ->
                                                    for (transactionDoc in transactionsSnapshot.documents) {
                                                        transaction.delete(transactionDoc.reference)
                                                    }
                                                    transaction.delete(accountRef)
                                                }.await()
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error deleting account", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Get specific transaction by accountId and transactionId
                                        fun getTransaction(accountId: String, transactionId: String): Flow<Result<Transaction>> = flow {
                                            try {
                                                val transactionDoc = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .document(transactionId)
                                                    .get()
                                                    .await()
                                    
                                                if (!transactionDoc.exists()) {
                                                    emit(Result.failure(Exception("Transaction not found")))
                                                    return@flow
                                                }
                                    
                                                val transaction = Transaction(
                                                    id = transactionDoc.id,
                                                    accountId = accountId,
                                                    transactionName = transactionDoc.getString("transactionName") ?: "",
                                                    amount = transactionDoc.getLong("amount") ?: 0L,
                                                    dateTime = transactionDoc.getTimestamp("dateTime") ?: Timestamp.now(),
                                                    transactionType = transactionDoc.getString("transactionType") ?: "",
                                                    location = transactionDoc.get("location")?.let { locationMap ->
                                                        if (locationMap is Map<*, *>) {
                                                            Location(
                                                                latitude = (locationMap["latitude"] as? Double) ?: DEFAULT_LOCATION.latitude,
                                                                longitude = (locationMap["longitude"] as? Double) ?: DEFAULT_LOCATION.longitude
                                                            )
                                                        } else null
                                                    }
                                                )
                                                emit(Result.success(transaction))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error fetching transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Get transactions for an account using accountId
                                        fun getTransactions(accountId: String): Flow<Result<List<Transaction>>> = flow {
                                            try {
                                                val transactionsSnapshot = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .get()
                                                    .await()
                                    
                                                val transactions = transactionsSnapshot.documents.mapNotNull { doc ->
                                                    Transaction(
                                                        id = doc.id,
                                                        accountId = accountId,
                                                        transactionName = doc.getString("transactionName") ?: return@mapNotNull null,
                                                        amount = doc.getLong("amount") ?: return@mapNotNull null,
                                                        dateTime = doc.getTimestamp("dateTime") ?: return@mapNotNull null,
                                                        transactionType = doc.getString("transactionType") ?: return@mapNotNull null,
                                                        location = doc.get("location")?.let { locationMap ->
                                                            if (locationMap is Map<*, *>) {
                                                                val latitude = (locationMap["latitude"] as? Double) ?: return@mapNotNull null
                                                                val longitude = (locationMap["longitude"] as? Double) ?: return@mapNotNull null
                                                                Location(latitude, longitude)
                                                            } else null
                                                        }
                                                    )
                                                }
                                    
                                                emit(Result.success(transactions))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error fetching transactions", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                        // Add transaction with account check and ensure transaction ID is stored correctly
                                        fun addTransactionWithAccountCheck(transaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountId = transaction.accountId
                                    
                                                // Generate a new document reference for the transaction (this will generate a unique ID)
                                                val transactionRef = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .document() // This creates a unique ID
                                    
                                                // Update the transaction object with the generated transaction ID
                                                val transactionWithId = transaction.copy(id = transactionRef.id)
                                    
                                                // Prepare the transaction data to be stored, including the generated transaction ID
                                                val transactionMap = hashMapOf(
                                                    "transactionId" to transactionWithId.id, // Storing the Firestore-generated transaction ID
                                                    "amount" to transactionWithId.amount,
                                                    "dateTime" to transactionWithId.dateTime,
                                                    "transactionName" to transactionWithId.transactionName,
                                                    "transactionType" to transactionWithId.transactionType,
                                                    "location" to transactionWithId.location?.let {
                                                        hashMapOf(
                                                            "latitude" to it.latitude,
                                                            "longitude" to it.longitude
                                                        )
                                                    }
                                                )
                                    
                                                // Save the transaction data to Firestore using the generated ID
                                                transactionRef.set(transactionMap).await()
                                    
                                                // Update account balance
                                                updateAccountBalance(accountId, transactionWithId)
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error adding transaction with account check", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                    
                                    
                                        // Update account balance after transaction
                                        private suspend fun updateAccountBalance(accountId: String, transaction: Transaction) {
                                            val accountRef = firestore.collection("accounts").document(accountId)
                                    
                                            firestore.runTransaction { transactionObj ->
                                                val account = transactionObj.get(accountRef)
                                                val currentBalance = account.getLong("amount") ?: 0L
                                                val adjustment = if (transaction.transactionType == "Income") {
                                                    transaction.amount
                                                } else {
                                                    -transaction.amount
                                                }
                                                transactionObj.update(accountRef, "amount", currentBalance + adjustment)
                                            }.await()
                                        }
                                    
                                        fun updateTransaction(accountId: String, oldTransaction: Transaction, newTransaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountRef = firestore.collection("accounts").document(accountId)
                                                val transactionRef = accountRef.collection("transactions").document(oldTransaction.id)
                                    
                                                // Check if the transaction exists before updating
                                                val transactionDoc = transactionRef.get().await()
                                                if (!transactionDoc.exists()) {
                                                    emit(Result.failure(Exception("Transaction does not exist for update.")))
                                                    return@flow
                                                }
                                    
                                                firestore.runTransaction { transaction ->
                                                    // Get the account document and current balance
                                                    val account = transaction.get(accountRef)
                                                    val currentBalance = account.getLong("amount") ?: 0L
                                    
                                                    // Calculate the balance adjustment based on the old and new transaction amounts
                                                    val oldAmount = if (oldTransaction.transactionType == "Income") oldTransaction.amount else -oldTransaction.amount
                                                    val newAmount = if (newTransaction.transactionType == "Income") newTransaction.amount else -newTransaction.amount
                                                    val balanceAdjustment = newAmount - oldAmount
                                    
                                                    // Update the transaction details
                                                    transaction.set(transactionRef, mapOf(
                                                        "transactionName" to newTransaction.transactionName,
                                                        "amount" to newTransaction.amount,
                                                        "dateTime" to newTransaction.dateTime,
                                                        "transactionType" to newTransaction.transactionType,
                                                        "location" to newTransaction.location?.let {
                                                            mapOf("latitude" to it.latitude, "longitude" to it.longitude)
                                                        }
                                                    ))
                                    
                                                    // Update the account's balance
                                                    transaction.update(accountRef, "amount", currentBalance + balanceAdjustment)
                                                }.await()
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error updating transaction", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun deleteTransaction(accountId: String, transaction: Transaction): Flow<Result<Unit>> = flow {
                                            try {
                                                val accountRef = firestore.collection("accounts").document(accountId)
                                                val transactionRef = accountRef.collection("transactions").document(transaction.id)
                                    
                                                firestore.runTransaction { trans ->
                                                    // Get the account document and current balance
                                                    val account = trans.get(accountRef)
                                                    val currentBalance = account.getLong("amount") ?: 0L
                                    
                                                    // Calculate the amount to remove based on transaction type
                                                    val amountToRemove = if (transaction.transactionType == "Income") transaction.amount else -transaction.amount
                                    
                                                    // Delete the transaction document
                                                    trans.delete(transactionRef)
                                    
                                                    // Update the account's balance after deleting the transaction
                                                    trans.update(accountRef, "amount", currentBalance - amountToRemove)
                                                }.await()
                                    
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                Log.e("AccountRepository", "Error during transaction deletion", e)
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Get color for accounts
                                        private fun getColorForAccount(accountName: String): Color {
                                            return when (accountName) {
                                                "Nu" -> Color(0xFF9747FF)
                                                "Bancolombia" -> Color(0xFFFFCC00)
                                                "Nequi" -> Color(0xFF8B2F87)
                                                else -> Color.Gray
                                            }
                                        }
                                    }
                                    ```
                                - PromoRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.isis3510.spendiq.model.data.Promo
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    import java.util.Date
                                    
                                    class PromoRepository {
                                        private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
                                    
                                        fun getPromos(): Flow<Result<List<Promo>>> = flow {
                                            try {
                                                val currentDate = Date()
                                                val snapshot = firestore.collection("promos")
                                                    .whereGreaterThan("expirationDate", currentDate)
                                                    .get()
                                                    .await()
                                    
                                                val promos = snapshot.documents.mapNotNull { doc ->
                                                    Promo(
                                                        id = doc.id,
                                                        title = doc.getString("title") ?: return@mapNotNull null,
                                                        description = doc.getString("description") ?: return@mapNotNull null,
                                                        imageUrl = doc.getString("imageUrl") ?: return@mapNotNull null,
                                                        discountCode = doc.getString("discountCode") ?: return@mapNotNull null,
                                                        restaurantName = doc.getString("restaurantName") ?: return@mapNotNull null,
                                                        expirationDate = doc.getDate("expirationDate") ?: return@mapNotNull null
                                                    )
                                                }
                                                emit(Result.success(promos))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    }                                    ```
                                - AuthRepository.kt
                                    ```
                                    package com.isis3510.spendiq.model.repository
                                    
                                    import android.content.Context
                                    import android.net.Uri
                                    import com.google.firebase.auth.FirebaseAuth
                                    import com.google.firebase.firestore.FirebaseFirestore
                                    import com.google.firebase.storage.FirebaseStorage
                                    import com.isis3510.spendiq.model.data.User
                                    import kotlinx.coroutines.flow.Flow
                                    import kotlinx.coroutines.flow.flow
                                    import kotlinx.coroutines.tasks.await
                                    
                                    class AuthRepository(private val context: Context) {
                                        private val auth: FirebaseAuth = FirebaseAuth.getInstance()
                                        private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()
                                        private val storage: FirebaseStorage = FirebaseStorage.getInstance()
                                    
                                        fun login(email: String, password: String): Flow<Result<User>> = flow {
                                            try {
                                                val result = auth.signInWithEmailAndPassword(email, password).await()
                                                result.user?.let {
                                                    val user = User(it.uid, it.email ?: "")
                                                    emit(Result.success(user))
                                                } ?: emit(Result.failure(Exception("Login failed")))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun register(email: String, password: String, userData: Map<String, Any>): Flow<Result<User>> = flow {
                                            try {
                                                val result = auth.createUserWithEmailAndPassword(email, password).await()
                                                result.user?.let { firebaseUser ->
                                                    val user = User(firebaseUser.uid, email)
                                                    firestore.collection("users").document(user.id)
                                                        .set(userData)
                                                        .await()
                                                    emit(Result.success(user))
                                                } ?: emit(Result.failure(Exception("Registration failed")))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getCurrentUser(): User? {
                                            val firebaseUser = auth.currentUser
                                            return firebaseUser?.let { User(it.uid, it.email ?: "") }
                                        }
                                    
                                        fun logout() {
                                            auth.signOut()
                                        }
                                    
                                        fun sendEmailVerification(): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.currentUser?.sendEmailVerification()?.await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun isEmailVerified(): Boolean {
                                            return auth.currentUser?.isEmailVerified ?: false
                                        }
                                    
                                        fun reloadUser(): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.currentUser?.reload()?.await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun saveUserData(userId: String, data: Map<String, Any>): Flow<Result<Unit>> = flow {
                                            try {
                                                firestore.collection("users").document(userId).set(data).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun getUserData(userId: String): Flow<Result<Map<String, Any>>> = flow {
                                            try {
                                                val snapshot = firestore.collection("users").document(userId).get().await()
                                                if (snapshot.exists()) {
                                                    emit(Result.success(snapshot.data ?: emptyMap()))
                                                } else {
                                                    emit(Result.failure(Exception("User data not found")))
                                                }
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        fun uploadProfileImage(uri: Uri): Flow<Result<String>> = flow {
                                            try {
                                                val user = auth.currentUser ?: throw Exception("User not authenticated")
                                                val imageRef = storage.reference.child("profile_images/${user.uid}.jpg")
                                                val uploadTask = imageRef.putFile(uri).await()
                                                val downloadUrl = uploadTask.storage.downloadUrl.await().toString()
                                    
                                                firestore.collection("users").document(user.uid)
                                                    .update("profileImageUrl", downloadUrl).await()
                                    
                                                emit(Result.success(downloadUrl))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    
                                        // Send password reset email
                                        fun sendPasswordResetEmail(email: String): Flow<Result<Unit>> = flow {
                                            try {
                                                auth.sendPasswordResetEmail(email).await()
                                                emit(Result.success(Unit))
                                            } catch (e: Exception) {
                                                emit(Result.failure(e))
                                            }
                                        }
                                    }                                    ```
                            - **data/**
                                - Account.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import androidx.compose.ui.graphics.Color
                                    
                                    data class Account(
                                        val id: String,
                                        val name: String,
                                        val type: String,
                                        val amount: Long,
                                        val color: Color
                                    )                                    ```
                                - Offer.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    data class Offer(
                                        val id: String? = null, // Added ID for navigation purposes
                                        val distance: Int? = null,
                                        val latitude: Double? = null,
                                        val longitude: Double? = null,
                                        val offerDescription: String? = null,
                                        val placeName: String? = null,
                                        val recommendationReason: String? = null,
                                        val shopImage: String? = null
                                    )
                                    ```
                                - Promo.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import java.util.Date
                                    
                                    data class Promo(
                                        val id: String,
                                        val title: String,
                                        val description: String,
                                        val imageUrl: String,
                                        val discountCode: String,
                                        val restaurantName: String,
                                        val expirationDate: Date
                                    )                                    ```
                                - User.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    data class User(
                                        val id: String,
                                        val email: String,
                                        val fullName: String? = null,
                                        val phoneNumber: String? = null,
                                        val birthDate: String? = null,
                                        val profileImageUrl: String? = null
                                    )                                    ```
                                - Transaction.kt
                                    ```
                                    package com.isis3510.spendiq.model.data
                                    
                                    import com.google.firebase.Timestamp
                                    
                                    data class Transaction(
                                        val id: String,
                                        val accountId: String,
                                        val transactionName: String,
                                        val amount: Long,
                                        val dateTime: Timestamp,
                                        val transactionType: String,
                                        val location: Location?
                                    )
                                    
                                    data class Location(
                                        val latitude: Double,
                                        val longitude: Double
                                    )
                                    ```
                        - **views/**
                            - **transaction/**
                                - AddTransactionModal.kt
                                    ```
                                    package com.isis3510.spendiq.views.transaction
                                    
                                    import android.app.DatePickerDialog
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.google.firebase.Timestamp
                                    import com.isis3510.spendiq.services.LocationService
                                    import kotlinx.coroutines.launch
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AddTransactionModal(
                                        accountViewModel: AccountViewModel,
                                        onDismiss: () -> Unit,
                                        onTransactionAdded: () -> Unit
                                    ) {
                                        var amount by remember { mutableStateOf("") }
                                        var transactionName by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf(Timestamp.now()) }
                                        var selectedTransactionType by remember { mutableStateOf("Expense") }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var selectedAccountType by remember { mutableStateOf("") }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                        var showNoAccountsDialog by remember { mutableStateOf(false) }
                                        var isLocationEnabled by remember { mutableStateOf(false) }
                                        var location by remember { mutableStateOf<android.location.Location?>(null) }
                                    
                                        val accounts by accountViewModel.accounts.collectAsState()
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                        val locationService = remember { LocationService(context) }
                                        val scope = rememberCoroutineScope()
                                    
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            calendar.get(Calendar.YEAR),
                                            calendar.get(Calendar.MONTH),
                                            calendar.get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        // Show dialog when there are no accounts
                                        if (showNoAccountsDialog) {
                                            AlertDialog(
                                                onDismissRequest = { showNoAccountsDialog = false },
                                                title = { Text("No Accounts Available") },
                                                text = { Text("Please create an account first in the Accounts section before making a transaction.") },
                                                confirmButton = {
                                                    Button(onClick = { showNoAccountsDialog = false }) {
                                                        Text("OK")
                                                    }
                                                }
                                            )
                                        }
                                    
                                        // Check if there are any accounts available
                                        LaunchedEffect(Unit) {
                                            if (accounts.isEmpty()) {
                                                showNoAccountsDialog = true
                                            }
                                        }
                                    
                                        ModalBottomSheet(
                                            onDismissRequest = onDismiss
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Add Transaction", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                OutlinedTextField(
                                                    value = amount,
                                                    onValueChange = { amount = it.filter { char -> char.isDigit() } },
                                                    label = { Text("Amount") },
                                                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                OutlinedTextField(
                                                    value = transactionName,
                                                    onValueChange = { transactionName = it },
                                                    label = { Text("Transaction Name") },
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                Button(onClick = { datePickerDialog.show() }) {
                                                    Text("Select Date: ${selectedDate.toDate().toString().substring(0, 10)}")
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedTransactionType,
                                                    onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                ) {
                                                    TextField(
                                                        value = selectedTransactionType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedTransactionType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedTransactionType,
                                                        onDismissRequest = { expandedTransactionType = false }
                                                    ) {
                                                        DropdownMenuItem(
                                                            text = { Text("Income") },
                                                            onClick = {
                                                                selectedTransactionType = "Income"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                        DropdownMenuItem(
                                                            text = { Text("Expense") },
                                                            onClick = {
                                                                selectedTransactionType = "Expense"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                if (accounts.isNotEmpty()) {
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedAccountType,
                                                        onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                    ) {
                                                        TextField(
                                                            value = selectedAccountType,
                                                            onValueChange = {},
                                                            readOnly = true,
                                                            label = { Text("Select Account") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedAccountType,
                                                            onDismissRequest = { expandedAccountType = false }
                                                        ) {
                                                            accounts.forEach { account ->
                                                                DropdownMenuItem(
                                                                    text = { Text(account.name) },
                                                                    onClick = {
                                                                        selectedAccountType = account.name
                                                                        expandedAccountType = false
                                                                    }
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(8.dp))
                                    
                                                    // Location Switch
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        Icon(
                                                            imageVector = Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = if (isLocationEnabled) MaterialTheme.colorScheme.primary else Color.Gray
                                                        )
                                                        Spacer(modifier = Modifier.width(8.dp))
                                                        Text("Include Location")
                                                        Spacer(modifier = Modifier.weight(1f))
                                                        Switch(
                                                            checked = isLocationEnabled,
                                                            onCheckedChange = { enabled ->
                                                                isLocationEnabled = enabled
                                                                if (enabled) {
                                                                    scope.launch {
                                                                        location = locationService.getCurrentLocation()
                                                                    }
                                                                } else {
                                                                    location = null
                                                                }
                                                            }
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    Button(
                                                        onClick = {
                                                            if (selectedAccountType.isNotEmpty()) {
                                                                val transaction = Transaction(
                                                                    id = "",
                                                                    accountId = selectedAccountType,
                                                                    transactionName = transactionName,
                                                                    amount = amount.toLongOrNull() ?: 0L,
                                                                    dateTime = selectedDate,
                                                                    transactionType = selectedTransactionType,
                                                                    location = if (isLocationEnabled && location != null) {
                                                                        Location(
                                                                            latitude = location!!.latitude,
                                                                            longitude = location!!.longitude
                                                                        )
                                                                    } else null
                                                                )
                                                                accountViewModel.addTransactionWithAccountCheck(transaction)
                                                                onTransactionAdded()
                                                                onDismiss()
                                                            }
                                                        },
                                                        enabled = amount.isNotEmpty() && transactionName.isNotEmpty() && selectedAccountType.isNotEmpty(),
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text("Add Transaction")
                                                    }
                                                } else {
                                                    Text(
                                                        "No accounts available. Please create an account first.",
                                                        style = MaterialTheme.typography.bodyMedium,
                                                        color = MaterialTheme.colorScheme.error,
                                                        modifier = Modifier.padding(vertical = 16.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }                                    ```
                            - **offers/**
                                - OffersScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.offers // Adjusted to match file location
                                    
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.text.font.FontWeight // Added import for FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import coil.compose.AsyncImage // Updated from deprecated rememberImagePainter
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.OffersViewModel
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    
                                    @Composable
                                    fun OffersScreen(navController: NavController, viewModel: OffersViewModel, accountViewModel: AccountViewModel) {
                                        val offers by viewModel.offers.collectAsState()
                                    
                                        LaunchedEffect(Unit) {
                                            viewModel.fetchOffers()
                                        }
                                    
                                        Scaffold(
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(16.dp)
                                            ) {
                                                Text(
                                                    "Special Offers in Your Area",
                                                    fontSize = 24.sp,
                                                    fontWeight = FontWeight.Bold // Added FontWeight here
                                                )
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                LazyColumn(
                                                    verticalArrangement = Arrangement.spacedBy(16.dp)
                                                ) {
                                                    items(offers) { offer ->
                                                        OfferItem(offer = offer, onClick = {
                                                            offer.id?.let { id -> navController.navigate("specialSalesDetail/$id") }
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun OfferItem(offer: Offer, onClick: () -> Unit) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable(onClick = onClick),
                                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                                        ) {
                                            Column(modifier = Modifier.padding(16.dp)) {
                                                offer.placeName?.let {
                                                    Text(
                                                        text = it,
                                                        fontSize = 18.sp,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                                }
                                                Spacer(modifier = Modifier.height(8.dp))
                                                offer.offerDescription?.let { Text(it, fontSize = 14.sp) }
                                                Spacer(modifier = Modifier.height(8.dp))
                                                offer.shopImage?.let {
                                                    AsyncImage(
                                                        model = it,
                                                        contentDescription = "Offer Image",
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(200.dp),
                                                        contentScale = ContentScale.Crop
                                                    )
                                                }
                                                Spacer(modifier = Modifier.height(8.dp))
                                                Text(
                                                    text = "Reason: ${offer.recommendationReason}",
                                                    fontSize = 12.sp,
                                                    color = Color.Gray
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                            }
                                        }
                                    }
                                    ```
                                - SpecialSalesDetail.kt
                                    ```
                                    package com.isis3510.spendiq.view.offers
                                    
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.SpanStyle
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.buildAnnotatedString
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.withStyle
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import coil.compose.rememberImagePainter
                                    import com.google.android.gms.maps.model.CameraPosition
                                    import com.google.maps.android.compose.*
                                    import com.google.type.LatLng
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.R
                                    
                                    @Composable
                                    fun SpecialSalesDetail(offer: Offer) {
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .background(color = Color.White)
                                        ) {
                                            // Background Box for overall UI
                                            Box(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .clip(shape = RoundedCornerShape(7.dp))
                                                    .background(color = Color(0xfffcf5f3))
                                            )
                                    
                                            // Offer Image at the top
                                            offer.shopImage?.let {
                                                Image(
                                                    painter = rememberImagePainter(it),
                                                    contentDescription = "Offer Image",
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .height(300.dp)
                                                        .clip(shape = RoundedCornerShape(7.dp))
                                                        .border(
                                                            border = BorderStroke(1.dp, Color.Black),
                                                            shape = RoundedCornerShape(7.dp)
                                                        ),
                                                    contentScale = ContentScale.Crop
                                                )
                                            }
                                    
                                            // Content and Details
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(horizontal = 16.dp, vertical = 8.dp),
                                                verticalArrangement = Arrangement.Top,
                                                horizontalAlignment = Alignment.Start
                                            ) {
                                                Text(
                                                    text = "Special Sales in your Area",
                                                    color = Color.Black,
                                                    style = TextStyle(
                                                        fontSize = 19.sp,
                                                        fontWeight = FontWeight.Medium
                                                    ),
                                                    modifier = Modifier.padding(top = 8.dp)
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                // Offer Details Section
                                                offer.placeName?.let {
                                                    Text(
                                                        text = it,
                                                        color = Color.Black,
                                                        style = TextStyle(
                                                            fontSize = 19.sp,
                                                            fontWeight = FontWeight.Medium
                                                        ),
                                                        modifier = Modifier.padding(top = 8.dp)
                                                    )
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                Text(
                                                    text = buildAnnotatedString {
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 16.sp,
                                                                fontWeight = FontWeight.Bold
                                                            )
                                                        ) {
                                                            append("Sales\n")
                                                        }
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 14.sp,
                                                                fontWeight = FontWeight.Bold
                                                            )
                                                        ) {
                                                            append("\n${offer.offerDescription}\n")
                                                        }
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 14.sp
                                                            )
                                                        ) {
                                                            append("Recommended for: ${offer.recommendationReason}")
                                                        }
                                                    },
                                                    modifier = Modifier.padding(vertical = 8.dp)
                                                )
                                    
                                                // Google Map to show the location of the offer
                                                if (offer.latitude != null && offer.longitude != null) {
                                                    Spacer(modifier = Modifier.height(16.dp))
                                                    Text(
                                                        text = "Offer Location",
                                                        color = Color.Black,
                                                        style = TextStyle(
                                                            fontSize = 16.sp,
                                                            fontWeight = FontWeight.Medium
                                                        )
                                                    )
                                    
                                                    GoogleMap(
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(300.dp)
                                                            .padding(vertical = 8.dp),
                                                        cameraPositionState = rememberCameraPositionState {
                                                            position = CameraPosition.fromLatLngZoom(
                                                                com.google.android.gms.maps.model.LatLng(
                                                                    offer.latitude,
                                                                    offer.longitude
                                                                ),
                                                                15f
                                                            )
                                                        }
                                                    ) {
                                                        Marker(
                                                            state = MarkerState(
                                                                position = com.google.android.gms.maps.model.LatLng(
                                                                    offer.latitude,
                                                                    offer.longitude
                                                                )
                                                            ),
                                                            title = offer.placeName,
                                                            snippet = "Special Offer Location"
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ```
                                - SpecialSalesMap1.kt
                                    ```
                                    package com.isis3510.spendiq.view.offers
                                    
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.SpanStyle
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.buildAnnotatedString
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.withStyle
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import coil.compose.rememberImagePainter
                                    import com.isis3510.spendiq.model.data.Offer
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun SpecialSalesMap1(modifier: Modifier = Modifier, offer: Offer, onDismiss: () -> Unit) {
                                        ModalBottomSheet(onDismissRequest = onDismiss) {
                                            Box(
                                                modifier = modifier
                                                    .fillMaxWidth()
                                                    .requiredHeight(height = 852.dp)
                                                    .background(color = Color.White)
                                            ) {
                                                // Background Box
                                                Box(
                                                    modifier = Modifier
                                                        .fillMaxSize()
                                                        .clip(shape = RoundedCornerShape(7.dp))
                                                        .background(color = Color(0xfffcf5f3))
                                                )
                                    
                                                // Offer Image
                                                offer.shopImage?.let {
                                                    Image(
                                                        painter = rememberImagePainter(it),
                                                        contentDescription = "Offer Image",
                                                        modifier = Modifier
                                                            .fillMaxSize()
                                                            .clip(shape = RoundedCornerShape(7.dp))
                                                            .border(
                                                                border = BorderStroke(1.dp, Color.Black),
                                                                shape = RoundedCornerShape(7.dp)
                                                            ),
                                                        contentScale = ContentScale.Crop
                                                    )
                                                }
                                    
                                                // Title Text
                                                Text(
                                                    text = "Special Sales in your Area",
                                                    color = Color.Black,
                                                    style = TextStyle(
                                                        fontSize = 19.sp,
                                                        fontWeight = FontWeight.Medium
                                                    ),
                                                    modifier = Modifier
                                                        .align(alignment = Alignment.TopStart)
                                                        .offset(x = 16.dp, y = 78.dp)
                                                )
                                    
                                                // Place Name
                                                Text(
                                                    text = offer.placeName ?: "",
                                                    color = Color.Black,
                                                    style = TextStyle(
                                                        fontSize = 19.sp,
                                                        fontWeight = FontWeight.Medium
                                                    ),
                                                    modifier = Modifier
                                                        .align(alignment = Alignment.TopStart)
                                                        .offset(x = 96.dp, y = 162.dp)
                                                        .requiredWidth(width = 197.dp)
                                                )
                                    
                                                // Offer Description
                                                Text(
                                                    text = buildAnnotatedString {
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 16.sp,
                                                                fontWeight = FontWeight.Bold
                                                            )
                                                        ) {
                                                            append("Sales\n")
                                                        }
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 14.sp,
                                                                fontWeight = FontWeight.Bold
                                                            )
                                                        ) {
                                                            append("\n${offer.offerDescription}\n")
                                                        }
                                                        withStyle(
                                                            style = SpanStyle(
                                                                color = Color.Black,
                                                                fontSize = 14.sp
                                                            )
                                                        ) {
                                                            append("Recommended for: ${offer.recommendationReason}")
                                                        }
                                                    },
                                                    modifier = Modifier
                                                        .align(alignment = Alignment.TopStart)
                                                        .offset(x = 27.dp, y = 636.dp)
                                                        .requiredWidth(width = 353.dp)
                                                )
                                            }
                                        }
                                    }
                                    ```
                            - **splash/**
                                - SplashScreen.kt
                                    ```
                                    package com.isis3510.spendiq.view.splash
                                    
                                    import androidx.compose.foundation.layout.Box
                                    import androidx.compose.foundation.layout.fillMaxSize
                                    import androidx.compose.material3.CircularProgressIndicator
                                    import androidx.compose.material3.Text
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.runtime.LaunchedEffect
                                    import androidx.compose.runtime.collectAsState
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    
                                    @Composable
                                    fun SplashScreen(navController: NavController, viewModel: AuthViewModel) {
                                        val authState = viewModel.authState.collectAsState()
                                    
                                        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                            when (authState.value) {
                                                AuthState.Loading -> {
                                                    // Show a loading screen
                                                    CircularProgressIndicator()
                                                    Text(text = "Loading...", modifier = Modifier.align(Alignment.BottomCenter))
                                                }
                                                else -> {
                                                    // Fallback UI while waiting for a state change
                                                    CircularProgressIndicator()
                                                }
                                            }
                                        }
                                    
                                        LaunchedEffect(authState.value) {
                                            when (authState.value) {
                                                is AuthState.Authenticated -> navController.navigate("main") {
                                                    popUpTo("splash") { inclusive = true }
                                                }
                                                is AuthState.EmailVerified -> {
                                                    // Navigate to main if email is verified
                                                    navController.navigate("main") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.EmailNotVerified -> {
                                                    // Navigate to authentication if email is not verified
                                                    navController.navigate("authentication") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.EmailVerificationSent -> {
                                                    // Navigate to authentication after email verification is sent
                                                    navController.navigate("authentication") {
                                                        popUpTo("splash") { inclusive = true }
                                                    }
                                                }
                                                is AuthState.Error,
                                                AuthState.Idle,
                                                AuthState.BiometricEnabled -> navController.navigate("authentication") {
                                                    popUpTo("splash") { inclusive = true }
                                                }
                                                AuthState.Loading -> {
                                                    // Do nothing while loading
                                                }
                                    
                                                AuthState.PasswordResetEmailSent -> TODO()
                                            }
                                        }
                                    }                                    ```
                            - MainActivity.kt
                                ```
                                package com.isis3510.spendiq.views
                                
                                import android.Manifest
                                import android.content.Intent
                                import android.content.pm.PackageManager
                                import android.os.Bundle
                                import android.provider.Settings
                                import android.util.Log
                                import androidx.activity.ComponentActivity
                                import androidx.activity.compose.setContent
                                import androidx.activity.result.contract.ActivityResultContracts
                                import androidx.compose.foundation.layout.fillMaxSize
                                import androidx.compose.material3.MaterialTheme
                                import androidx.compose.material3.Surface
                                import androidx.compose.runtime.collectAsState
                                import androidx.compose.ui.Modifier
                                import androidx.core.content.ContextCompat
                                import androidx.lifecycle.viewmodel.compose.viewModel
                                import androidx.navigation.NavType
                                import androidx.navigation.compose.NavHost
                                import androidx.navigation.compose.composable
                                import androidx.navigation.compose.rememberNavController
                                import androidx.navigation.navArgument
                                import com.isis3510.spendiq.view.accounts.AccountsScreen
                                import com.isis3510.spendiq.view.offers.SpecialSalesDetail
                                import com.isis3510.spendiq.views.main.MainContent
                                import com.isis3510.spendiq.view.splash.SplashScreen
                                import com.isis3510.spendiq.views.auth.AuthenticationScreen
                                import com.isis3510.spendiq.views.auth.LoginScreen
                                import com.isis3510.spendiq.views.auth.RegisterScreen
                                import com.isis3510.spendiq.views.profile.ProfileScreen
                                import com.isis3510.spendiq.views.theme.SpendiQTheme
                                import com.isis3510.spendiq.viewmodel.AccountViewModel
                                import com.isis3510.spendiq.viewmodel.AuthViewModel
                                import com.isis3510.spendiq.viewmodel.OffersViewModel
                                import com.isis3510.spendiq.views.accounts.AccountTransactionsScreen
                                import com.isis3510.spendiq.views.accounts.TransactionDetailsScreen
                                import com.isis3510.spendiq.views.offers.OffersScreen
                                
                                class MainActivity : ComponentActivity() {
                                
                                    companion object {
                                        private const val TAG = "MainActivity"
                                    }
                                
                                    // ActivityResultLauncher for requesting location permissions
                                    private val requestLocationPermissionLauncher =
                                        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
                                            if (isGranted) {
                                                // Permission granted, do something with location
                                                // TODO: Implement logic for when location permission is granted
                                            } else {
                                                // Permission denied, show a message to the user
                                                // TODO: Implement logic for when location permission is denied
                                            }
                                        }
                                
                                    override fun onCreate(savedInstanceState: Bundle?) {
                                        super.onCreate(savedInstanceState)
                                
                                        // Ensure notification service is enabled
                                        if (!isNotificationServiceEnabled()) {
                                            requestNotificationPermission()
                                        }
                                
                                        // Request location permission
                                        requestLocationPermission()
                                
                                        // Set the main content view
                                        setContent {
                                            SpendiQTheme {
                                                Surface(
                                                    modifier = Modifier.fillMaxSize(),
                                                    color = MaterialTheme.colorScheme.background
                                                ) {
                                                    // Create navigation controller and ViewModels
                                                    val navController = rememberNavController()
                                                    val authViewModel: AuthViewModel = viewModel()
                                                    val accountViewModel: AccountViewModel = viewModel()
                                                    val offersViewModel: OffersViewModel = viewModel()
                                
                                                    // Set up the navigation host
                                                    NavHost(navController = navController, startDestination = "splash") {
                                                        composable("splash") { SplashScreen(navController, authViewModel) }
                                                        composable("authentication") { AuthenticationScreen(navController) }
                                                        composable("login") { LoginScreen(navController, authViewModel) }
                                                        composable("register") { RegisterScreen(navController, authViewModel) }
                                                        composable("main") {
                                                            MainContent(navController, authViewModel, accountViewModel, offersViewModel)
                                                        }
                                                        composable("promos") { OffersScreen(navController, offersViewModel, accountViewModel) }
                                                        composable("profile") { ProfileScreen(navController, authViewModel, accountViewModel) }
                                                        composable("accounts") { AccountsScreen(navController, accountViewModel) }
                                                        composable("accountTransactions/{accountId}") { backStackEntry ->
                                                            val accountId = backStackEntry.arguments?.getString("accountId") ?: ""
                                                            AccountTransactionsScreen(navController, accountId)
                                                        }
                                                        // Special sales detail route
                                                        composable("SpecialSalesDetail/{offerId}") { backStackEntry ->
                                                            val offerId = backStackEntry.arguments?.getString("offerId")
                                                            if (offerId != null) {
                                                                Log.d(TAG, "Navigating to SpecialSalesDetailScreen with offerId: $offerId")
                                
                                                                val offers = offersViewModel.offers.collectAsState().value
                                                                val offer = offers.find { it.id == offerId }
                                
                                                                if (offer != null) {
                                                                    Log.d(TAG, "Offer found: ${offer.placeName}")
                                                                    SpecialSalesDetail(offer = offer)
                                                                } else {
                                                                    Log.e(TAG, "Offer not found for offerId: $offerId")
                                                                }
                                                            } else {
                                                                Log.e(TAG, "offerId is null")
                                                            }
                                                        }
                                                        composable(
                                                            route = "transactionDetails/{accountId}/{transactionId}",
                                                            arguments = listOf(
                                                                navArgument("accountId") { type = NavType.StringType },
                                                                navArgument("transactionId") { type = NavType.StringType }
                                                            )
                                                        ) { backStackEntry ->
                                                            val accountId = backStackEntry.arguments?.getString("accountId") ?: ""
                                                            val transactionId = backStackEntry.arguments?.getString("transactionId") ?: ""
                                                            Log.d(TAG, "Navigating to TransactionDetailsScreen with accountId: $accountId and transactionId: $transactionId")
                                                            TransactionDetailsScreen(
                                                                navController = navController,
                                                                accountViewModel = accountViewModel,
                                                                accountId = accountId,  // Corrected to use the accountId (Firestore document ID)
                                                                transactionId = transactionId
                                                            )
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                
                                    // Method to request notification access permission
                                    private fun requestNotificationPermission() {
                                        val intent = Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS)
                                        startActivity(intent)
                                    }
                                
                                    // Check if notification listener service is enabled
                                    private fun isNotificationServiceEnabled(): Boolean {
                                        val packageName = applicationContext.packageName
                                        val enabledListeners = Settings.Secure.getString(contentResolver, "enabled_notification_listeners")
                                        return enabledListeners?.contains(packageName) == true
                                    }
                                
                                    // Request location permission if not granted
                                    private fun requestLocationPermission() {
                                        if (ContextCompat.checkSelfPermission(
                                                this,
                                                Manifest.permission.ACCESS_FINE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED
                                        ) {
                                            requestLocationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
                                        }
                                    }
                                }
                                ```
                            - **auth/**
                                - AuthenticationScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    
                                    @Composable
                                    fun AuthenticationScreen(navController: NavController) {
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .clip(shape = RoundedCornerShape(7.dp))
                                                .background(color = Color.White)
                                        ) {
                                            // Background Logo
                                            Image(
                                                painter = painterResource(id = R.drawable.logogroupstart),
                                                contentDescription = "Logo Group",
                                                modifier = Modifier
                                                    .align(alignment = Alignment.TopStart)
                                                    .offset(x = (-63).dp, y = 376.dp)
                                                    .fillMaxWidth()
                                                    .height(470.dp)
                                            )
                                    
                                            // App Title
                                            Text(
                                                text = "SpendiQ",
                                                color = Color.Black,
                                                textAlign = TextAlign.Center,
                                                style = TextStyle(
                                                    fontSize = 73.sp,
                                                    fontFamily = FontFamily.SansSerif,
                                                    fontWeight = FontWeight.Bold
                                                ),
                                                modifier = Modifier
                                                    .align(alignment = Alignment.TopCenter)
                                                    .offset(y = 156.dp)
                                            )
                                    
                                            // Login Button
                                            Button(
                                                onClick = { navController.navigate("login") },
                                                shape = RoundedCornerShape(7.dp),
                                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                contentPadding = PaddingValues(horizontal = 16.dp, vertical = 10.dp),
                                                modifier = Modifier
                                                    .align(alignment = Alignment.Center)
                                                    .offset(y = (-120).dp)
                                                    .width(226.dp)
                                                    .height(42.dp)
                                            ) {
                                                Text(
                                                    text = "Log In",
                                                    color = Color.White,
                                                    textAlign = TextAlign.Center,
                                                    lineHeight = 1.43.em,
                                                    style = TextStyle(
                                                        fontSize = 14.sp,
                                                        fontFamily = FontFamily.SansSerif,
                                                        letterSpacing = 0.1.sp
                                                    )
                                                )
                                            }
                                    
                                            // Register Button
                                            Button(
                                                onClick = { navController.navigate("register") },
                                                shape = RoundedCornerShape(7.dp),
                                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                contentPadding = PaddingValues(horizontal = 24.dp, vertical = 10.dp),
                                                modifier = Modifier
                                                    .align(alignment = Alignment.Center)
                                                    .offset(y = (-50).dp)
                                                    .width(226.dp)
                                                    .height(42.dp)
                                            ) {
                                                Text(
                                                    text = "Sign Up",
                                                    color = Color.White,
                                                    textAlign = TextAlign.Center,
                                                    lineHeight = 1.43.em,
                                                    style = TextStyle(
                                                        fontSize = 14.sp,
                                                        fontFamily = FontFamily.SansSerif,
                                                        letterSpacing = 0.1.sp
                                                    )
                                                )
                                            }
                                    
                                            // Bottom Bar
                                            Box(
                                                modifier = Modifier
                                                    .align(alignment = Alignment.BottomCenter)
                                                    .fillMaxWidth()
                                                    .height(34.dp)
                                                    .background(color = Color(0xffe5e5e5).copy(alpha = 0.29f))
                                            ) {
                                                Box(
                                                    modifier = Modifier
                                                        .align(alignment = Alignment.BottomCenter)
                                                        .offset(y = (-8).dp)
                                                        .width(134.dp)
                                                        .height(5.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp))
                                                        .background(color = Color(0xff0f172a))
                                                )
                                            }
                                        }
                                    }                                    ```
                                - LoginScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import android.util.Log
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material3.AlertDialog
                                    import androidx.compose.material3.IconButton
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.Email
                                    import androidx.compose.material.icons.filled.Lock
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.draw.rotate
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.PasswordVisualTransformation
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.fragment.app.FragmentActivity
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.views.theme.Purple40
                                    import kotlinx.coroutines.delay
                                    
                                    @Composable
                                    fun LoginScreen(
                                        navController: NavController,
                                        viewModel: AuthViewModel
                                    ) {
                                        var email by remember { mutableStateOf("") }
                                        var password by remember { mutableStateOf("") }
                                        val authState by viewModel.authState.collectAsState()
                                        val context = LocalContext.current
                                    
                                        // State variables for the reset password dialog
                                        var showResetPasswordDialog by remember { mutableStateOf(false) }
                                        var resetEmail by remember { mutableStateOf("") }
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .verticalScroll(rememberScrollState())
                                        ) {
                                            // Background Logo
                                            Image(
                                                painter = painterResource(id = R.drawable.logo_log_in),
                                                contentDescription = "Background Logo",
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .align(alignment = Alignment.Center)
                                            )
                                    
                                            // Back Button
                                            Image(
                                                painter = painterResource(id = R.drawable.leftactionable),
                                                contentDescription = "Back",
                                                modifier = Modifier
                                                    .align(alignment = Alignment.TopStart)
                                                    .padding(16.dp)
                                                    .size(24.dp)
                                                    .clickable { navController.popBackStack() }
                                            )
                                    
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(horizontal = 24.dp),
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                Spacer(modifier = Modifier.height(93.dp))
                                    
                                                // App Title
                                                Text(
                                                    text = "SpendiQ",
                                                    color = Color.Black,
                                                    textAlign = TextAlign.Center,
                                                    style = TextStyle(
                                                        fontSize = 73.sp,
                                                        fontFamily = FontFamily.SansSerif,
                                                        fontWeight = FontWeight.Bold
                                                    ),
                                                    modifier = Modifier.padding(bottom = 48.dp)
                                                )
                                    
                                                Spacer(modifier = Modifier.height(64.dp))
                                    
                                                // Email Field
                                                OutlinedTextField(
                                                    value = email,
                                                    onValueChange = { email = it },
                                                    label = { Text("Email") },
                                                    singleLine = true,
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 8.dp)
                                                        .border(
                                                            BorderStroke(width = 2.dp, color = Purple40),
                                                            shape = RoundedCornerShape(50)
                                                        ),
                                                    leadingIcon = {
                                                        Icon(
                                                            imageVector = Icons.Default.Email,
                                                            contentDescription = "Email Icon"
                                                        )
                                                    }
                                                )
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Password Field
                                                OutlinedTextField(
                                                    value = password,
                                                    onValueChange = { password = it },
                                                    label = { Text("Password") },
                                                    singleLine = true,
                                                    visualTransformation = PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 8.dp)
                                                        .border(
                                                            BorderStroke(width = 2.dp, color = Purple40),
                                                            shape = RoundedCornerShape(50)
                                                        ),
                                                    leadingIcon = {
                                                        Icon(
                                                            imageVector = Icons.Default.Lock,
                                                            contentDescription = "Password Icon"
                                                        )
                                                    },
                                                    trailingIcon = {
                                                        IconButton(
                                                            onClick = {
                                                                viewModel.setupBiometricPrompt(
                                                                    context as FragmentActivity,
                                                                    onSuccess = { viewModel.loginWithBiometrics() },
                                                                    onError = { /* Handle error */ }
                                                                )
                                                                viewModel.showBiometricPrompt()
                                                            }
                                                        ) {
                                                            Icon(
                                                                painter = painterResource(id = R.drawable.fingerprint),
                                                                contentDescription = "Fingerprint",
                                                                modifier = Modifier.size(24.dp),
                                                                tint = Color.Gray
                                                            )
                                                        }
                                                    }
                                                )
                                    
                                                Spacer(modifier = Modifier.height(24.dp))
                                    
                                                // Login Button
                                                Button(
                                                    onClick = { viewModel.login(email, password) },
                                                    shape = RoundedCornerShape(7.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f)),
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .height(48.dp)
                                                ) {
                                                    Text(
                                                        text = "Log In",
                                                        fontSize = 16.sp,
                                                        color = Color.White
                                                    )
                                                }
                                    
                                                Spacer(modifier = Modifier.height(24.dp))
                                    
                                                // Forgot Password
                                                Text(
                                                    text = "Forgot your password?",
                                                    color = Color(0xff5875dd),
                                                    modifier = Modifier.clickable { showResetPasswordDialog = true },
                                                    style = TextStyle(fontSize = 16.sp)
                                                )
                                    
                                                // Reset Password Dialog
                                                if (showResetPasswordDialog) {
                                                    AlertDialog(
                                                        onDismissRequest = { showResetPasswordDialog = false },
                                                        title = {
                                                            Text(text = "Reset Password")
                                                        },
                                                        text = {
                                                            Column {
                                                                Text(
                                                                    text = "Enter your email address to receive a password reset link.",
                                                                    style = TextStyle(fontSize = 14.sp)
                                                                )
                                                                Spacer(modifier = Modifier.height(8.dp))
                                                                OutlinedTextField(
                                                                    value = resetEmail,
                                                                    onValueChange = { resetEmail = it },
                                                                    label = { Text("Email") },
                                                                    singleLine = true,
                                                                    modifier = Modifier.fillMaxWidth()
                                                                )
                                                            }
                                                        },
                                                        confirmButton = {
                                                            Button(
                                                                onClick = {
                                                                    viewModel.sendPasswordResetEmail(resetEmail)
                                                                    showResetPasswordDialog = false
                                                                },
                                                                colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f))
                                                            ) {
                                                                Text("Send", color = Color.White)
                                                            }
                                                        },
                                                        dismissButton = {
                                                            TextButton(onClick = { showResetPasswordDialog = false }) {
                                                                Text("Cancel")
                                                            }
                                                        }
                                                    )
                                                }
                                    
                                                // Additional Spacing
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Handle Success and Error Messages
                                                when (authState) {
                                                    is AuthState.PasswordResetEmailSent -> {
                                                        Text(
                                                            text = "Password reset email sent successfully.",
                                                            color = Color(0xffb3cb54),
                                                            textAlign = TextAlign.Center,
                                                            style = TextStyle(fontSize = 16.sp),
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .padding(16.dp)
                                                        )
                                                    }
                                                    is AuthState.Error -> {
                                                        Text(
                                                            text = (authState as AuthState.Error).message,
                                                            color = MaterialTheme.colorScheme.error,
                                                            textAlign = TextAlign.Center,
                                                            style = TextStyle(fontSize = 16.sp),
                                                            modifier = Modifier
                                                                .fillMaxWidth()
                                                                .padding(16.dp)
                                                        )
                                                    }
                                                    is AuthState.Authenticated -> {
                                                        // Check if email is verified
                                                        LaunchedEffect(Unit) {
                                                            viewModel.checkEmailVerification()
                                                        }
                                                    }
                                                    is AuthState.EmailNotVerified -> {
                                                        // Notify the user that email is not verified
                                                        Text("Please verify your email to continue.")
                                                        Button(onClick = { viewModel.sendEmailVerification() }) {
                                                            Text("Resend verification email")
                                                        }
                                                    }
                                                    is AuthState.EmailVerified -> {
                                                        // Navigate to the main screen after email verification
                                                        LaunchedEffect(Unit) {
                                                            navController.navigate("main") {
                                                                popUpTo("authentication") { inclusive = true }
                                                            }
                                                        }
                                                    }
                                                    else -> { /* Handle other states */ }
                                                }
                                    
                                                // Spacer to push content up if needed
                                                Spacer(modifier = Modifier.weight(1f))
                                    
                                                Row(
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(vertical = 32.dp),
                                                    horizontalArrangement = Arrangement.SpaceEvenly
                                                ) {
                                                    Text(
                                                        text = "Enable Biometrics",
                                                        color = Color(0xffc33ba5),
                                                        modifier = Modifier.clickable {
                                                            Log.d("LoginScreen", "Enable Biometrics clicked with email: $email")
                                                            viewModel.enableBiometricLogin(email, password)
                                                        },
                                                        style = TextStyle(fontSize = 16.sp)
                                                    )
                                    
                                                    Box(
                                                        modifier = Modifier
                                                            .width(2.dp)
                                                            .height(24.dp)
                                                            .background(Color(0xff5875dd).copy(alpha = 0.53f))
                                                    )
                                    
                                                    Text(
                                                        text = "Help",
                                                        color = Color(0xffb3cb54),
                                                        modifier = Modifier.clickable { /* Handle help */ },
                                                        style = TextStyle(fontSize = 16.sp)
                                                    )
                                                }
                                            }
                                    
                                            // Handle Loading State
                                            if (authState is AuthState.Loading) {
                                                Box(
                                                    modifier = Modifier.fillMaxSize(),
                                                    contentAlignment = Alignment.Center
                                                ) {
                                                    CircularProgressIndicator()
                                                }
                                            }
                                    
                                            // Bottom Bar
                                            Box(
                                                modifier = Modifier
                                                    .align(alignment = Alignment.BottomCenter)
                                                    .fillMaxWidth()
                                                    .height(34.dp)
                                                    .background(color = Color(0xffe5e5e5).copy(alpha = 0.29f))
                                            ) {
                                                Box(
                                                    modifier = Modifier
                                                        .align(alignment = Alignment.BottomCenter)
                                                        .offset(y = (-8).dp)
                                                        .width(134.dp)
                                                        .height(5.dp)
                                                        .clip(shape = RoundedCornerShape(100.dp))
                                                        .background(color = Color(0xff0f172a))
                                                )
                                            }
                                        }
                                    
                                        // Reset AuthState after displaying messages
                                        LaunchedEffect(authState) {
                                            if (authState is AuthState.PasswordResetEmailSent || authState is AuthState.Error) {
                                                delay(3000) // Wait for 3 seconds
                                                viewModel.resetAuthState()
                                            }
                                        }
                                    }                                    ```
                                - RegisterScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.auth
                                    
                                    import android.app.DatePickerDialog
                                    import android.widget.DatePicker
                                    import androidx.compose.foundation.BorderStroke
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.border
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.selection.toggleable
                                    import androidx.compose.foundation.shape.RoundedCornerShape
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.filled.*
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.semantics.Role
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.input.PasswordVisualTransformation
                                    import androidx.compose.ui.text.style.TextAlign
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.em
                                    import androidx.compose.ui.unit.sp
                                    import androidx.compose.ui.zIndex
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AuthState
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.views.theme.Purple40
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @Composable
                                    fun RegisterScreen(
                                        navController: NavController,
                                        viewModel: AuthViewModel
                                    ) {
                                        var email by remember { mutableStateOf("") }
                                        var password by remember { mutableStateOf("") }
                                        var confirmPassword by remember { mutableStateOf("") }
                                        var fullName by remember { mutableStateOf("") }
                                        var phoneNumber by remember { mutableStateOf("") }
                                        var birthDate by remember { mutableStateOf("") }
                                        val authState by viewModel.authState.collectAsState()
                                        val (checkedState, onStateChange) = remember { mutableStateOf(false) }
                                    
                                        // Calendar setup for date picker
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                        val year = calendar.get(Calendar.YEAR)
                                        val month = calendar.get(Calendar.MONTH)
                                        val day = calendar.get(Calendar.DAY_OF_MONTH)
                                        val dateFormatter = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                                    
                                        // Date picker dialog
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _: DatePicker, selectedYear: Int, selectedMonth: Int, selectedDay: Int ->
                                                calendar.set(selectedYear, selectedMonth, selectedDay)
                                                birthDate = dateFormatter.format(calendar.time)
                                            },
                                            year,
                                            month,
                                            day
                                        )
                                    
                                        // Set max and min dates for the date picker
                                        datePickerDialog.datePicker.maxDate = System.currentTimeMillis()
                                        calendar.add(Calendar.YEAR, -100)
                                        datePickerDialog.datePicker.minDate = calendar.timeInMillis
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxSize()
                                                .clip(shape = RoundedCornerShape(7.dp))
                                                .background(color = Color.White)
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .verticalScroll(rememberScrollState())
                                                    .padding(horizontal = 16.dp),
                                                verticalArrangement = Arrangement.Center,
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                Text(
                                                    text = "Create Free Account",
                                                    color = Color.Black,
                                                    textAlign = TextAlign.Center,
                                                    style = TextStyle(
                                                        fontSize = 48.sp,
                                                        fontFamily = FontFamily.SansSerif
                                                    ),
                                                    modifier = Modifier.padding(top = 16.dp)
                                                )
                                    
                                                Spacer(modifier = Modifier.height(32.dp))
                                    
                                                // Full name input field
                                                OutlinedTextField(
                                                    value = fullName,
                                                    onValueChange = { fullName = it },
                                                    placeholder = { Text("Full Name") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Person, contentDescription = "Person") }
                                                )
                                    
                                                // Email input field
                                                OutlinedTextField(
                                                    value = email,
                                                    onValueChange = { email = it },
                                                    placeholder = { Text("Email") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Email, contentDescription = "Email") }
                                                )
                                    
                                                // Phone number input field
                                                OutlinedTextField(
                                                    value = phoneNumber,
                                                    onValueChange = { phoneNumber = it },
                                                    placeholder = { Text("Phone Number") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Phone, contentDescription = "Phone") }
                                                )
                                    
                                                // Birth date field
                                                OutlinedTextField(
                                                    value = birthDate,
                                                    onValueChange = { },
                                                    placeholder = { Text("Birth Date (Click to select)") },
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50))
                                                        .clickable { datePickerDialog.show() },
                                                    leadingIcon = { Icon(Icons.Default.DateRange, contentDescription = "Calendar") },
                                                    readOnly = true,
                                                    enabled = false
                                                )
                                    
                                                // Password input fields
                                                OutlinedTextField(
                                                    value = password,
                                                    onValueChange = { password = it },
                                                    placeholder = { Text("Password") },
                                                    visualTransformation = PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Lock, contentDescription = "Lock1") }
                                                )
                                    
                                                OutlinedTextField(
                                                    value = confirmPassword,
                                                    onValueChange = { confirmPassword = it },
                                                    placeholder = { Text("Confirm Password") },
                                                    visualTransformation = PasswordVisualTransformation(),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .padding(vertical = 4.dp)
                                                        .border(BorderStroke(2.dp, Purple40), RoundedCornerShape(50)),
                                                    leadingIcon = { Icon(Icons.Default.Lock, contentDescription = "Lock2") }
                                                )
                                    
                                                // Checkbox for terms & conditions
                                                Row(
                                                    Modifier
                                                        .fillMaxWidth(0.9f)
                                                        .toggleable(
                                                            value = checkedState,
                                                            onValueChange = { onStateChange(!checkedState) },
                                                            role = Role.Checkbox
                                                        )
                                                        .padding(vertical = 8.dp),
                                                    verticalAlignment = Alignment.CenterVertically
                                                ) {
                                                    Checkbox(checked = checkedState, onCheckedChange = null)
                                                    Text(text = "Accept Terms & Conditions", modifier = Modifier.padding(start = 16.dp))
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Register button
                                                Button(
                                                    onClick = {
                                                        if (password == confirmPassword && checkedState) {
                                                            viewModel.register(email, password, fullName, phoneNumber, birthDate)
                                                        }
                                                    },
                                                    enabled = password == confirmPassword && checkedState &&
                                                            email.isNotEmpty() && fullName.isNotEmpty() &&
                                                            birthDate.isNotEmpty() && phoneNumber.isNotEmpty(),
                                                    shape = RoundedCornerShape(7.dp),
                                                    modifier = Modifier
                                                        .fillMaxWidth(0.6f)
                                                        .padding(vertical = 16.dp),
                                                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xff65558f))
                                                ) {
                                                    Text("Sign Up", color = Color.White, textAlign = TextAlign.Center)
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                // Auth state handling
                                                when (authState) {
                                                    is AuthState.Loading -> CircularProgressIndicator()
                                                    is AuthState.Error -> Text(
                                                        (authState as AuthState.Error).message,
                                                        color = MaterialTheme.colorScheme.error
                                                    )
                                                    is AuthState.Authenticated -> {
                                                        LaunchedEffect(Unit) {
                                                            // Trigger email verification
                                                            viewModel.sendEmailVerification()
                                                        }
                                                    }
                                                    is AuthState.EmailVerificationSent -> {
                                                        Text("Verification email sent. Please check your inbox.")
                                                        Button(onClick = { viewModel.checkEmailVerification() }) {
                                                            Text("I've verified my email")
                                                        }
                                                    }
                                                    is AuthState.EmailVerified -> {
                                                        LaunchedEffect(Unit) {
                                                            navController.navigate("main") {
                                                                popUpTo("authentication") { inclusive = true }
                                                            }
                                                        }
                                                    }
                                                    else -> {}
                                                }
                                            }
                                        }
                                    }                                    ```
                            - **common/**
                                - BottomNavigation.kt
                                    ```
                                    package com.isis3510.spendiq.views.common
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import androidx.navigation.compose.currentBackStackEntryAsState
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.views.transaction.AddTransactionModal
                                    
                                    @Composable
                                    fun BottomNavigation(
                                        navController: NavController,
                                        accountViewModel: AccountViewModel // Add AccountViewModel parameter
                                    ) {
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                    
                                        Box(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .height(77.dp)
                                                .background(Color.White)
                                        ) {
                                            Row(
                                                modifier = Modifier.fillMaxSize(),
                                                horizontalArrangement = Arrangement.SpaceEvenly,
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                NavItem(
                                                    "Home",
                                                    R.drawable.home24,
                                                    isSelected = navController.isCurrentRoute("main"),
                                                    navController,
                                                    "main"
                                                )
                                                NavItem(
                                                    "Promos",
                                                    R.drawable.gift24,
                                                    isSelected = navController.isCurrentRoute("promos"),
                                                    navController,
                                                    "promos"
                                                )
                                                AddTransactionButton(onClick = { showAddTransactionModal = true })
                                                NavItem(
                                                    "Accounts",
                                                    R.drawable.creditcard24,
                                                    isSelected = navController.isCurrentRoute("accounts"),
                                                    navController,
                                                    "accounts"
                                                )
                                                NavItem(
                                                    "Profile",
                                                    R.drawable.person24,
                                                    isSelected = navController.isCurrentRoute("profile"),
                                                    navController,
                                                    "profile"
                                                )
                                            }
                                        }
                                    
                                        // Show AddTransactionModal when showAddTransactionModal is true
                                        if (showAddTransactionModal) {
                                            AddTransactionModal(
                                                accountViewModel = accountViewModel,
                                                onDismiss = { showAddTransactionModal = false },
                                                onTransactionAdded = {
                                                    showAddTransactionModal = false
                                                    // Optionally refresh the current screen or navigate to transactions
                                                    // navController.navigate("transactions")
                                                }
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun NavItem(label: String, iconRes: Int, isSelected: Boolean, navController: NavController, route: String) {
                                        val color = if (isSelected) Color(0xFF5875DD) else Color.Black
                                    
                                        Column(
                                            horizontalAlignment = Alignment.CenterHorizontally,
                                            verticalArrangement = Arrangement.Center
                                        ) {
                                            IconButton(onClick = { navController.navigate(route) }) {
                                                Icon(
                                                    painter = painterResource(id = iconRes),
                                                    contentDescription = label,
                                                    tint = color,
                                                    modifier = Modifier.size(24.dp)
                                                )
                                            }
                                            Text(
                                                text = label,
                                                color = color,
                                                fontSize = 12.sp,
                                                fontWeight = FontWeight.Medium
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun AddTransactionButton(onClick: () -> Unit) {
                                        IconButton(onClick = onClick) {
                                            Box(
                                                modifier = Modifier
                                                    .size(50.dp)
                                                    .clip(CircleShape)
                                                    .background(Color(0xFF5875DD))
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = R.drawable.add24),
                                                    contentDescription = "Add Transaction",
                                                    tint = Color.White,
                                                    modifier = Modifier
                                                        .size(24.dp)
                                                        .align(Alignment.Center)
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun NavController.isCurrentRoute(route: String): Boolean {
                                        return this.currentBackStackEntryAsState().value?.destination?.route == route
                                    }                                    ```
                            - **profile/**
                                - ProfileScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.profile
                                    
                                    import android.content.Context
                                    import android.net.Uri
                                    import android.widget.Toast
                                    import androidx.activity.compose.rememberLauncherForActivityResult
                                    import androidx.activity.result.contract.ActivityResultContracts
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.shape.CircleShape
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.draw.clip
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.layout.ContentScale
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.res.painterResource
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.core.content.FileProvider
                                    import androidx.navigation.NavController
                                    import coil.compose.rememberAsyncImagePainter
                                    import com.isis3510.spendiq.R
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import java.io.File
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun ProfileScreen(navController: NavController, viewModel: AuthViewModel, accountViewModel: AccountViewModel) {
                                        var userData by remember { mutableStateOf<Map<String, Any>?>(null) }
                                        var profileImageUri by remember { mutableStateOf<Uri?>(null) }
                                        var isLoading by remember { mutableStateOf(true) }
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                        val context = LocalContext.current
                                    
                                        val cameraLauncher = rememberLauncherForActivityResult(
                                            contract = ActivityResultContracts.TakePicture()
                                        ) { success ->
                                            if (success && profileImageUri != null) {
                                                viewModel.uploadProfileImage(profileImageUri!!)
                                            }
                                        }
                                    
                                        LaunchedEffect(Unit) {
                                            viewModel.getUserData()
                                        }
                                    
                                        val userDataState by viewModel.userData.collectAsState()
                                    
                                        LaunchedEffect(userDataState) {
                                            when (userDataState) {
                                                is AuthViewModel.UserDataState.Success -> {
                                                    userData = (userDataState as AuthViewModel.UserDataState.Success).data
                                                    isLoading = false
                                                }
                                                is AuthViewModel.UserDataState.Error -> {
                                                    Toast.makeText(context, "Failed to load user data: ${(userDataState as AuthViewModel.UserDataState.Error).message}", Toast.LENGTH_LONG).show()
                                                    isLoading = false
                                                }
                                                AuthViewModel.UserDataState.Loading -> {
                                                    isLoading = true
                                                }
                                    
                                                AuthViewModel.UserDataState.Idle -> TODO()
                                            }
                                        }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Profile") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                        }
                                                    }
                                                )
                                            },
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            if (isLoading) {
                                                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                                                    CircularProgressIndicator()
                                                }
                                            } else {
                                                Column(
                                                    modifier = Modifier
                                                        .fillMaxSize()
                                                        .padding(innerPadding)
                                                        .padding(16.dp),
                                                    horizontalAlignment = Alignment.CenterHorizontally
                                                ) {
                                                    Box(
                                                        modifier = Modifier
                                                            .size(100.dp)
                                                            .clip(CircleShape)
                                                            .clickable {
                                                                val uri = ComposeFileProvider.getImageUri(context)
                                                                profileImageUri = uri
                                                                cameraLauncher.launch(uri)
                                                            }
                                                    ) {
                                                        Image(
                                                            painter = rememberAsyncImagePainter(
                                                                model = userData?.get("profileImageUrl") ?: R.drawable.person24
                                                            ),
                                                            contentDescription = "Profile Picture",
                                                            modifier = Modifier.fillMaxSize(),
                                                            contentScale = ContentScale.Crop
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    userData?.let { data ->
                                                        Text(
                                                            text = (data["fullName"] as? String) ?: "",
                                                            style = MaterialTheme.typography.headlineMedium,
                                                            fontWeight = FontWeight.Bold
                                                        )
                                                        Spacer(modifier = Modifier.height(24.dp))
                                    
                                                        ProfileField("Full Name", (data["fullName"] as? String) ?: "", R.drawable.person24)
                                                        ProfileField("Email Address", (data["email"] as? String) ?: "", R.drawable.email24)
                                                        ProfileField("Phone Number", (data["phoneNumber"] as? String) ?: "", R.drawable.phone24)
                                                        ProfileField("Birth Date", (data["birthDate"] as? String) ?: "", R.drawable.calendar24)
                                    
                                                        Spacer(modifier = Modifier.height(24.dp))
                                    
                                                        Text(
                                                            text = "Joined " + (data["registrationDate"] as? com.google.firebase.Timestamp)?.toDate()?.let {
                                                                SimpleDateFormat("d 'de' MMMM 'de' yyyy", Locale("es", "ES")).format(it)
                                                            } ?: "",
                                                            style = MaterialTheme.typography.bodySmall,
                                                            color = Color.Gray
                                                        )
                                    
                                                        Spacer(modifier = Modifier.height(24.dp))
                                    
                                                        Button(
                                                            onClick = {
                                                                viewModel.logout()
                                                                navController.navigate("authentication") {
                                                                    popUpTo(0) { inclusive = true }
                                                                }
                                                            },
                                                            modifier = Modifier.fillMaxWidth(0.8f)
                                                        ) {
                                                            Text("Logout")
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun ProfileField(label: String, value: String, iconResId: Int) {
                                        Column(modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp)) {
                                            Text(
                                                text = label,
                                                style = MaterialTheme.typography.bodySmall,
                                                color = Color.Gray
                                            )
                                            Row(
                                                modifier = Modifier.fillMaxWidth(),
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Icon(
                                                    painter = painterResource(id = iconResId),
                                                    contentDescription = label,
                                                    tint = Color.Gray,
                                                    modifier = Modifier.size(24.dp)
                                                )
                                                Spacer(modifier = Modifier.width(8.dp))
                                                Text(
                                                    text = value,
                                                    style = MaterialTheme.typography.bodyLarge
                                                )
                                            }
                                            Divider(modifier = Modifier.padding(top = 8.dp))
                                        }
                                    }
                                    
                                    object ComposeFileProvider {
                                        fun getImageUri(context: Context): Uri {
                                            val file = File(context.cacheDir, "profile_image.jpg")
                                            return FileProvider.getUriForFile(context, "${context.packageName}.fileprovider", file)
                                        }
                                    }
                                    ```
                            - **accounts/**
                                - AccountTransactionsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.accounts
                                    
                                    import android.content.Intent
                                    import android.net.Uri
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.KeyboardArrowDown
                                    import androidx.compose.material.icons.filled.KeyboardArrowUp
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material.icons.filled.Search
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.lifecycle.viewmodel.compose.viewModel
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import java.text.NumberFormat
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AccountTransactionsScreen(
                                        navController: NavController,
                                        accountId: String,
                                        accountViewModel: AccountViewModel = viewModel()
                                    ) {
                                        // Observe transactions from ViewModel
                                        val transactions by accountViewModel.transactions.collectAsState()
                                        var searchQuery by remember { mutableStateOf("") }
                                    
                                        // Fetch transactions using accountViewModel for the given accountId
                                        LaunchedEffect(accountId) {
                                            accountViewModel.fetchTransactions(accountId)
                                        }
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Transactions") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                                                        }
                                                    }
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                            ) {
                                                OutlinedTextField(
                                                    value = searchQuery,
                                                    onValueChange = { searchQuery = it },
                                                    label = { Text("Search") },
                                                    leadingIcon = { Icon(Icons.Default.Search, contentDescription = "Search") },
                                                    modifier = Modifier
                                                        .fillMaxWidth()
                                                        .padding(16.dp)
                                                )
                                    
                                                if (transactions.isEmpty()) {
                                                    Box(
                                                        modifier = Modifier.fillMaxSize(),
                                                        contentAlignment = Alignment.Center
                                                    ) {
                                                        Text("No transactions available", style = MaterialTheme.typography.bodyLarge)
                                                    }
                                                } else {
                                                    LazyColumn(
                                                        modifier = Modifier.fillMaxSize()
                                                    ) {
                                                        val filteredTransactions = transactions.filter {
                                                            it.transactionName.contains(searchQuery, ignoreCase = true)
                                                        }
                                    
                                                        val groupedTransactions = filteredTransactions.groupBy { normalizeDate(it.dateTime.toDate()) }
                                                        val sortedDates = groupedTransactions.keys.sortedDescending()
                                    
                                                        sortedDates.forEach { date ->
                                                            val transactionsForDate = groupedTransactions[date] ?: return@forEach
                                    
                                                            item {
                                                                Text(
                                                                    text = formatDate(date),
                                                                    modifier = Modifier.padding(start = 16.dp, top = 16.dp, bottom = 8.dp),
                                                                    style = MaterialTheme.typography.labelLarge,
                                                                    color = Color.Gray
                                                                )
                                                            }
                                    
                                                            items(transactionsForDate.sortedByDescending { it.dateTime.toDate() }) { transaction ->
                                                                TransactionItem(
                                                                    transaction = transaction,
                                                                    accountId = accountId,
                                                                    navController = navController
                                                                )
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun TransactionItem(
                                        transaction: Transaction,
                                        accountId: String,
                                        navController: NavController
                                    ) {
                                        val context = LocalContext.current
                                    
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(horizontal = 16.dp, vertical = 8.dp)
                                                .clickable {
                                                    navController.navigate(
                                                        "transactionDetails/${accountId}/${transaction.id}"
                                                    )
                                                }
                                        ) {
                                            Row(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp),
                                                verticalAlignment = Alignment.CenterVertically
                                            ) {
                                                Icon(
                                                    imageVector = if (transaction.amount > 0) Icons.Default.KeyboardArrowUp
                                                    else Icons.Default.KeyboardArrowDown,
                                                    contentDescription = if (transaction.amount > 0) "Income" else "Expense",
                                                    tint = if (transaction.amount > 0) Color(0xFF2196F3) else Color(0xFFFF0000)
                                                )
                                                Spacer(modifier = Modifier.width(16.dp))
                                                Column(modifier = Modifier.weight(1f)) {
                                                    Text(transaction.transactionName, fontWeight = FontWeight.Bold)
                                                    Text(
                                                        text = if (transaction.transactionType == "Income") "From" else "To",
                                                        color = Color.Gray,
                                                        fontSize = 14.sp
                                                    )
                                                    if (transaction.location != null) {
                                                        Row(
                                                            verticalAlignment = Alignment.CenterVertically,
                                                            modifier = Modifier.clickable {
                                                                val uri = Uri.parse(
                                                                    "geo:${transaction.location.latitude}," +
                                                                            "${transaction.location.longitude}?q=" +
                                                                            "${transaction.location.latitude}," +
                                                                            "${transaction.location.longitude}"
                                                                )
                                                                val intent = Intent(Intent.ACTION_VIEW, uri)
                                                                context.startActivity(intent)
                                                            }
                                                        ) {
                                                            Icon(
                                                                Icons.Default.LocationOn,
                                                                contentDescription = "Location",
                                                                tint = Color.Gray,
                                                                modifier = Modifier.size(16.dp)
                                                            )
                                                            Spacer(modifier = Modifier.width(4.dp))
                                                            Text(
                                                                "View location",
                                                                color = Color.Gray,
                                                                fontSize = 12.sp
                                                            )
                                                        }
                                                    }
                                                }
                                                Text(
                                                    formatCurrency(transaction.amount.toDouble()),
                                                    color = if (transaction.amount > 0) Color(0xFF2196F3) else Color(0xFFFF0000),
                                                    fontWeight = FontWeight.Bold
                                                )
                                            }
                                        }
                                    }
                                    
                                    private fun normalizeDate(date: Date): Date {
                                        val calendar = Calendar.getInstance()
                                        calendar.time = date
                                        calendar.set(Calendar.HOUR_OF_DAY, 0)
                                        calendar.set(Calendar.MINUTE, 0)
                                        calendar.set(Calendar.SECOND, 0)
                                        calendar.set(Calendar.MILLISECOND, 0)
                                        return calendar.time
                                    }
                                    
                                    fun formatDate(date: Date): String {
                                        val calendar = Calendar.getInstance()
                                        calendar.time = date
                                    
                                        val today = Calendar.getInstance()
                                        today.set(Calendar.HOUR_OF_DAY, 0)
                                        today.set(Calendar.MINUTE, 0)
                                        today.set(Calendar.SECOND, 0)
                                        today.set(Calendar.MILLISECOND, 0)
                                    
                                        val yesterday = Calendar.getInstance()
                                        yesterday.add(Calendar.DAY_OF_YEAR, -1)
                                        yesterday.set(Calendar.HOUR_OF_DAY, 0)
                                        yesterday.set(Calendar.MINUTE, 0)
                                        yesterday.set(Calendar.SECOND, 0)
                                        yesterday.set(Calendar.MILLISECOND, 0)
                                    
                                        return when (calendar.time) {
                                            today.time -> "Hoy"
                                            yesterday.time -> "Ayer"
                                            else -> {
                                                val formatter = SimpleDateFormat("d 'de' MMMM 'de' yyyy", Locale("es", "ES"))
                                                formatter.format(date)
                                            }
                                        }
                                    }
                                    
                                    fun formatCurrency(amount: Double): String {
                                        val format = NumberFormat.getCurrencyInstance(Locale("es", "CO"))
                                        return format.format(amount)
                                    }
                                    ```
                                - TransactionDetailsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.views.accounts
                                    
                                    import android.app.DatePickerDialog
                                    import android.util.Log
                                    import android.widget.Toast
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.Delete
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import com.google.android.gms.maps.model.CameraPosition
                                    import com.google.android.gms.maps.model.LatLng
                                    import com.google.firebase.Timestamp
                                    import com.google.maps.android.compose.*
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import kotlinx.coroutines.delay
                                    import kotlinx.coroutines.launch
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun TransactionDetailsScreen(
                                        navController: NavController,
                                        accountViewModel: AccountViewModel,
                                        accountId: String,
                                        transactionId: String
                                    ) {
                                        val context = LocalContext.current
                                        val transaction by accountViewModel.selectedTransaction.collectAsState()
                                    
                                        var transactionName by remember { mutableStateOf("") }
                                        var amount by remember { mutableStateOf("") }
                                        var transactionType by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf<Timestamp?>(null) }
                                        var isLocationEnabled by remember { mutableStateOf(false) }
                                        var location by remember { mutableStateOf<Location?>(null) }
                                        var showDeleteConfirmation by remember { mutableStateOf(false) }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var searchText by remember { mutableStateOf("") }
                                    
                                        val defaultLocation = LatLng(4.6097100, -74.0817500) // Bogota
                                        var mapPosition by remember { mutableStateOf(defaultLocation) }
                                        val cameraPositionState = rememberCameraPositionState {
                                            position = CameraPosition.fromLatLngZoom(defaultLocation, 15f)
                                        }
                                    
                                        val coroutineScope = rememberCoroutineScope()
                                        val snackbarHostState = remember { SnackbarHostState() }
                                    
                                        var isTransactionLoaded by remember { mutableStateOf(false) } // Add a new state to track loading
                                    
                                        // Load transaction data
                                        LaunchedEffect(Unit) {
                                            accountViewModel.getTransaction(accountId, transactionId)
                                            delay(5000) // Timeout for loading (5 seconds)
                                            if (transaction == null) {
                                                isTransactionLoaded = false
                                                snackbarHostState.showSnackbar("Failed to load transaction.")
                                            } else {
                                                isTransactionLoaded = true
                                            }
                                        }
                                    
                                        // Update local state when transaction loads
                                        LaunchedEffect(transaction) {
                                            transaction?.let {
                                                transactionName = it.transactionName
                                                amount = it.amount.toString()
                                                transactionType = it.transactionType
                                                selectedDate = it.dateTime
                                                location = it.location
                                                isLocationEnabled = it.location != null
                                                location?.let { loc ->
                                                    mapPosition = LatLng(loc.latitude, loc.longitude)
                                                    cameraPositionState.position = CameraPosition.fromLatLngZoom(
                                                        LatLng(loc.latitude, loc.longitude), 15f
                                                    )
                                                }
                                                isTransactionLoaded = true // Set as loaded
                                            }
                                        }
                                    
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                val calendar = Calendar.getInstance()
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            Calendar.getInstance().get(Calendar.YEAR),
                                            Calendar.getInstance().get(Calendar.MONTH),
                                            Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Edit Transaction") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, "Back")
                                                        }
                                                    },
                                                    actions = {
                                                        IconButton(
                                                            onClick = { showDeleteConfirmation = true },
                                                            enabled = isTransactionLoaded // Disable button if transaction is not loaded
                                                        ) {
                                                            Icon(Icons.Default.Delete, "Delete")
                                                        }
                                                    }
                                                )
                                            },
                                            snackbarHost = { SnackbarHost(snackbarHostState) }
                                        ) { padding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(padding)
                                                    .padding(16.dp)
                                                    .verticalScroll(rememberScrollState())
                                            ) {
                                                if (!isTransactionLoaded) {
                                                    CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                                                } else {
                                                    OutlinedTextField(
                                                        value = transactionName,
                                                        onValueChange = { transactionName = it },
                                                        label = { Text("Transaction Name") },
                                                        modifier = Modifier.fillMaxWidth()
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedTextField(
                                                        value = amount,
                                                        onValueChange = {
                                                            amount = it.filter { char -> char.isDigit() || char == '.' }
                                                        },
                                                        label = { Text("Amount") },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedTransactionType,
                                                        onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                    ) {
                                                        TextField(
                                                            value = transactionType,
                                                            onValueChange = { },
                                                            readOnly = true,
                                                            label = { Text("Type") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expandedTransactionType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedTransactionType,
                                                            onDismissRequest = { expandedTransactionType = false }
                                                        ) {
                                                            DropdownMenuItem(
                                                                text = { Text("Income") },
                                                                onClick = {
                                                                    transactionType = "Income"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                            DropdownMenuItem(
                                                                text = { Text("Expense") },
                                                                onClick = {
                                                                    transactionType = "Expense"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedButton(
                                                        onClick = { datePickerDialog.show() },
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text(selectedDate?.toDate()?.toString() ?: "Select Date")
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        Icon(
                                                            Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = if (isLocationEnabled) MaterialTheme.colorScheme.primary else Color.Gray
                                                        )
                                                        Spacer(modifier = Modifier.width(8.dp))
                                                        Text(
                                                            "Include Location",
                                                            style = MaterialTheme.typography.bodyLarge.copy(
                                                                fontWeight = FontWeight.Medium
                                                            )
                                                        )
                                                        Spacer(modifier = Modifier.weight(1f))
                                                        Switch(
                                                            checked = isLocationEnabled,
                                                            onCheckedChange = { enabled ->
                                                                isLocationEnabled = enabled
                                                                if (enabled && location == null) {
                                                                    location = Location(defaultLocation.latitude, defaultLocation.longitude)
                                                                    mapPosition = defaultLocation
                                                                }
                                                            }
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Google Maps
                                                    Box(
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(300.dp)
                                                    ) {
                                                        GoogleMap(
                                                            modifier = Modifier.fillMaxSize(),
                                                            cameraPositionState = cameraPositionState,
                                                            properties = MapProperties(isMyLocationEnabled = false),
                                                            onMapClick = { latLng ->
                                                                if (isLocationEnabled) {
                                                                    mapPosition = latLng
                                                                    location = Location(latLng.latitude, latLng.longitude)
                                                                }
                                                            }
                                                        ) {
                                                            if (location != null) {
                                                                Marker(
                                                                    state = MarkerState(position = mapPosition),
                                                                    title = "Transaction Location"
                                                                )
                                                            }
                                                        }
                                    
                                                        if (!isLocationEnabled) {
                                                            Box(
                                                                modifier = Modifier
                                                                    .fillMaxSize()
                                                                    .background(MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)),
                                                                contentAlignment = Alignment.Center
                                                            ) {
                                                                Text(
                                                                    "Location Disabled",
                                                                    style = MaterialTheme.typography.titleMedium,
                                                                    color = MaterialTheme.colorScheme.onSurface
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    Button(
                                                        onClick = {
                                                            transaction?.let { currentTransaction ->
                                                                val updatedTransaction = Transaction(
                                                                    id = currentTransaction.id,
                                                                    accountId = currentTransaction.accountId,
                                                                    transactionName = transactionName,
                                                                    amount = (amount.toDoubleOrNull() ?: 0.0).toLong(),
                                                                    dateTime = selectedDate ?: Timestamp.now(),
                                                                    transactionType = transactionType,
                                                                    location = if (isLocationEnabled) location else null
                                                                )
                                                                coroutineScope.launch {
                                                                    try {
                                                                        accountViewModel.updateTransaction(currentTransaction.accountId, currentTransaction, updatedTransaction)
                                                                        snackbarHostState.showSnackbar("Transaction updated successfully")
                                                                        navController.popBackStack()
                                                                    } catch (e: Exception) {
                                                                        snackbarHostState.showSnackbar("Failed to update transaction: ${e.message}")
                                                                        Log.e("TransactionUpdate", "Error updating transaction", e)
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        enabled = isTransactionLoaded // Disable button if transaction is not loaded
                                                    ) {
                                                        Text("Save Changes")
                                                    }
                                                }
                                            }
                                    
                                            if (showDeleteConfirmation) {
                                                AlertDialog(
                                                    onDismissRequest = { showDeleteConfirmation = false },
                                                    title = { Text("Delete Transaction") },
                                                    text = { Text("Are you sure you want to delete this transaction? This action cannot be undone.") },
                                                    confirmButton = {
                                                        Button(
                                                            onClick = {
                                                                transaction?.let {
                                                                    coroutineScope.launch {
                                                                        try {
                                                                            accountViewModel.deleteTransaction(accountId, it)
                                                                            snackbarHostState.showSnackbar("Transaction deleted successfully")
                                                                            navController.popBackStack()
                                                                        } catch (e: Exception) {
                                                                            snackbarHostState.showSnackbar("Failed to delete transaction: ${e.message}")
                                                                            Log.e("TransactionDelete", "Error deleting transaction", e)
                                                                        }
                                                                    }
                                                                    showDeleteConfirmation = false
                                                                }
                                                            },
                                                            colors = ButtonDefaults.buttonColors(
                                                                containerColor = MaterialTheme.colorScheme.error
                                                            )
                                                        ) {
                                                            Text("Delete")
                                                        }
                                                    },
                                                    dismissButton = {
                                                        TextButton(onClick = { showDeleteConfirmation = false }) {
                                                            Text("Cancel")
                                                        }
                                                    }
                                                )
                                            }
                                        }
                                    }
                                    
                                    // Placeholder for geocodeLocation function
                                    fun geocodeLocation(locationName: String): LatLng? {
                                        // TODO: Implement geocoding logic here (e.g., use a geocoding API to convert location name to LatLng)
                                        return null // Replace with actual implementation
                                    }
                                    ```
                                - TransactionDetailsScreen 2.kt
                                    ```
                                    package com.isis3510.spendiq.views.accounts
                                    
                                    import android.app.DatePickerDialog
                                    import android.util.Log
                                    import android.widget.Toast
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.rememberScrollState
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.foundation.verticalScroll
                                    import androidx.compose.material.icons.Icons
                                    import androidx.compose.material.icons.automirrored.filled.ArrowBack
                                    import androidx.compose.material.icons.filled.Delete
                                    import androidx.compose.material.icons.filled.LocationOn
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.navigation.NavController
                                    import com.google.android.gms.maps.model.CameraPosition
                                    import com.google.android.gms.maps.model.LatLng
                                    import com.google.firebase.Timestamp
                                    import com.google.maps.android.compose.*
                                    import com.isis3510.spendiq.model.data.Location
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import kotlinx.coroutines.delay
                                    import kotlinx.coroutines.launch
                                    import java.util.*
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun TransactionDetailsScreen(
                                        navController: NavController,
                                        accountViewModel: AccountViewModel,
                                        accountId: String,
                                        transactionId: String
                                    ) {
                                        val context = LocalContext.current
                                        val transaction by accountViewModel.selectedTransaction.collectAsState()
                                    
                                        var transactionName by remember { mutableStateOf("") }
                                        var amount by remember { mutableStateOf("") }
                                        var transactionType by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf<Timestamp?>(null) }
                                        var isLocationEnabled by remember { mutableStateOf(false) }
                                        var location by remember { mutableStateOf<Location?>(null) }
                                        var showDeleteConfirmation by remember { mutableStateOf(false) }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var searchText by remember { mutableStateOf("") }
                                    
                                        val defaultLocation = LatLng(4.6097100, -74.0817500) // Bogota
                                        var mapPosition by remember { mutableStateOf(defaultLocation) }
                                        val cameraPositionState = rememberCameraPositionState {
                                            position = CameraPosition.fromLatLngZoom(defaultLocation, 15f)
                                        }
                                    
                                        val coroutineScope = rememberCoroutineScope()
                                        val snackbarHostState = remember { SnackbarHostState() }
                                    
                                        var isTransactionLoaded by remember { mutableStateOf(false) } // Add a new state to track loading
                                    
                                        // Load transaction data
                                        LaunchedEffect(Unit) {
                                            accountViewModel.getTransaction(accountId, transactionId)
                                            delay(5000) // Timeout for loading (5 seconds)
                                            if (transaction == null) {
                                                isTransactionLoaded = false
                                                snackbarHostState.showSnackbar("Failed to load transaction.")
                                            } else {
                                                isTransactionLoaded = true
                                            }
                                        }
                                    
                                        // Update local state when transaction loads
                                        LaunchedEffect(transaction) {
                                            transaction?.let {
                                                transactionName = it.transactionName
                                                amount = it.amount.toString()
                                                transactionType = it.transactionType
                                                selectedDate = it.dateTime
                                                location = it.location
                                                isLocationEnabled = it.location != null
                                                location?.let { loc ->
                                                    mapPosition = LatLng(loc.latitude, loc.longitude)
                                                    cameraPositionState.position = CameraPosition.fromLatLngZoom(
                                                        LatLng(loc.latitude, loc.longitude), 15f
                                                    )
                                                }
                                                isTransactionLoaded = true // Set as loaded
                                            }
                                        }
                                    
                                        val datePickerDialog = DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                val calendar = Calendar.getInstance()
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            Calendar.getInstance().get(Calendar.YEAR),
                                            Calendar.getInstance().get(Calendar.MONTH),
                                            Calendar.getInstance().get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        Scaffold(
                                            topBar = {
                                                TopAppBar(
                                                    title = { Text("Edit Transaction") },
                                                    navigationIcon = {
                                                        IconButton(onClick = { navController.popBackStack() }) {
                                                            Icon(Icons.AutoMirrored.Filled.ArrowBack, "Back")
                                                        }
                                                    },
                                                    actions = {
                                                        IconButton(
                                                            onClick = { showDeleteConfirmation = true },
                                                            enabled = isTransactionLoaded // Disable button if transaction is not loaded
                                                        ) {
                                                            Icon(Icons.Default.Delete, "Delete")
                                                        }
                                                    }
                                                )
                                            },
                                            snackbarHost = { SnackbarHost(snackbarHostState) }
                                        ) { padding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(padding)
                                                    .padding(16.dp)
                                                    .verticalScroll(rememberScrollState())
                                            ) {
                                                if (!isTransactionLoaded) {
                                                    CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                                                } else {
                                                    OutlinedTextField(
                                                        value = transactionName,
                                                        onValueChange = { transactionName = it },
                                                        label = { Text("Transaction Name") },
                                                        modifier = Modifier.fillMaxWidth()
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedTextField(
                                                        value = amount,
                                                        onValueChange = {
                                                            amount = it.filter { char -> char.isDigit() || char == '.' }
                                                        },
                                                        label = { Text("Amount") },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                                                    )
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedTransactionType,
                                                        onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                    ) {
                                                        TextField(
                                                            value = transactionType,
                                                            onValueChange = { },
                                                            readOnly = true,
                                                            label = { Text("Type") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expandedTransactionType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedTransactionType,
                                                            onDismissRequest = { expandedTransactionType = false }
                                                        ) {
                                                            DropdownMenuItem(
                                                                text = { Text("Income") },
                                                                onClick = {
                                                                    transactionType = "Income"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                            DropdownMenuItem(
                                                                text = { Text("Expense") },
                                                                onClick = {
                                                                    transactionType = "Expense"
                                                                    expandedTransactionType = false
                                                                }
                                                            )
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    OutlinedButton(
                                                        onClick = { datePickerDialog.show() },
                                                        modifier = Modifier.fillMaxWidth()
                                                    ) {
                                                        Text(selectedDate?.toDate()?.toString() ?: "Select Date")
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    Row(
                                                        modifier = Modifier.fillMaxWidth(),
                                                        verticalAlignment = Alignment.CenterVertically
                                                    ) {
                                                        Icon(
                                                            Icons.Default.LocationOn,
                                                            contentDescription = "Location",
                                                            tint = if (isLocationEnabled) MaterialTheme.colorScheme.primary else Color.Gray
                                                        )
                                                        Spacer(modifier = Modifier.width(8.dp))
                                                        Text(
                                                            "Include Location",
                                                            style = MaterialTheme.typography.bodyLarge.copy(
                                                                fontWeight = FontWeight.Medium
                                                            )
                                                        )
                                                        Spacer(modifier = Modifier.weight(1f))
                                                        Switch(
                                                            checked = isLocationEnabled,
                                                            onCheckedChange = { enabled ->
                                                                isLocationEnabled = enabled
                                                                if (enabled && location == null) {
                                                                    location = Location(defaultLocation.latitude, defaultLocation.longitude)
                                                                    mapPosition = defaultLocation
                                                                }
                                                            }
                                                        )
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                                    // Google Maps
                                                    Box(
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(300.dp)
                                                    ) {
                                                        GoogleMap(
                                                            modifier = Modifier.fillMaxSize(),
                                                            cameraPositionState = cameraPositionState,
                                                            properties = MapProperties(isMyLocationEnabled = false),
                                                            onMapClick = { latLng ->
                                                                if (isLocationEnabled) {
                                                                    mapPosition = latLng
                                                                    location = Location(latLng.latitude, latLng.longitude)
                                                                }
                                                            }
                                                        ) {
                                                            if (location != null) {
                                                                Marker(
                                                                    state = MarkerState(position = mapPosition),
                                                                    title = "Transaction Location"
                                                                )
                                                            }
                                                        }
                                    
                                                        if (!isLocationEnabled) {
                                                            Box(
                                                                modifier = Modifier
                                                                    .fillMaxSize()
                                                                    .background(MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)),
                                                                contentAlignment = Alignment.Center
                                                            ) {
                                                                Text(
                                                                    "Location Disabled",
                                                                    style = MaterialTheme.typography.titleMedium,
                                                                    color = MaterialTheme.colorScheme.onSurface
                                                                )
                                                            }
                                                        }
                                                    }
                                    
                                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                                    Button(
                                                        onClick = {
                                                            transaction?.let { currentTransaction ->
                                                                val updatedTransaction = Transaction(
                                                                    id = currentTransaction.id,
                                                                    accountId = currentTransaction.accountId,
                                                                    transactionName = transactionName,
                                                                    amount = (amount.toDoubleOrNull() ?: 0.0).toLong(),
                                                                    dateTime = selectedDate ?: Timestamp.now(),
                                                                    transactionType = transactionType,
                                                                    location = if (isLocationEnabled) location else null
                                                                )
                                                                coroutineScope.launch {
                                                                    try {
                                                                        accountViewModel.updateTransaction(currentTransaction.accountId, currentTransaction, updatedTransaction)
                                                                        snackbarHostState.showSnackbar("Transaction updated successfully")
                                                                        navController.popBackStack()
                                                                    } catch (e: Exception) {
                                                                        snackbarHostState.showSnackbar("Failed to update transaction: ${e.message}")
                                                                        Log.e("TransactionUpdate", "Error updating transaction", e)
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modifier = Modifier.fillMaxWidth(),
                                                        enabled = isTransactionLoaded // Disable button if transaction is not loaded
                                                    ) {
                                                        Text("Save Changes")
                                                    }
                                                }
                                            }
                                    
                                            if (showDeleteConfirmation) {
                                                AlertDialog(
                                                    onDismissRequest = { showDeleteConfirmation = false },
                                                    title = { Text("Delete Transaction") },
                                                    text = { Text("Are you sure you want to delete this transaction? This action cannot be undone.") },
                                                    confirmButton = {
                                                        Button(
                                                            onClick = {
                                                                transaction?.let {
                                                                    coroutineScope.launch {
                                                                        try {
                                                                            accountViewModel.deleteTransaction(accountId, it)
                                                                            snackbarHostState.showSnackbar("Transaction deleted successfully")
                                                                            navController.popBackStack()
                                                                        } catch (e: Exception) {
                                                                            snackbarHostState.showSnackbar("Failed to delete transaction: ${e.message}")
                                                                            Log.e("TransactionDelete", "Error deleting transaction", e)
                                                                        }
                                                                    }
                                                                    showDeleteConfirmation = false
                                                                }
                                                            },
                                                            colors = ButtonDefaults.buttonColors(
                                                                containerColor = MaterialTheme.colorScheme.error
                                                            )
                                                        ) {
                                                            Text("Delete")
                                                        }
                                                    },
                                                    dismissButton = {
                                                        TextButton(onClick = { showDeleteConfirmation = false }) {
                                                            Text("Cancel")
                                                        }
                                                    }
                                                )
                                            }
                                        }
                                    }
                                    
                                    // Placeholder for geocodeLocation function
                                    fun geocodeLocation(locationName: String): LatLng? {
                                        // TODO: Implement geocoding logic here (e.g., use a geocoding API to convert location name to LatLng)
                                        return null // Replace with actual implementation
                                    }
                                    ```
                                - AccountsScreen.kt
                                    ```
                                    package com.isis3510.spendiq.view.accounts  // Ensure this matches the actual directory structure
                                    
                                    import androidx.compose.foundation.background
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.graphics.Color
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.lifecycle.viewmodel.compose.viewModel
                                    import androidx.navigation.NavController
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.views.transaction.AddTransactionModal
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    
                                    @Composable
                                    fun AccountsScreen(navController: NavController, accountViewModel: AccountViewModel) {  // Make sure the parameter name is consistent
                                        val accounts by accountViewModel.accounts.collectAsState()
                                        val uiState by accountViewModel.uiState.collectAsState()
                                        var showEditModal by remember { mutableStateOf(false) }
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                        LaunchedEffect(Unit) {
                                            accountViewModel.fetchAccounts()
                                        }
                                    
                                        Scaffold(
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    accountViewModel)
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(16.dp)
                                            ) {
                                                Text(
                                                    "Accounts",
                                                    fontSize = 24.sp,
                                                    fontWeight = FontWeight.Bold
                                                )
                                                Text(
                                                    "These are your current accounts",
                                                    fontSize = 14.sp,
                                                    color = Color.Gray
                                                )
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                when (uiState) {
                                                    is AccountViewModel.UiState.Loading -> {
                                                        CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                                                    }
                                                    is AccountViewModel.UiState.Success -> {
                                                        LazyColumn(
                                                            verticalArrangement = Arrangement.spacedBy(8.dp)
                                                        ) {
                                                            items(accounts) { account ->
                                                                AccountItem(account, navController)
                                                            }
                                                        }
                                                    }
                                                    is AccountViewModel.UiState.Error -> {
                                                        Text(
                                                            text = (uiState as AccountViewModel.UiState.Error).message,
                                                            color = Color.Red
                                                        )
                                                    }
                                                    else -> {} // Idle state, do nothing
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                                Button(
                                                    onClick = { showEditModal = true },
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text("Edit Accounts")
                                                }
                                            }
                                        }
                                    
                                        if (showEditModal) {
                                            EditAccountModal(
                                                existingAccounts = accounts,
                                                onDismiss = { showEditModal = false },
                                                onCreateAccount = { accountType ->
                                                    accountViewModel.createAccount(accountType)
                                                },
                                                onDeleteAccount = { accountType ->
                                                    accountViewModel.deleteAccount(accountType)
                                                }
                                            )
                                        }
                                    
                                        if (showAddTransactionModal) {
                                            AddTransactionModal(
                                                accountViewModel = accountViewModel,
                                                onDismiss = { showAddTransactionModal = false },
                                                onTransactionAdded = {
                                                    showAddTransactionModal = false
                                                    accountViewModel.fetchAccounts()
                                                }
                                            )
                                        }
                                    }
                                    
                                    @Composable
                                    fun AccountItem(account: Account, navController: NavController) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(vertical = 8.dp),
                                            onClick = { navController.navigate("accountTransactions/${account.name}") }
                                        ) {
                                            Box(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .height(80.dp)
                                                    .background(account.color)
                                                    .padding(16.dp)
                                            ) {
                                                Column {
                                                    Text(
                                                        text = account.name,
                                                        color = Color.White,
                                                        fontWeight = FontWeight.Bold
                                                    )
                                                    Text(
                                                        text = account.type,
                                                        color = Color.White.copy(alpha = 0.7f)
                                                    )
                                                }
                                                Text(
                                                    text = "$ ${account.amount}",
                                                    color = Color.White,
                                                    fontWeight = FontWeight.Bold,
                                                    modifier = Modifier.align(Alignment.CenterEnd)
                                                )
                                            }
                                        }
                                    }
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun EditAccountModal(
                                        existingAccounts: List<Account>,
                                        onDismiss: () -> Unit,
                                        onCreateAccount: (String) -> Unit,
                                        onDeleteAccount: (String) -> Unit
                                    ) {
                                        var selectedAccountType by remember { mutableStateOf("") }
                                        var selectedAction by remember { mutableStateOf("") }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                        var expandedAction by remember { mutableStateOf(false) }
                                        var showDeleteConfirmation by remember { mutableStateOf(false) }
                                    
                                        val availableAccountTypes = listOf("Nu", "Bancolombia", "Nequi")
                                            .filter { accountType -> existingAccounts.none { it.name == accountType } }
                                    
                                        val actions = if (availableAccountTypes.isEmpty()) listOf("Delete") else listOf("Create", "Delete")
                                    
                                        ModalBottomSheet(onDismissRequest = onDismiss) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Edit Accounts", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedAction,
                                                    onExpandedChange = { expandedAction = !expandedAction }
                                                ) {
                                                    TextField(
                                                        value = selectedAction,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        label = { Text("Action") },
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAction) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedAction,
                                                        onDismissRequest = { expandedAction = false }
                                                    ) {
                                                        actions.forEach { action ->
                                                            DropdownMenuItem(
                                                                text = { Text(action) },
                                                                onClick = {
                                                                    selectedAction = action
                                                                    expandedAction = false
                                                                    selectedAccountType = ""
                                                                }
                                                            )
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                if (selectedAction.isNotEmpty()) {
                                                    val applicableAccountTypes = if (selectedAction == "Create") availableAccountTypes else existingAccounts.map { it.name }
                                    
                                                    ExposedDropdownMenuBox(
                                                        expanded = expandedAccountType,
                                                        onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                    ) {
                                                        TextField(
                                                            value = selectedAccountType,
                                                            onValueChange = {},
                                                            readOnly = true,
                                                            label = { Text("Account Type") },
                                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                            modifier = Modifier.menuAnchor().fillMaxWidth()
                                                        )
                                                        ExposedDropdownMenu(
                                                            expanded = expandedAccountType,
                                                            onDismissRequest = { expandedAccountType = false }
                                                        ) {
                                                            applicableAccountTypes.forEach { accountType ->
                                                                DropdownMenuItem(
                                                                    text = { Text(accountType) },
                                                                    onClick = {
                                                                        selectedAccountType = accountType
                                                                        expandedAccountType = false
                                                                    }
                                                                )
                                                            }
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                Button(
                                                    onClick = {
                                                        if (selectedAction == "Delete") {
                                                            showDeleteConfirmation = true
                                                        } else {
                                                            onCreateAccount(selectedAccountType)
                                                            onDismiss()
                                                        }
                                                    },
                                                    enabled = selectedAccountType.isNotEmpty(),
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text(selectedAction)
                                                }
                                            }
                                        }
                                    
                                        if (showDeleteConfirmation) {
                                            AlertDialog(
                                                onDismissRequest = { showDeleteConfirmation = false },
                                                title = { Text("Delete Account") },
                                                text = { Text("Are you sure you want to delete the account?") },
                                                confirmButton = {
                                                    TextButton(
                                                        onClick = {
                                                            onDeleteAccount(selectedAccountType)
                                                            showDeleteConfirmation = false
                                                            onDismiss()
                                                        }
                                                    ) {
                                                        Text("Yes")
                                                    }
                                                },
                                                dismissButton = {
                                                    TextButton(
                                                        onClick = { showDeleteConfirmation = false }
                                                    ) {
                                                        Text("No")
                                                    }
                                                }
                                            )
                                        }
                                    }
                                    ```
                            - **theme/**
                                - Color.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import androidx.compose.ui.graphics.Color
                                    
                                    val Purple80 = Color(0xFFD0BCFF)
                                    val PurpleGrey80 = Color(0xFFCCC2DC)
                                    val Pink80 = Color(0xFFEFB8C8)
                                    
                                    val Purple40 = Color(0xFF6650a4)
                                    val PurpleGrey40 = Color(0xFF625b71)
                                    val Pink40 = Color(0xFF7D5260)                                    ```
                                - Theme.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import android.os.Build
                                    import androidx.compose.foundation.isSystemInDarkTheme
                                    import androidx.compose.material3.MaterialTheme
                                    import androidx.compose.material3.darkColorScheme
                                    import androidx.compose.material3.dynamicDarkColorScheme
                                    import androidx.compose.material3.dynamicLightColorScheme
                                    import androidx.compose.material3.lightColorScheme
                                    import androidx.compose.runtime.Composable
                                    import androidx.compose.ui.platform.LocalContext
                                    
                                    private val DarkColorScheme = darkColorScheme(
                                        primary = Purple80,
                                        secondary = PurpleGrey80,
                                        tertiary = Pink80
                                    )
                                    
                                    private val LightColorScheme = lightColorScheme(
                                        primary = Purple40,
                                        secondary = PurpleGrey40,
                                        tertiary = Pink40
                                    
                                        /* Other default colors to override
                                        background = Color(0xFFFFFBFE),
                                        surface = Color(0xFFFFFBFE),
                                        onPrimary = Color.White,
                                        onSecondary = Color.White,
                                        onTertiary = Color.White,
                                        onBackground = Color(0xFF1C1B1F),
                                        onSurface = Color(0xFF1C1B1F),
                                        */
                                    )
                                    
                                    @Composable
                                    fun SpendiQTheme(
                                        darkTheme: Boolean = isSystemInDarkTheme(),
                                        // Dynamic color is available on Android 12+
                                        dynamicColor: Boolean = true,
                                        content: @Composable () -> Unit
                                    ) {
                                        val colorScheme = when {
                                            dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
                                                val context = LocalContext.current
                                                if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
                                            }
                                    
                                            darkTheme -> DarkColorScheme
                                            else -> LightColorScheme
                                        }
                                    
                                        MaterialTheme(
                                            colorScheme = colorScheme,
                                            typography = Typography,
                                            content = content
                                        )
                                    }                                    ```
                                - Type.kt
                                    ```
                                    package com.isis3510.spendiq.views.theme
                                    
                                    import androidx.compose.material3.Typography
                                    import androidx.compose.ui.text.TextStyle
                                    import androidx.compose.ui.text.font.FontFamily
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.unit.sp
                                    
                                    // Set of Material typography styles to start with
                                    val Typography = Typography(
                                        bodyLarge = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Normal,
                                            fontSize = 16.sp,
                                            lineHeight = 24.sp,
                                            letterSpacing = 0.5.sp
                                        )
                                        /* Other default text styles to override
                                        titleLarge = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Normal,
                                            fontSize = 22.sp,
                                            lineHeight = 28.sp,
                                            letterSpacing = 0.sp
                                        ),
                                        labelSmall = TextStyle(
                                            fontFamily = FontFamily.Default,
                                            fontWeight = FontWeight.Medium,
                                            fontSize = 11.sp,
                                            lineHeight = 16.sp,
                                            letterSpacing = 0.5.sp
                                        )
                                        */
                                    )                                    ```
                            - **main/**
                                - MainContent.kt
                                    ```
                                    package com.isis3510.spendiq.views.main
                                    
                                    import androidx.compose.foundation.Image
                                    import androidx.compose.foundation.clickable
                                    import androidx.compose.foundation.layout.*
                                    import androidx.compose.foundation.lazy.LazyColumn
                                    import androidx.compose.foundation.lazy.items
                                    import androidx.compose.foundation.text.KeyboardOptions
                                    import androidx.compose.material3.*
                                    import androidx.compose.runtime.*
                                    import androidx.compose.ui.Alignment
                                    import androidx.compose.ui.Modifier
                                    import androidx.compose.ui.platform.LocalContext
                                    import androidx.compose.ui.text.font.FontWeight
                                    import androidx.compose.ui.text.input.KeyboardType
                                    import androidx.compose.ui.unit.dp
                                    import androidx.compose.ui.unit.sp
                                    import androidx.navigation.NavController
                                    import coil.compose.rememberImagePainter
                                    import com.isis3510.spendiq.model.data.Account
                                    import com.isis3510.spendiq.model.data.Transaction
                                    import com.isis3510.spendiq.model.data.Offer
                                    import com.isis3510.spendiq.views.common.BottomNavigation
                                    import com.isis3510.spendiq.viewmodel.AccountViewModel
                                    import com.isis3510.spendiq.viewmodel.AuthViewModel
                                    import com.isis3510.spendiq.viewmodel.OffersViewModel
                                    import com.google.firebase.Timestamp
                                    import java.text.SimpleDateFormat
                                    import java.util.*
                                    
                                    @Composable
                                    fun MainContent(
                                        navController: NavController,
                                        authViewModel: AuthViewModel,
                                        accountViewModel: AccountViewModel,
                                        promoViewModel: OffersViewModel
                                    ) {
                                        val accounts by accountViewModel.accounts.collectAsState()
                                        val promos by promoViewModel.offers.collectAsState()
                                        val currentMoney by accountViewModel.currentMoney.collectAsState()
                                        var showAddTransactionModal by remember { mutableStateOf(false) }
                                    
                                        LaunchedEffect(Unit) {
                                            accountViewModel.fetchAccounts()
                                            promoViewModel.fetchOffers()
                                        }
                                    
                                        Scaffold(
                                            bottomBar = {
                                                BottomNavigation(
                                                    navController = navController,
                                                    accountViewModel
                                                )
                                            }
                                        ) { innerPadding ->
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxSize()
                                                    .padding(innerPadding)
                                                    .padding(16.dp),
                                                horizontalAlignment = Alignment.Start,
                                                verticalArrangement = Arrangement.Top
                                            ) {
                                                Text(
                                                    text = SimpleDateFormat("EEE, d MMM", Locale.getDefault()).format(Date()),
                                                    style = MaterialTheme.typography.bodySmall,
                                                    modifier = Modifier.padding(bottom = 4.dp)
                                                )
                                                Text(
                                                    text = "Summary",
                                                    style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Medium)
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                                Text(
                                                    text = "Take a look at your finances",
                                                    style = MaterialTheme.typography.bodyMedium
                                                )
                                                Spacer(modifier = Modifier.height(16.dp))
                                                Text(
                                                    text = "Current available money",
                                                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                )
                                                Text(
                                                    text = "$ $currentMoney",
                                                    style = MaterialTheme.typography.headlineLarge.copy(fontWeight = FontWeight.Bold),
                                                    modifier = Modifier.padding(vertical = 8.dp)
                                                )
                                                Spacer(modifier = Modifier.height(16.dp))
                                                Text(
                                                    text = "Accounts",
                                                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                                LazyColumn {
                                                    items(accounts) { account ->
                                                        AccountItem(account, navController)
                                                        Spacer(modifier = Modifier.height(8.dp))
                                                    }
                                                }
                                                Spacer(modifier = Modifier.height(16.dp))
                                                Text(
                                                    text = "Save with these promotions",
                                                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Medium)
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                                LazyColumn {
                                                    items(promos.take(3)) { promo ->
                                                        PromoItem(promo) {}
                                                        Spacer(modifier = Modifier.height(8.dp))
                                                    }
                                                }
                                                Button(
                                                    onClick = { navController.navigate("promos") },
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text("See More Promotions")
                                                }
                                            }
                                    
                                            if (showAddTransactionModal) {
                                                AddTransactionModal(
                                                    accountViewModel = accountViewModel,
                                                    accounts = accounts,
                                                    onDismiss = { showAddTransactionModal = false },
                                                    onTransactionAdded = {
                                                        showAddTransactionModal = false
                                                        accountViewModel.fetchAccounts()
                                                    }
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun AccountItem(account: Account, navController: NavController) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable { navController.navigate("accountTransactions/${account.name}") },
                                            colors = CardDefaults.cardColors(containerColor = account.color)
                                        ) {
                                            Column(modifier = Modifier.padding(16.dp)) {
                                                Text(
                                                    text = account.name,
                                                    color = androidx.compose.ui.graphics.Color.White,
                                                    fontWeight = FontWeight.Bold
                                                )
                                                Spacer(modifier = Modifier.height(4.dp))
                                                Text(
                                                    text = account.type,
                                                    color = androidx.compose.ui.graphics.Color.White.copy(alpha = 0.7f)
                                                )
                                                Spacer(modifier = Modifier.height(8.dp))
                                                Text(
                                                    text = "$ ${account.amount}",
                                                    color = androidx.compose.ui.graphics.Color.White,
                                                    fontWeight = FontWeight.Bold
                                                )
                                            }
                                        }
                                    }
                                    
                                    @Composable
                                    fun PromoItem(promo: Offer, onClick: () -> Unit) {
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .clickable(onClick = onClick),
                                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                                        ) {
                                            Column(modifier = Modifier.padding(16.dp)) {
                                                promo.placeName?.let { Text(it, fontSize = 18.sp, fontWeight = FontWeight.Bold) }
                                                Spacer(modifier = Modifier.height(4.dp))
                                                promo.offerDescription?.let { Text(it, fontSize = 14.sp) }
                                                Spacer(modifier = Modifier.height(4.dp))
                                                Text(
                                                    "Recommended: ${promo.recommendationReason}",
                                                    fontSize = 12.sp,
                                                    color = androidx.compose.ui.graphics.Color.Gray
                                                )
                                                Spacer(modifier = Modifier.height(4.dp))
                                                promo.shopImage?.let {
                                                    Image(
                                                        painter = rememberImagePainter(it),
                                                        contentDescription = "Shop Image",
                                                        modifier = Modifier
                                                            .fillMaxWidth()
                                                            .height(150.dp)
                                                    )
                                                }
                                            }
                                        }
                                    }
                                    
                                    @OptIn(ExperimentalMaterial3Api::class)
                                    @Composable
                                    fun AddTransactionModal(
                                        accountViewModel: AccountViewModel,
                                        accounts: List<Account>,
                                        onDismiss: () -> Unit,
                                        onTransactionAdded: () -> Unit
                                    ) {
                                        var amount by remember { mutableStateOf("") }
                                        var transactionName by remember { mutableStateOf("") }
                                        var selectedDate by remember { mutableStateOf(Timestamp.now()) }
                                        var selectedTransactionType by remember { mutableStateOf("Expense") }
                                        var expandedTransactionType by remember { mutableStateOf(false) }
                                        var selectedAccountType by remember { mutableStateOf("Nu") }
                                        var expandedAccountType by remember { mutableStateOf(false) }
                                    
                                        val context = LocalContext.current
                                        val calendar = Calendar.getInstance()
                                    
                                        val datePickerDialog = android.app.DatePickerDialog(
                                            context,
                                            { _, year, month, dayOfMonth ->
                                                calendar.set(year, month, dayOfMonth)
                                                selectedDate = Timestamp(calendar.time)
                                            },
                                            calendar.get(Calendar.YEAR),
                                            calendar.get(Calendar.MONTH),
                                            calendar.get(Calendar.DAY_OF_MONTH)
                                        )
                                    
                                        ModalBottomSheet(
                                            onDismissRequest = onDismiss
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(16.dp)
                                            ) {
                                                Text("Add Transaction", style = MaterialTheme.typography.headlineSmall)
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                OutlinedTextField(
                                                    value = amount,
                                                    onValueChange = { amount = it.filter { char -> char.isDigit() } },
                                                    label = { Text("Amount") },
                                                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                OutlinedTextField(
                                                    value = transactionName,
                                                    onValueChange = { transactionName = it },
                                                    label = { Text("Transaction Name") },
                                                    modifier = Modifier.fillMaxWidth()
                                                )
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                Button(onClick = { datePickerDialog.show() }) {
                                                    Text("Select Date: ${SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(selectedDate.toDate())}")
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedTransactionType,
                                                    onExpandedChange = { expandedTransactionType = !expandedTransactionType }
                                                ) {
                                                    TextField(
                                                        value = selectedTransactionType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedTransactionType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedTransactionType,
                                                        onDismissRequest = { expandedTransactionType = false }
                                                    ) {
                                                        DropdownMenuItem(
                                                            text = { Text("Income") },
                                                            onClick = {
                                                                selectedTransactionType = "Income"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                        DropdownMenuItem(
                                                            text = { Text("Expense") },
                                                            onClick = {
                                                                selectedTransactionType = "Expense"
                                                                expandedTransactionType = false
                                                            }
                                                        )
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(8.dp))
                                    
                                                ExposedDropdownMenuBox(
                                                    expanded = expandedAccountType,
                                                    onExpandedChange = { expandedAccountType = !expandedAccountType }
                                                ) {
                                                    TextField(
                                                        value = selectedAccountType,
                                                        onValueChange = {},
                                                        readOnly = true,
                                                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedAccountType) },
                                                        modifier = Modifier.menuAnchor().fillMaxWidth()
                                                    )
                                                    ExposedDropdownMenu(
                                                        expanded = expandedAccountType,
                                                        onDismissRequest = { expandedAccountType = false }
                                                    ) {
                                                        accounts.forEach { account ->
                                                            DropdownMenuItem(
                                                                text = { Text(account.name) },
                                                                onClick = {
                                                                    selectedAccountType = account.name
                                                                    expandedAccountType = false
                                                                }
                                                            )
                                                        }
                                                    }
                                                }
                                    
                                                Spacer(modifier = Modifier.height(16.dp))
                                    
                                                Button(
                                                    onClick = {
                                                        val transaction = Transaction(
                                                            id = "",
                                                            accountId = selectedAccountType,
                                                            transactionName = transactionName,
                                                            amount = amount.toLongOrNull() ?: 0L,
                                                            dateTime = selectedDate,
                                                            transactionType = selectedTransactionType,
                                                            location = null
                                                        )
                                                        accountViewModel.addTransactionWithAccountCheck(transaction)
                                                        onTransactionAdded()
                                                        onDismiss()
                                                    },
                                                    modifier = Modifier.fillMaxWidth()
                                                ) {
                                                    Text("Add Transaction")
                                                }
                                            }
                                        }
                                    }
                                    ```
                        - **Services/**
                            - NotificationListener.kt
                                ```
                                package com.isis3510.spendiq.Services
                                
                                import android.app.NotificationChannel
                                import android.app.NotificationManager
                                import android.content.Context
                                import android.os.Build
                                import android.service.notification.NotificationListenerService
                                import android.service.notification.StatusBarNotification
                                import android.util.Log
                                import androidx.core.app.NotificationCompat
                                import com.google.firebase.Timestamp
                                import com.google.firebase.auth.FirebaseAuth
                                import com.google.firebase.firestore.FirebaseFirestore
                                import com.isis3510.spendiq.R
                                import com.isis3510.spendiq.services.LocationService
                                import kotlinx.coroutines.*
                                import kotlinx.coroutines.tasks.await
                                
                                class NotificationListener : NotificationListenerService() {
                                
                                    private val firestore = FirebaseFirestore.getInstance()
                                    private lateinit var locationService: LocationService
                                    private val coroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
                                
                                    override fun onCreate() {
                                        super.onCreate()
                                        locationService = LocationService(this)
                                    }
                                
                                    override fun onDestroy() {
                                        super.onDestroy()
                                        coroutineScope.cancel()
                                    }
                                
                                    override fun onNotificationPosted(sbn: StatusBarNotification?) {
                                        super.onNotificationPosted(sbn)
                                
                                        sbn?.let {
                                            val notification = sbn.notification
                                            val extras = notification.extras
                                
                                            Log.d("NotificationListener", "Notification received from: ${sbn.packageName}")
                                
                                            val title = extras.getString("android.title", "No title") ?: "No title"
                                            val text = extras.getCharSequence("android.text", "No text").toString()
                                
                                            Log.d("NotificationListener", "Notification Title: $title")
                                            Log.d("NotificationListener", "Notification Text: $text")
                                
                                            if (text.contains("content hidden", ignoreCase = true)) {
                                                Log.d("NotificationListener", "Sensitive notification content is hidden. Unable to process.")
                                                return
                                            }
                                
                                            when {
                                                title.startsWith("Compra aprobada por") -> {
                                                    coroutineScope.launch {
                                                        processExpenseTransaction(text)
                                                    }
                                                }
                                                title == "Nu" -> {
                                                    coroutineScope.launch {
                                                        processIncomeTransaction(text)
                                                    }
                                                }
                                                else -> {
                                                    Log.d("NotificationListener", "Notification does not match the required title for processing.")
                                                }
                                            }
                                        }
                                    }
                                
                                    private suspend fun processIncomeTransaction(text: String) {
                                        val userId = getCurrentUserId() ?: return
                                
                                        val nuAccount = getNuAccount(userId)
                                        if (nuAccount == null) {
                                            Log.d("NotificationListener", "Nu account not found, creating new account.")
                                            createNuAccount(userId)
                                        }
                                
                                        val regex = Regex("([\\w\\s]+) te envio \\$([\\d,.]+) con motivo de ([\\w\\s]+)")
                                        val matchResult = regex.find(text)
                                
                                        matchResult?.let {
                                            val company = matchResult.groupValues[1]
                                            var amountString = matchResult.groupValues[2].replace(".", "")
                                
                                            if (amountString.contains(",")) {
                                                amountString = amountString.split(",")[0]
                                            }
                                
                                            val amount = amountString.toLong()
                                            val currentTimestamp = Timestamp.now()
                                
                                            // Retrieve location before proceeding with transaction
                                            val location = locationService.getCurrentLocation()
                                
                                            if (!transactionExists(userId, company, amount, currentTimestamp, "Income")) {
                                                Log.d("NotificationListener", "Processing income from $company, amount: $amount")
                                                addTransaction(userId, amount, company, "Income", location)
                                                updateNuAccountBalance(userId, amount)
                                                showNotification("Income Recorded", "Income of $$amount from $company has been recorded.")
                                            } else {
                                                Log.d("NotificationListener", "Duplicate income transaction detected. Skipping creation.")
                                            }
                                        } ?: run {
                                            Log.d("NotificationListener", "Income transaction format not matched.")
                                        }
                                    }
                                
                                    private suspend fun processExpenseTransaction(text: String) {
                                        val userId = getCurrentUserId() ?: return
                                
                                        val nuAccount = getNuAccount(userId)
                                        if (nuAccount == null) {
                                            Log.d("NotificationListener", "Nu account not found, creating new account.")
                                            createNuAccount(userId)
                                        }
                                
                                        val regex = Regex("Tu compra en ([\\w\\*\\s]+) por \\$([\\d,.]+) con tu tarjeta terminada en ([\\d]+)")
                                        val matchResult = regex.find(text)
                                
                                        matchResult?.let {
                                            val company = matchResult.groupValues[1]
                                            var amountString = matchResult.groupValues[2].replace(".", "")
                                
                                            if (amountString.contains(",")) {
                                                amountString = amountString.split(",")[0]
                                            }
                                
                                            val amount = amountString.toLong()
                                            val currentTimestamp = Timestamp.now()
                                
                                            // Retrieve location before proceeding with transaction
                                            val location = locationService.getCurrentLocation()
                                
                                            if (!transactionExists(userId, company, amount, currentTimestamp, "Expense")) {
                                                Log.d("NotificationListener", "Processing expense for $company, amount: $amount")
                                                addTransaction(userId, amount, company, "Expense", location)
                                                updateNuAccountBalance(userId, -amount)
                                                showNotification("Expense Recorded", "Expense of $$amount to $company has been recorded.")
                                            } else {
                                                Log.d("NotificationListener", "Duplicate expense transaction detected. Skipping creation.")
                                            }
                                        } ?: run {
                                            Log.d("NotificationListener", "Expense transaction format not matched.")
                                        }
                                    }
                                
                                    private suspend fun transactionExists(userId: String, transactionName: String, amount: Long, timestamp: Timestamp, transactionType: String): Boolean {
                                        return try {
                                            val startTime = Timestamp(timestamp.seconds - 60, timestamp.nanoseconds)
                                            val endTime = Timestamp(timestamp.seconds + 60, timestamp.nanoseconds)
                                
                                            val snapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (snapshot.documents.isNotEmpty()) {
                                                val accountId = snapshot.documents[0].id
                                                val transactionSnapshot = firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .whereEqualTo("transactionName", transactionName)
                                                    .whereEqualTo("amount", amount)
                                                    .whereEqualTo("transactionType", transactionType)
                                                    .whereGreaterThan("dateTime", startTime)
                                                    .whereLessThan("dateTime", endTime)
                                                    .get()
                                                    .await()
                                
                                                transactionSnapshot.documents.isNotEmpty()
                                            } else {
                                                false
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error checking transaction existence: ${e.message}")
                                            false
                                        }
                                    }
                                
                                    private suspend fun getNuAccount(userId: String): Map<String, Any>? {
                                        return try {
                                            val snapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (snapshot.documents.isNotEmpty()) {
                                                snapshot.documents[0].data
                                            } else {
                                                null
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error fetching Nu account: ${e.message}")
                                            null
                                        }
                                    }
                                
                                    private suspend fun createNuAccount(userId: String) {
                                        try {
                                            firestore.collection("accounts").add(
                                                mapOf(
                                                    "amount" to 0L,
                                                    "name" to "Nu",
                                                    "user_id" to userId
                                                )
                                            ).await()
                                            Log.d("NotificationListener", "Nu account created successfully.")
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error creating Nu account: ${e.message}")
                                        }
                                    }
                                
                                    private suspend fun addTransaction(userId: String, amount: Long, transactionName: String, transactionType: String, location: android.location.Location?) {
                                        try {
                                            val accountSnapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (accountSnapshot.documents.isNotEmpty()) {
                                                val accountId = accountSnapshot.documents[0].id
                                                val transaction = hashMapOf(
                                                    "amount" to amount,
                                                    "dateTime" to Timestamp.now(),
                                                    "accountID" to accountId,
                                                    "transactionName" to transactionName,
                                                    "transactionType" to transactionType,
                                                    "location" to if (location != null) {
                                                        hashMapOf(
                                                            "latitude" to location.latitude,
                                                            "longitude" to location.longitude
                                                        )
                                                    } else null
                                                )
                                
                                                firestore.collection("accounts")
                                                    .document(accountId)
                                                    .collection("transactions")
                                                    .add(transaction)
                                                    .await()
                                                Log.d("NotificationListener", "Transaction added: $transactionName, Amount: $amount")
                                            } else {
                                                Log.e("NotificationListener", "No Nu account found for user: $userId")
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error adding transaction: ${e.message}")
                                        }
                                    }
                                
                                    private suspend fun updateNuAccountBalance(userId: String, amountDelta: Long) {
                                        try {
                                            val accountSnapshot = firestore.collection("accounts")
                                                .whereEqualTo("name", "Nu")
                                                .whereEqualTo("user_id", userId)
                                                .get()
                                                .await()
                                
                                            if (accountSnapshot.documents.isNotEmpty()) {
                                                val accountId = accountSnapshot.documents[0].id
                                                val currentAmount = accountSnapshot.documents[0].getLong("amount") ?: 0L
                                                val newAmount = currentAmount + amountDelta
                                
                                                firestore.collection("accounts")
                                                    .document(accountId)
                                                    .update("amount", newAmount)
                                                    .await()
                                                Log.d("NotificationListener", "Nu account balance updated by $amountDelta. New balance: $newAmount")
                                            } else {
                                                Log.e("NotificationListener", "No Nu account found for user: $userId")
                                            }
                                        } catch (e: Exception) {
                                            Log.e("NotificationListener", "Error updating account balance: ${e.message}")
                                        }
                                    }
                                
                                    override fun onNotificationRemoved(sbn: StatusBarNotification?) {
                                        super.onNotificationRemoved(sbn)
                                        Log.d("NotificationListener", "Notification removed: ${sbn?.packageName}")
                                    }
                                
                                    private fun getCurrentUserId(): String? {
                                        val user = FirebaseAuth.getInstance().currentUser
                                        return user?.uid
                                    }
                                
                                    private fun showNotification(title: String, content: String) {
                                        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                                        val channelId = "SpendiQ_Channel"
                                        val channelName = "SpendiQ Notifications"
                                
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                            val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
                                            notificationManager.createNotificationChannel(channel)
                                        }
                                
                                        val notification = NotificationCompat.Builder(this, channelId)
                                            .setContentTitle(title)
                                            .setContentText(content)
                                            .setSmallIcon(R.drawable.notification)
                                            .setAutoCancel(true)
                                            .build()
                                
                                        notificationManager.notify(System.currentTimeMillis().toInt(), notification)
                                    }
                                }                                ```
                            - AuthenticationService.kt
                                ```
                                package com.isis3510.spendiq.Services
                                
                                import com.google.firebase.auth.FirebaseAuth
                                import kotlinx.coroutines.tasks.await
                                import kotlinx.coroutines.flow.Flow
                                import kotlinx.coroutines.flow.flow
                                
                                interface AuthenticationServiceProtocol {
                                    fun login(email: String, password: String): Flow<Boolean>
                                    fun signUp(email: String, password: String): Flow<Boolean>
                                }
                                
                                class AuthenticationService : AuthenticationServiceProtocol {
                                    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
                                
                                    override fun login(email: String, password: String): Flow<Boolean> = flow {
                                        try {
                                            auth.signInWithEmailAndPassword(email, password).await()
                                            emit(true)
                                        } catch (e: Exception) {
                                            emit(false)
                                        }
                                    }
                                
                                    override fun signUp(email: String, password: String): Flow<Boolean> = flow {
                                        try {
                                            auth.createUserWithEmailAndPassword(email, password).await()
                                            emit(true)
                                        } catch (e: Exception) {
                                            emit(false)
                                        }
                                    }
                                }                                ```
                            - LocationService.kt
                                ```
                                package com.isis3510.spendiq.services
                                
                                import android.Manifest
                                import android.content.Context
                                import android.content.pm.PackageManager
                                import android.location.Location
                                import android.os.Looper
                                import androidx.core.app.ActivityCompat
                                import com.google.android.gms.location.*
                                import kotlinx.coroutines.suspendCancellableCoroutine
                                import kotlin.coroutines.resume
                                
                                class LocationService(private val context: Context) {
                                    private val fusedLocationClient: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context)
                                
                                    suspend fun getCurrentLocation(): Location? {
                                        if (ActivityCompat.checkSelfPermission(
                                                context,
                                                Manifest.permission.ACCESS_FINE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                                                context,
                                                Manifest.permission.ACCESS_COARSE_LOCATION
                                            ) != PackageManager.PERMISSION_GRANTED
                                        ) {
                                            return null
                                        }
                                
                                        return suspendCancellableCoroutine { continuation ->
                                            fusedLocationClient.lastLocation
                                                .addOnSuccessListener { location ->
                                                    if (location != null) {
                                                        continuation.resume(location)
                                                    } else {
                                                        // If last known location is null, request a single update
                                                        val locationRequest = LocationRequest.create().apply {
                                                            priority = LocationRequest.PRIORITY_HIGH_ACCURACY
                                                            numUpdates = 1
                                                        }
                                                        val locationCallback = object : LocationCallback() {
                                                            override fun onLocationResult(locationResult: LocationResult) {
                                                                fusedLocationClient.removeLocationUpdates(this)
                                                                continuation.resume(locationResult.lastLocation)
                                                            }
                                                        }
                                                        fusedLocationClient.requestLocationUpdates(
                                                            locationRequest,
                                                            locationCallback,
                                                            Looper.getMainLooper()
                                                        )
                                                    }
                                                }
                                                .addOnFailureListener { exception ->
                                                    continuation.resume(null)
                                                }
                                
                                            continuation.invokeOnCancellation {
                                                fusedLocationClient.removeLocationUpdates(object : LocationCallback() {})
                                            }
                                        }
                                    }
                                }                                ```
